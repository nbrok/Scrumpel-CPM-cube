 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 1 - 2/13/2018 8:47:39


       1/       0 :                     	cpu	z80
       2/       0 :                     ;**************************************************************
       3/       0 :                     ;*
       4/       0 :                     ;*             C P / M   version   2 . 2
       5/       0 :                     ;*
       6/       0 :                     ;*   Reconstructed from memory image on February 27, 1981
       7/       0 :                     ;*
       8/       0 :                     ;*                by Clark A. Calkins
       9/       0 :                     ;*
      10/       0 :                     ;**************************************************************
      11/       0 :                     ;
      12/       0 :                     ;   Set memory limit here. This is the amount of contigeous
      13/       0 :                     ; ram starting from 0000. CP/M will reside at the end of this space.
      14/       0 :                     ;
      15/       0 :                     
      16/       0 : =3H                 IOBYTE	EQU	3		;i/o definition byte.
      17/       0 : =4H                 TDRIVE	EQU	4		;current drive name and user number.
      18/       0 : =5H                 ENTRY	EQU	5		;entry point for the cp/m bdos.
      19/       0 : =5CH                TFCB	EQU	5CH		;default file control block.
      20/       0 : =80H                TBUFF	EQU	80H		;i/o buffer and command line storage.
      21/       0 : =100H               TBASE	EQU	100H		;transiant program storage area.
      22/       0 :                     ;
      23/       0 :                     ;   Set control character equates.
      24/       0 :                     ;
      25/       0 : =3H                 CNTRLC	EQU	3		;control-c
      26/       0 : =5H                 CNTRLE	EQU	05H		;control-e
      27/       0 : =8H                 BS	EQU	08H		;backspace
      28/       0 : =9H                 TAB	EQU	09H		;tab
      29/       0 : =AH                 LF	EQU	0AH		;line feed
      30/       0 : =CH                 FF	EQU	0CH		;form feed
      31/       0 : =DH                 CR	EQU	0DH		;carriage return
      32/       0 : =10H                CNTRLP	EQU	10H		;control-p
      33/       0 : =12H                CNTRLR	EQU	12H		;control-r
      34/       0 : =13H                CNTRLS	EQU	13H		;control-s
      35/       0 : =15H                CNTRLU	EQU	15H		;control-u
      36/       0 : =18H                CNTRLX	EQU	18H		;control-x
      37/       0 : =1AH                CNTRLZ	EQU	1AH		;control-z (end-of-file mark)
      38/       0 : =7FH                DEL	EQU	7FH		;rubout
      39/       0 :                     ;
      40/       0 :                     ;   Set origin for CP/M
      41/       0 :                     ;
      42/    C000 :                     	ORG	0c000H
      43/    C000 :                     ;
      44/    C000 : C3 5C C3            CBASE:	JP	COMMAND		;execute command processor (ccp).
      45/    C003 : C3 58 C3            	JP	CLEARBUF	;entry to empty input buffer before starting ccp.
      46/    C006 :                     
      47/    C006 :                     ;
      48/    C006 :                     ;   Standard cp/m ccp input buffer. Format is (max length),
      49/    C006 :                     ; (actual length), (char #1), (char #2), (char #3), etc.
      50/    C006 :                     ;
      51/    C006 : 7F                  INBUFF:	DB	127		;length of input buffer.
      52/    C007 : 00                  	DB	0		;current length of contents.
      53/    C008 : 43 6F 70 79 72 69   	DB	"Copyright"
                    67 68 74 
      54/    C011 : 20 31 39 37 39 20   	DB	" 1979 (c) by Digital Research      "
                    28 63 29 20 62 79 
                    20 44 69 67 69 74 
                    61 6C 20 52 65 73 
                    65 61 72 63 68 20 
                    20 20 20 20 20 
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 2 - 2/13/2018 8:47:39


      55/    C034 : 00 00 00 00 00 00   	DB	0,0,0,0,0,0,0,0,0,0,0,0
                    00 00 00 00 00 00 
      56/    C040 : 00 00 00 00 00 00   	db	0,0,0,0,0,0,0,0,0,0,0
                    00 00 00 00 00 
      57/    C04B : 00 00 00 00 00 00   	DB	0,0,0,0,0,0,0,0,0,0,0,0
                    00 00 00 00 00 00 
      58/    C057 : 00 00 00 00 00 00   	db	0,0,0,0,0,0,0,0,0,0,0
                    00 00 00 00 00 
      59/    C062 : 00 00 00 00 00 00   	DB	0,0,0,0,0,0,0,0,0,0,0,0,0
                    00 00 00 00 00 00 
                    00 
      60/    C06F : 00 00 00 00 00 00   	db	0,0,0,0,0,0,0,0,0,0,0,0
                    00 00 00 00 00 00 
      61/    C07B : 00 00 00 00 00 00   	DB	0,0,0,0,0,0,0,0,0,0,0,0,0
                    00 00 00 00 00 00 
                    00 
      62/    C088 : 08 C0               INPOINT DW	INBUFF+2	;input line pointer
      63/    C08A : 00 00               NAMEPNT DW	0		;input line pointer used for error message. Points to
      64/    C08C :                     ;			;start of name in error.
      65/    C08C :                     ;
      66/    C08C :                     ;   Routine to print (A) on the console. All registers used.
      67/    C08C :                     ;
      68/    C08C : 5F                  PRINT:	LD	E,A		;setup bdos call.
      69/    C08D : 0E 02               	LD	C,2
      70/    C08F : C3 05 00            	JP	ENTRY
      71/    C092 :                     ;
      72/    C092 :                     ;   Routine to print (A) on the console and to save (BC).
      73/    C092 :                     ;
      74/    C092 : C5                  PRINTB:	PUSH	BC
      75/    C093 : CD 8C C0            	CALL	PRINT
      76/    C096 : C1                  	POP	BC
      77/    C097 : C9                  	RET	
      78/    C098 :                     ;
      79/    C098 :                     ;   Routine to send a carriage return, line feed combination
      80/    C098 :                     ; to the console.
      81/    C098 :                     ;
      82/    C098 : 3E 0D               CRLF:	LD	A,CR
      83/    C09A : CD 92 C0            	CALL	PRINTB
      84/    C09D : 3E 0A               	LD	A,LF
      85/    C09F : C3 92 C0            	JP	PRINTB
      86/    C0A2 :                     ;
      87/    C0A2 :                     ;   Routine to send one space to the console and save (BC).
      88/    C0A2 :                     ;
      89/    C0A2 : 3E 20               SPACE:	LD	A,' '
      90/    C0A4 : C3 92 C0            	JP	PRINTB
      91/    C0A7 :                     ;
      92/    C0A7 :                     ;   Routine to print character string pointed to be (BC) on the
      93/    C0A7 :                     ; console. It must terminate with a null byte.
      94/    C0A7 :                     ;
      95/    C0A7 : C5                  PLINE:	PUSH	BC
      96/    C0A8 : CD 98 C0            	CALL	CRLF
      97/    C0AB : E1                  	POP	HL
      98/    C0AC : 7E                  PLINE2:	LD	A,(HL)
      99/    C0AD : B7                  	OR	A
     100/    C0AE : C8                  	RET	Z
     101/    C0AF : 23                  	INC	HL
     102/    C0B0 : E5                  	PUSH	HL
     103/    C0B1 : CD 8C C0            	CALL	PRINT
     104/    C0B4 : E1                  	POP	HL
     105/    C0B5 : C3 AC C0            	JP	PLINE2
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 3 - 2/13/2018 8:47:39


     106/    C0B8 :                     ;
     107/    C0B8 :                     ;   Routine to reset the disk system.
     108/    C0B8 :                     ;
     109/    C0B8 : 0E 0D               RESDSK:	LD	C,13
     110/    C0BA : C3 05 00            	JP	ENTRY
     111/    C0BD :                     ;
     112/    C0BD :                     ;   Routine to select disk (A).
     113/    C0BD :                     ;
     114/    C0BD : 5F                  DSKSEL:	LD	E,A
     115/    C0BE : 0E 0E               	LD	C,14
     116/    C0C0 : C3 05 00            	JP	ENTRY
     117/    C0C3 :                     ;
     118/    C0C3 :                     ;   Routine to call bdos and save the return code. The zero
     119/    C0C3 :                     ; flag is set on a return of 0ffh.
     120/    C0C3 :                     ;
     121/    C0C3 : CD 05 00            ENTRY1:	CALL	ENTRY
     122/    C0C6 : 32 EE C7            	LD	(RTNCODE),A	;save return code.
     123/    C0C9 : 3C                  	INC	A		;set zero if 0ffh returned.
     124/    C0CA : C9                  	RET	
     125/    C0CB :                     ;
     126/    C0CB :                     ;   Routine to open a file. (DE) must point to the FCB.
     127/    C0CB :                     ;
     128/    C0CB : 0E 0F               OPEN:	LD	C,15
     129/    C0CD : C3 C3 C0            	JP	ENTRY1
     130/    C0D0 :                     ;
     131/    C0D0 :                     ;   Routine to open file at (FCB).
     132/    C0D0 :                     ;
     133/    C0D0 : AF                  OPENFCB:XOR	A		;clear the record number byte at fcb+32
     134/    C0D1 : 32 ED C7            	LD	(FCB+32),A
     135/    C0D4 : 11 CD C7            	LD	DE,FCB
     136/    C0D7 : C3 CB C0            	JP	OPEN
     137/    C0DA :                     ;
     138/    C0DA :                     ;   Routine to close a file. (DE) points to FCB.
     139/    C0DA :                     ;
     140/    C0DA : 0E 10               CLOSE:	LD	C,16
     141/    C0DC : C3 C3 C0            	JP	ENTRY1
     142/    C0DF :                     ;
     143/    C0DF :                     ;   Routine to search for the first file with ambigueous name
     144/    C0DF :                     ; (DE).
     145/    C0DF :                     ;
     146/    C0DF : 0E 11               SRCHFST:LD	C,17
     147/    C0E1 : C3 C3 C0            	JP	ENTRY1
     148/    C0E4 :                     ;
     149/    C0E4 :                     ;   Search for the next ambigeous file name.
     150/    C0E4 :                     ;
     151/    C0E4 : 0E 12               SRCHNXT:LD	C,18
     152/    C0E6 : C3 C3 C0            	JP	ENTRY1
     153/    C0E9 :                     ;
     154/    C0E9 :                     ;   Search for file at (FCB).
     155/    C0E9 :                     ;
     156/    C0E9 : 11 CD C7            SRCHFCB:LD	DE,FCB
     157/    C0EC : C3 DF C0            	JP	SRCHFST
     158/    C0EF :                     ;
     159/    C0EF :                     ;   Routine to delete a file pointed to by (DE).
     160/    C0EF :                     ;
     161/    C0EF : 0E 13               DELETE:	LD	C,19
     162/    C0F1 : C3 05 00            	JP	ENTRY
     163/    C0F4 :                     ;
     164/    C0F4 :                     ;   Routine to call the bdos and set the zero flag if a zero
     165/    C0F4 :                     ; status is returned.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 4 - 2/13/2018 8:47:39


     166/    C0F4 :                     ;
     167/    C0F4 : CD 05 00            ENTRY2:	CALL	ENTRY
     168/    C0F7 : B7                  	OR	A		;set zero flag if appropriate.
     169/    C0F8 : C9                  	RET	
     170/    C0F9 :                     ;
     171/    C0F9 :                     ;   Routine to read the next record from a sequential file.
     172/    C0F9 :                     ; (DE) points to the FCB.
     173/    C0F9 :                     ;
     174/    C0F9 : 0E 14               RDREC:	LD	C,20
     175/    C0FB : C3 F4 C0            	JP	ENTRY2
     176/    C0FE :                     ;
     177/    C0FE :                     ;   Routine to read file at (FCB).
     178/    C0FE :                     ;
     179/    C0FE : 11 CD C7            READFCB:LD	DE,FCB
     180/    C101 : C3 F9 C0            	JP	RDREC
     181/    C104 :                     ;
     182/    C104 :                     ;   Routine to write the next record of a sequential file.
     183/    C104 :                     ; (DE) points to the FCB.
     184/    C104 :                     ;
     185/    C104 : 0E 15               WRTREC:	LD	C,21
     186/    C106 : C3 F4 C0            	JP	ENTRY2
     187/    C109 :                     ;
     188/    C109 :                     ;   Routine to create the file pointed to by (DE).
     189/    C109 :                     ;
     190/    C109 : 0E 16               CREATE:	LD	C,22
     191/    C10B : C3 C3 C0            	JP	ENTRY1
     192/    C10E :                     ;
     193/    C10E :                     ;   Routine to rename the file pointed to by (DE). Note that
     194/    C10E :                     ; the new name starts at (DE+16).
     195/    C10E :                     ;
     196/    C10E : 0E 17               RENAM:	LD	C,23
     197/    C110 : C3 05 00            	JP	ENTRY
     198/    C113 :                     ;
     199/    C113 :                     ;   Get the current user code.
     200/    C113 :                     ;
     201/    C113 : 1E FF               GETUSR:	LD	E,0FFH
     202/    C115 :                     ;
     203/    C115 :                     ;   Routne to get or set the current user code.
     204/    C115 :                     ; If (E) is FF then this is a GET, else it is a SET.
     205/    C115 :                     ;
     206/    C115 : 0E 20               GETSETUC: LD	C,32
     207/    C117 : C3 05 00            	JP	ENTRY
     208/    C11A :                     ;
     209/    C11A :                     ;   Routine to set the current drive byte at (TDRIVE).
     210/    C11A :                     ;
     211/    C11A : CD 13 C1            SETCDRV:CALL	GETUSR		;get user number
     212/    C11D : 87                  	ADD	A,A		;and shift into the upper 4 bits.
     213/    C11E : 87                  	ADD	A,A
     214/    C11F : 87                  	ADD	A,A
     215/    C120 : 87                  	ADD	A,A
     216/    C121 : 21 EF C7            	LD	HL,CDRIVE	;now add in the current drive number.
     217/    C124 : B6                  	OR	(HL)
     218/    C125 : 32 04 00            	LD	(TDRIVE),A	;and save.
     219/    C128 : C9                  	RET	
     220/    C129 :                     ;
     221/    C129 :                     ;   Move currently active drive down to (TDRIVE).
     222/    C129 :                     ;
     223/    C129 : 3A EF C7            MOVECD:	LD	A,(CDRIVE)
     224/    C12C : 32 04 00            	LD	(TDRIVE),A
     225/    C12F : C9                  	RET	
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 5 - 2/13/2018 8:47:39


     226/    C130 :                     ;
     227/    C130 :                     ;   Routine to convert (A) into upper case ascii. Only letters
     228/    C130 :                     ; are affected.
     229/    C130 :                     ;
     230/    C130 : FE 61               UPPER:	CP	'a'		;check for letters in the range of 'a' to 'z'.
     231/    C132 : D8                  	RET	C
     232/    C133 : FE 7B               	CP	'{'
     233/    C135 : D0                  	RET	NC
     234/    C136 : E6 5F               	AND	5FH		;convert it if found.
     235/    C138 : C9                  	RET	
     236/    C139 :                     ;
     237/    C139 :                     ;   Routine to get a line of input. We must check to see if the
     238/    C139 :                     ; user is in (BATCH) mode. If so, then read the input from file
     239/    C139 :                     ; ($$$.SUB). At the end, reset to console input.
     240/    C139 :                     ;
     241/    C139 : 3A AB C7            GETINP:	LD	A,(BATCH)	;if =0, then use console input.
     242/    C13C : B7                  	OR	A
     243/    C13D : CA 96 C1            	JP	Z,GETINP1
     244/    C140 :                     ;
     245/    C140 :                     ;   Use the submit file ($$$.sub) which is prepared by a
     246/    C140 :                     ; SUBMIT run. It must be on drive (A) and it will be deleted
     247/    C140 :                     ; if and error occures (like eof).
     248/    C140 :                     ;
     249/    C140 : 3A EF C7            	LD	A,(CDRIVE)	;select drive 0 if need be.
     250/    C143 : B7                  	OR	A
     251/    C144 : 3E 00               	LD	A,0		;always use drive A for submit.
     252/    C146 : C4 BD C0            	CALL	NZ,DSKSEL	;select it if required.
     253/    C149 : 11 AC C7            	LD	DE,BATCHFCB
     254/    C14C : CD CB C0            	CALL	OPEN		;look for it.
     255/    C14F : CA 96 C1            	JP	Z,GETINP1	;if not there, use normal input.
     256/    C152 : 3A BB C7            	LD	A,(BATCHFCB+15)	;get last record number+1.
     257/    C155 : 3D                  	DEC	A
     258/    C156 : 32 CC C7            	LD	(BATCHFCB+32),A
     259/    C159 : 11 AC C7            	LD	DE,BATCHFCB
     260/    C15C : CD F9 C0            	CALL	RDREC		;read last record.
     261/    C15F : C2 96 C1            	JP	NZ,GETINP1	;quit on end of file.
     262/    C162 :                     ;
     263/    C162 :                     ;   Move this record into input buffer.
     264/    C162 :                     ;
     265/    C162 : 11 07 C0            	LD	DE,INBUFF+1
     266/    C165 : 21 80 00            	LD	HL,TBUFF	;data was read into buffer here.
     267/    C168 : 06 80               	LD	B,128		;all 128 characters may be used.
     268/    C16A : CD 42 C4            	CALL	HL2DE		;(HL) to (DE), (B) bytes.
     269/    C16D : 21 BA C7            	LD	HL,BATCHFCB+14
     270/    C170 : 36 00               	LD	(HL),0		;zero out the 's2' byte.
     271/    C172 : 23                  	INC	HL		;and decrement the record count.
     272/    C173 : 35                  	DEC	(HL)
     273/    C174 : 11 AC C7            	LD	DE,BATCHFCB	;close the batch file now.
     274/    C177 : CD DA C0            	CALL	CLOSE
     275/    C17A : CA 96 C1            	JP	Z,GETINP1	;quit on an error.
     276/    C17D : 3A EF C7            	LD	A,(CDRIVE)	;re-select previous drive if need be.
     277/    C180 : B7                  	OR	A
     278/    C181 : C4 BD C0            	CALL	NZ,DSKSEL	;don't do needless selects.
     279/    C184 :                     ;
     280/    C184 :                     ;   Print line just read on console.
     281/    C184 :                     ;
     282/    C184 : 21 08 C0            	LD	HL,INBUFF+2
     283/    C187 : CD AC C0            	CALL	PLINE2
     284/    C18A : CD C2 C1            	CALL	CHKCON		;check console, quit on a key.
     285/    C18D : CA A7 C1            	JP	Z,GETINP2	;jump if no key is pressed.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 6 - 2/13/2018 8:47:39


     286/    C190 :                     ;
     287/    C190 :                     ;   Terminate the submit job on any keyboard input. Delete this
     288/    C190 :                     ; file such that it is not re-started and jump to normal keyboard
     289/    C190 :                     ; input section.
     290/    C190 :                     ;
     291/    C190 : CD DD C1            	CALL	DELBATCH	;delete the batch file.
     292/    C193 : C3 82 C3            	JP	CMMND1		;and restart command input.
     293/    C196 :                     ;
     294/    C196 :                     ;   Get here for normal keyboard input. Delete the submit file
     295/    C196 :                     ; incase there was one.
     296/    C196 :                     ;
     297/    C196 : CD DD C1            GETINP1:CALL	DELBATCH	;delete file ($$$.sub).
     298/    C199 : CD 1A C1            	CALL	SETCDRV		;reset active disk.
     299/    C19C : 0E 0A               	LD	C,10		;get line from console device.
     300/    C19E : 11 06 C0            	LD	DE,INBUFF
     301/    C1A1 : CD 05 00            	CALL	ENTRY
     302/    C1A4 : CD 29 C1            	CALL	MOVECD		;reset current drive (again).
     303/    C1A7 :                     ;
     304/    C1A7 :                     ;   Convert input line to upper case.
     305/    C1A7 :                     ;
     306/    C1A7 : 21 07 C0            GETINP2:LD	HL,INBUFF+1
     307/    C1AA : 46                  	LD	B,(HL)		;(B)=character counter.
     308/    C1AB : 23                  GETINP3:INC	HL
     309/    C1AC : 78                  	LD	A,B		;end of the line?
     310/    C1AD : B7                  	OR	A
     311/    C1AE : CA BA C1            	JP	Z,GETINP4
     312/    C1B1 : 7E                  	LD	A,(HL)		;convert to upper case.
     313/    C1B2 : CD 30 C1            	CALL	UPPER
     314/    C1B5 : 77                  	LD	(HL),A
     315/    C1B6 : 05                  	DEC	B		;adjust character count.
     316/    C1B7 : C3 AB C1            	JP	GETINP3
     317/    C1BA : 77                  GETINP4:LD	(HL),A		;add trailing null.
     318/    C1BB : 21 08 C0            	LD	HL,INBUFF+2
     319/    C1BE : 22 88 C0            	LD	(INPOINT),HL	;reset input line pointer.
     320/    C1C1 : C9                  	RET	
     321/    C1C2 :                     ;
     322/    C1C2 :                     ;   Routine to check the console for a key pressed. The zero
     323/    C1C2 :                     ; flag is set is none, else the character is returned in (A).
     324/    C1C2 :                     ;
     325/    C1C2 : 0E 0B               CHKCON:	LD	C,11		;check console.
     326/    C1C4 : CD 05 00            	CALL	ENTRY
     327/    C1C7 : B7                  	OR	A
     328/    C1C8 : C8                  	RET	Z		;return if nothing.
     329/    C1C9 : 0E 01               	LD	C,1		;else get character.
     330/    C1CB : CD 05 00            	CALL	ENTRY
     331/    C1CE : B7                  	OR	A		;clear zero flag and return.
     332/    C1CF : C9                  	RET	
     333/    C1D0 :                     ;
     334/    C1D0 :                     ;   Routine to get the currently active drive number.
     335/    C1D0 :                     ;
     336/    C1D0 : 0E 19               GETDSK:	LD	C,25
     337/    C1D2 : C3 05 00            	JP	ENTRY
     338/    C1D5 :                     ;
     339/    C1D5 :                     ;   Set the stabdard dma address.
     340/    C1D5 :                     ;
     341/    C1D5 : 11 80 00            STDDMA:	LD	DE,TBUFF
     342/    C1D8 :                     ;
     343/    C1D8 :                     ;   Routine to set the dma address to (DE).
     344/    C1D8 :                     ;
     345/    C1D8 : 0E 1A               DMASET:	LD	C,26
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 7 - 2/13/2018 8:47:39


     346/    C1DA : C3 05 00            	JP	ENTRY
     347/    C1DD :                     ;
     348/    C1DD :                     ;  Delete the batch file created by SUBMIT.
     349/    C1DD :                     ;
     350/    C1DD : 21 AB C7            DELBATCH: LD	HL,BATCH	;is batch active?
     351/    C1E0 : 7E                  	LD	A,(HL)
     352/    C1E1 : B7                  	OR	A
     353/    C1E2 : C8                  	RET	Z
     354/    C1E3 : 36 00               	LD	(HL),0		;yes, de-activate it.
     355/    C1E5 : AF                  	XOR	A
     356/    C1E6 : CD BD C0            	CALL	DSKSEL		;select drive 0 for sure.
     357/    C1E9 : 11 AC C7            	LD	DE,BATCHFCB	;and delete this file.
     358/    C1EC : CD EF C0            	CALL	DELETE
     359/    C1EF : 3A EF C7            	LD	A,(CDRIVE)	;reset current drive.
     360/    C1F2 : C3 BD C0            	JP	DSKSEL
     361/    C1F5 :                     ;
     362/    C1F5 :                     ;   Check to two strings at (PATTRN1) and (PATTRN2). They must be
     363/    C1F5 :                     ; the same or we halt....
     364/    C1F5 :                     ;
     365/    C1F5 : 11 28 C3            VERIFY:	LD	DE,PATTRN1	;these are the serial number bytes.
     366/    C1F8 : 21 00 C8            	LD	HL,PATTRN2	;ditto, but how could they be different?
     367/    C1FB : 06 06               	LD	B,6		;6 bytes each.
     368/    C1FD : 1A                  VERIFY1:LD	A,(DE)
     369/    C1FE : BE                  	CP	(HL)
     370/    C1FF : C2 CF C3            	JP	NZ,HALT		;jump to halt routine.
     371/    C202 : 13                  	INC	DE
     372/    C203 : 23                  	INC	HL
     373/    C204 : 05                  	DEC	B
     374/    C205 : C2 FD C1            	JP	NZ,VERIFY1
     375/    C208 : C9                  	RET	
     376/    C209 :                     ;
     377/    C209 :                     ;   Print back file name with a '?' to indicate a syntax error.
     378/    C209 :                     ;
     379/    C209 : CD 98 C0            SYNERR:	CALL	CRLF		;end current line.
     380/    C20C : 2A 8A C0            	LD	HL,(NAMEPNT)	;this points to name in error.
     381/    C20F : 7E                  SYNERR1:LD	A,(HL)		;print it until a space or null is found.
     382/    C210 : FE 20               	CP	' '
     383/    C212 : CA 22 C2            	JP	Z,SYNERR2
     384/    C215 : B7                  	OR	A
     385/    C216 : CA 22 C2            	JP	Z,SYNERR2
     386/    C219 : E5                  	PUSH	HL
     387/    C21A : CD 8C C0            	CALL	PRINT
     388/    C21D : E1                  	POP	HL
     389/    C21E : 23                  	INC	HL
     390/    C21F : C3 0F C2            	JP	SYNERR1
     391/    C222 : 3E 3F               SYNERR2:LD	A,'?'		;add trailing '?'.
     392/    C224 : CD 8C C0            	CALL	PRINT
     393/    C227 : CD 98 C0            	CALL	CRLF
     394/    C22A : CD DD C1            	CALL	DELBATCH	;delete any batch file.
     395/    C22D : C3 82 C3            	JP	CMMND1		;and restart from console input.
     396/    C230 :                     ;
     397/    C230 :                     ;   Check character at (DE) for legal command input. Note that the
     398/    C230 :                     ; zero flag is set if the character is a delimiter.
     399/    C230 :                     ;
     400/    C230 : 1A                  CHECK:	LD	A,(DE)
     401/    C231 : B7                  	OR	A
     402/    C232 : C8                  	RET	Z
     403/    C233 : FE 20               	CP	' '		;control characters are not legal here.
     404/    C235 : DA 09 C2            	JP	C,SYNERR
     405/    C238 : C8                  	RET	Z		;check for valid delimiter.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 8 - 2/13/2018 8:47:39


     406/    C239 : FE 3D               	CP	'='
     407/    C23B : C8                  	RET	Z
     408/    C23C : FE 5F               	CP	'_'
     409/    C23E : C8                  	RET	Z
     410/    C23F : FE 2E               	CP	'.'
     411/    C241 : C8                  	RET	Z
     412/    C242 : FE 3A               	CP	':'
     413/    C244 : C8                  	RET	Z
     414/    C245 : FE 3B               	CP	03BH ; ';'
     415/    C247 : C8                  	RET	Z
     416/    C248 : FE 3C               	CP	'<'
     417/    C24A : C8                  	RET	Z
     418/    C24B : FE 3E               	CP	'>'
     419/    C24D : C8                  	RET	Z
     420/    C24E : C9                  	RET	
     421/    C24F :                     ;
     422/    C24F :                     ;   Get the next non-blank character from (DE).
     423/    C24F :                     ;
     424/    C24F : 1A                  NONBLANK: LD	A,(DE)
     425/    C250 : B7                  	OR	A		;string ends with a null.
     426/    C251 : C8                  	RET	Z
     427/    C252 : FE 20               	CP	' '
     428/    C254 : C0                  	RET	NZ
     429/    C255 : 13                  	INC	DE
     430/    C256 : C3 4F C2            	JP	NONBLANK
     431/    C259 :                     ;
     432/    C259 :                     ;   Add (HL)=(HL)+(A)
     433/    C259 :                     ;
     434/    C259 : 85                  ADDHL:	ADD	A,L
     435/    C25A : 6F                  	LD	L,A
     436/    C25B : D0                  	RET	NC		;take care of any carry.
     437/    C25C : 24                  	INC	H
     438/    C25D : C9                  	RET	
     439/    C25E :                     ;
     440/    C25E :                     ;   Convert the first name in (FCB).
     441/    C25E :                     ;
     442/    C25E : 3E 00               CONVFST:LD	A,0
     443/    C260 :                     ;
     444/    C260 :                     ;   Format a file name (convert * to '?', etc.). On return,
     445/    C260 :                     ; (A)=0 is an unambigeous name was specified. Enter with (A) equal to
     446/    C260 :                     ; the position within the fcb for the name (either 0 or 16).
     447/    C260 :                     ;
     448/    C260 : 21 CD C7            CONVERT:LD	HL,FCB
     449/    C263 : CD 59 C2            	CALL	ADDHL
     450/    C266 : E5                  	PUSH	HL
     451/    C267 : E5                  	PUSH	HL
     452/    C268 : AF                  	XOR	A
     453/    C269 : 32 F0 C7            	LD	(CHGDRV),A	;initialize drive change flag.
     454/    C26C : 2A 88 C0            	LD	HL,(INPOINT)	;set (HL) as pointer into input line.
     455/    C26F : EB                  	EX	DE,HL
     456/    C270 : CD 4F C2            	CALL	NONBLANK	;get next non-blank character.
     457/    C273 : EB                  	EX	DE,HL
     458/    C274 : 22 8A C0            	LD	(NAMEPNT),HL	;save pointer here for any error message.
     459/    C277 : EB                  	EX	DE,HL
     460/    C278 : E1                  	POP	HL
     461/    C279 : 1A                  	LD	A,(DE)		;get first character.
     462/    C27A : B7                  	OR	A
     463/    C27B : CA 89 C2            	JP	Z,CONVRT1
     464/    C27E : DE 40               	SBC	A,'A'-1		;might be a drive name, convert to binary.
     465/    C280 : 47                  	LD	B,A		;and save.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 9 - 2/13/2018 8:47:39


     466/    C281 : 13                  	INC	DE		;check next character for a ':'.
     467/    C282 : 1A                  	LD	A,(DE)
     468/    C283 : FE 3A               	CP	':'
     469/    C285 : CA 90 C2            	JP	Z,CONVRT2
     470/    C288 : 1B                  	DEC	DE		;nope, move pointer back to the start of the line.
     471/    C289 : 3A EF C7            CONVRT1:LD	A,(CDRIVE)
     472/    C28C : 77                  	LD	(HL),A
     473/    C28D : C3 96 C2            	JP	CONVRT3
     474/    C290 : 78                  CONVRT2:LD	A,B
     475/    C291 : 32 F0 C7            	LD	(CHGDRV),A	;set change in drives flag.
     476/    C294 : 70                  	LD	(HL),B
     477/    C295 : 13                  	INC	DE
     478/    C296 :                     ;
     479/    C296 :                     ;   Convert the basic file name.
     480/    C296 :                     ;
     481/    C296 : 06 08               CONVRT3:LD	B,08H
     482/    C298 : CD 30 C2            CONVRT4:CALL	CHECK
     483/    C29B : CA B9 C2            	JP	Z,CONVRT8
     484/    C29E : 23                  	INC	HL
     485/    C29F : FE 2A               	CP	'*'		;note that an '*' will fill the remaining
     486/    C2A1 : C2 A9 C2            	JP	NZ,CONVRT5	;field with '?'.
     487/    C2A4 : 36 3F               	LD	(HL),'?'
     488/    C2A6 : C3 AB C2            	JP	CONVRT6
     489/    C2A9 : 77                  CONVRT5:LD	(HL),A
     490/    C2AA : 13                  	INC	DE
     491/    C2AB : 05                  CONVRT6:DEC	B
     492/    C2AC : C2 98 C2            	JP	NZ,CONVRT4
     493/    C2AF : CD 30 C2            CONVRT7:CALL	CHECK		;get next delimiter.
     494/    C2B2 : CA C0 C2            	JP	Z,GETEXT
     495/    C2B5 : 13                  	INC	DE
     496/    C2B6 : C3 AF C2            	JP	CONVRT7
     497/    C2B9 : 23                  CONVRT8:INC	HL		;blank fill the file name.
     498/    C2BA : 36 20               	LD	(HL),' '
     499/    C2BC : 05                  	DEC	B
     500/    C2BD : C2 B9 C2            	JP	NZ,CONVRT8
     501/    C2C0 :                     ;
     502/    C2C0 :                     ;   Get the extension and convert it.
     503/    C2C0 :                     ;
     504/    C2C0 : 06 03               GETEXT:	LD	B,03H
     505/    C2C2 : FE 2E               	CP	'.'
     506/    C2C4 : C2 E9 C2            	JP	NZ,GETEXT5
     507/    C2C7 : 13                  	INC	DE
     508/    C2C8 : CD 30 C2            GETEXT1:CALL	CHECK
     509/    C2CB : CA E9 C2            	JP	Z,GETEXT5
     510/    C2CE : 23                  	INC	HL
     511/    C2CF : FE 2A               	CP	'*'
     512/    C2D1 : C2 D9 C2            	JP	NZ,GETEXT2
     513/    C2D4 : 36 3F               	LD	(HL),'?'
     514/    C2D6 : C3 DB C2            	JP	GETEXT3
     515/    C2D9 : 77                  GETEXT2:LD	(HL),A
     516/    C2DA : 13                  	INC	DE
     517/    C2DB : 05                  GETEXT3:DEC	B
     518/    C2DC : C2 C8 C2            	JP	NZ,GETEXT1
     519/    C2DF : CD 30 C2            GETEXT4:CALL	CHECK
     520/    C2E2 : CA F0 C2            	JP	Z,GETEXT6
     521/    C2E5 : 13                  	INC	DE
     522/    C2E6 : C3 DF C2            	JP	GETEXT4
     523/    C2E9 : 23                  GETEXT5:INC	HL
     524/    C2EA : 36 20               	LD	(HL),' '
     525/    C2EC : 05                  	DEC	B
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 10 - 2/13/2018 8:47:39


     526/    C2ED : C2 E9 C2            	JP	NZ,GETEXT5
     527/    C2F0 : 06 03               GETEXT6:LD	B,3
     528/    C2F2 : 23                  GETEXT7:INC	HL
     529/    C2F3 : 36 00               	LD	(HL),0
     530/    C2F5 : 05                  	DEC	B
     531/    C2F6 : C2 F2 C2            	JP	NZ,GETEXT7
     532/    C2F9 : EB                  	EX	DE,HL
     533/    C2FA : 22 88 C0            	LD	(INPOINT),HL	;save input line pointer.
     534/    C2FD : E1                  	POP	HL
     535/    C2FE :                     ;
     536/    C2FE :                     ;   Check to see if this is an ambigeous file name specification.
     537/    C2FE :                     ; Set the (A) register to non zero if it is.
     538/    C2FE :                     ;
     539/    C2FE : 01 0B 00            	LD	BC,11		;set name length.
     540/    C301 : 23                  GETEXT8:INC	HL
     541/    C302 : 7E                  	LD	A,(HL)
     542/    C303 : FE 3F               	CP	'?'		;any question marks?
     543/    C305 : C2 09 C3            	JP	NZ,GETEXT9
     544/    C308 : 04                  	INC	B		;count them.
     545/    C309 : 0D                  GETEXT9:DEC	C
     546/    C30A : C2 01 C3            	JP	NZ,GETEXT8
     547/    C30D : 78                  	LD	A,B
     548/    C30E : B7                  	OR	A
     549/    C30F : C9                  	RET	
     550/    C310 :                     ;
     551/    C310 :                     ;   CP/M command table. Note commands can be either 3 or 4 characters long.
     552/    C310 :                     ;
     553/    C310 : =6H                 NUMCMDS EQU	6		;number of commands
     554/    C310 : 44 49 52 20         CMDTBL:	db	"DIR "
     555/    C314 : 45 52 41 20         	db	"ERA "
     556/    C318 : 54 59 50 45         	db	"TYPE"
     557/    C31C : 53 41 56 45         	db	"SAVE"
     558/    C320 : 52 45 4E 20         	db	"REN "
     559/    C324 : 55 53 45 52         	db	"USER"
     560/    C328 :                     ;
     561/    C328 :                     ;   The following six bytes must agree with those at (PATTRN2)
     562/    C328 :                     ; or cp/m will HALT. Why?
     563/    C328 :                     ;
     564/    C328 : 00 16 00 00 00 00   PATTRN1: DB	0,22,0,0,0,0	;(* serial number bytes *).
     565/    C32E :                     ;
     566/    C32E :                     ;   Search the command table for a match with what has just
     567/    C32E :                     ; been entered. If a match is found, then we jump to the
     568/    C32E :                     ; proper section. Else jump to (UNKNOWN).
     569/    C32E :                     ; On return, the (C) register is set to the command number
     570/    C32E :                     ; that matched (or NUMCMDS+1 if no match).
     571/    C32E :                     ;
     572/    C32E : 21 10 C3            SEARCH:	LD	HL,CMDTBL
     573/    C331 : 0E 00               	LD	C,0
     574/    C333 : 79                  SEARCH1 LD	A,C
     575/    C334 : FE 06               	CP	NUMCMDS		;this commands exists.
     576/    C336 : D0                  	RET	NC
     577/    C337 : 11 CE C7            	LD	DE,FCB+1	;check this one.
     578/    C33A : 06 04               	LD	B,4		;max command length.
     579/    C33C : 1A                  SEARCH2 LD	A,(DE)
     580/    C33D : BE                  	CP	(HL)
     581/    C33E : C2 4F C3            	JP	NZ,SEARCH3	;not a match.
     582/    C341 : 13                  	INC	DE
     583/    C342 : 23                  	INC	HL
     584/    C343 : 05                  	DEC	B
     585/    C344 : C2 3C C3            	JP	NZ,SEARCH2
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 11 - 2/13/2018 8:47:39


     586/    C347 : 1A                  	LD	A,(DE)		;allow a 3 character command to match.
     587/    C348 : FE 20               	CP	' '
     588/    C34A : C2 54 C3            	JP	NZ,SEARCH4
     589/    C34D : 79                  	LD	A,C		;set return register for this command.
     590/    C34E : C9                  	RET	
     591/    C34F : 23                  SEARCH3:INC	HL
     592/    C350 : 05                  	DEC	B
     593/    C351 : C2 4F C3            	JP	NZ,SEARCH3
     594/    C354 : 0C                  SEARCH4:INC	C
     595/    C355 : C3 33 C3            	JP	SEARCH1
     596/    C358 :                     ;
     597/    C358 :                     ;   Set the input buffer to empty and then start the command
     598/    C358 :                     ; processor (ccp).
     599/    C358 :                     ;
     600/    C358 : AF                  CLEARBUF: XOR	A
     601/    C359 : 32 07 C0            	LD	(INBUFF+1),A	;second byte is actual length.
     602/    C35C :                     ;
     603/    C35C :                     ;**************************************************************
     604/    C35C :                     ;*
     605/    C35C :                     ;*
     606/    C35C :                     ;* C C P  -   C o n s o l e   C o m m a n d   P r o c e s s o r
     607/    C35C :                     ;*
     608/    C35C :                     ;**************************************************************
     609/    C35C :                     ;*
     610/    C35C : 31 AB C7            COMMAND:LD	SP,CCPSTACK	;setup stack area.
     611/    C35F : C5                  	PUSH	BC		;note that (C) should be equal to:
     612/    C360 : 79                  	LD	A,C		;(uuuudddd) where 'uuuu' is the user number
     613/    C361 : 1F                  	RRA			;and 'dddd' is the drive number.
     614/    C362 : 1F                  	RRA	
     615/    C363 : 1F                  	RRA	
     616/    C364 : 1F                  	RRA	
     617/    C365 : E6 0F               	AND	0FH		;isolate the user number.
     618/    C367 : 5F                  	LD	E,A
     619/    C368 : CD 15 C1            	CALL	GETSETUC	;and set it.
     620/    C36B : CD B8 C0            	CALL	RESDSK		;reset the disk system.
     621/    C36E : 32 AB C7            	LD	(BATCH),A	;clear batch mode flag.
     622/    C371 : C1                  	POP	BC
     623/    C372 : 79                  	LD	A,C
     624/    C373 : E6 0F               	AND	0FH		;isolate the drive number.
     625/    C375 : 32 EF C7            	LD	(CDRIVE),A	;and save.
     626/    C378 : CD BD C0            	CALL	DSKSEL		;...and select.
     627/    C37B : 3A 07 C0            	LD	A,(INBUFF+1)
     628/    C37E : B7                  	OR	A		;anything in input buffer already?
     629/    C37F : C2 98 C3            	JP	NZ,CMMND2	;yes, we just process it.
     630/    C382 :                     ;
     631/    C382 :                     ;   Entry point to get a command line from the console.
     632/    C382 :                     ;
     633/    C382 : 31 AB C7            CMMND1:	LD	SP,CCPSTACK	;set stack straight.
     634/    C385 : CD 98 C0            	CALL	CRLF		;start a new line on the screen.
     635/    C388 : CD D0 C1            	CALL	GETDSK		;get current drive.
     636/    C38B : C6 41               	ADD	A,'A'
     637/    C38D : CD 8C C0            	CALL	PRINT		;print current drive.
     638/    C390 : 3E 3E               	LD	A,'>'
     639/    C392 : CD 8C C0            	CALL	PRINT		;and add prompt.
     640/    C395 : CD 39 C1            	CALL	GETINP		;get line from user.
     641/    C398 :                     ;
     642/    C398 :                     ;   Process command line here.
     643/    C398 :                     ;
     644/    C398 : 11 80 00            CMMND2:	LD	DE,TBUFF
     645/    C39B : CD D8 C1            	CALL	DMASET		;set standard dma address.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 12 - 2/13/2018 8:47:39


     646/    C39E : CD D0 C1            	CALL	GETDSK
     647/    C3A1 : 32 EF C7            	LD	(CDRIVE),A	;set current drive.
     648/    C3A4 : CD 5E C2            	CALL	CONVFST		;convert name typed in.
     649/    C3A7 : C4 09 C2            	CALL	NZ,SYNERR	;wild cards are not allowed.
     650/    C3AA : 3A F0 C7            	LD	A,(CHGDRV)	;if a change in drives was indicated,
     651/    C3AD : B7                  	OR	A		;then treat this as an unknown command
     652/    C3AE : C2 A5 C6            	JP	NZ,UNKNOWN	;which gets executed.
     653/    C3B1 : CD 2E C3            	CALL	SEARCH		;else search command table for a match.
     654/    C3B4 :                     ;
     655/    C3B4 :                     ;   Note that an unknown command returns
     656/    C3B4 :                     ; with (A) pointing to the last address
     657/    C3B4 :                     ; in our table which is (UNKNOWN).
     658/    C3B4 :                     ;
     659/    C3B4 : 21 C1 C3            	LD	HL,CMDADR	;now, look thru our address table for command (A).
     660/    C3B7 : 5F                  	LD	E,A		;set (DE) to command number.
     661/    C3B8 : 16 00               	LD	D,0
     662/    C3BA : 19                  	ADD	HL,DE
     663/    C3BB : 19                  	ADD	HL,DE		;(HL)=(CMDADR)+2*(command number).
     664/    C3BC : 7E                  	LD	A,(HL)		;now pick out this address.
     665/    C3BD : 23                  	INC	HL
     666/    C3BE : 66                  	LD	H,(HL)
     667/    C3BF : 6F                  	LD	L,A
     668/    C3C0 : E9                  	JP	(HL)		;now execute it.
     669/    C3C1 :                     ;
     670/    C3C1 :                     ;   CP/M command address table.
     671/    C3C1 :                     ;
     672/    C3C1 : 77 C4 1F C5 5D C5   CMDADR:	DW	DIRECT,ERASE,TYPE,SAVE
                    AD C5 
     673/    C3C9 : 10 C6 8E C6 A5 C6   	DW	RENAME,USER,UNKNOWN
     674/    C3CF :                     ;
     675/    C3CF :                     ;   Halt the system. Reason for this is unknown at present.
     676/    C3CF :                     ;
     677/    C3CF : 21 F3 76            HALT:	LD	HL,76F3H	;'DI HLT' instructions.
     678/    C3D2 : 22 00 C0            	LD	(CBASE),HL
     679/    C3D5 : 21 00 C0            	LD	HL,CBASE
     680/    C3D8 : E9                  	JP	(HL)
     681/    C3D9 :                     ;
     682/    C3D9 :                     ;   Read error while TYPEing a file.
     683/    C3D9 :                     ;
     684/    C3D9 : 01 DF C3            RDERROR:LD	BC,RDERR
     685/    C3DC : C3 A7 C0            	JP	PLINE
     686/    C3DF : 52 65 61 64 20 65   RDERR:	db	"Read error"
                    72 72 6F 72 
     687/    C3E9 : 00                  	DB	0
     688/    C3EA :                     ;
     689/    C3EA :                     ;   Required file was not located.
     690/    C3EA :                     ;
     691/    C3EA : 01 F0 C3            NONE:	LD	BC,NOFILE
     692/    C3ED : C3 A7 C0            	JP	PLINE
     693/    C3F0 : 4E 6F 20 66 69 6C   NOFILE:	db	"No file"
                    65 
     694/    C3F7 : 00                  	DB	0
     695/    C3F8 :                     ;
     696/    C3F8 :                     ;   Decode a command of the form 'A>filename number{ filename}.
     697/    C3F8 :                     ; Note that a drive specifier is not allowed on the first file
     698/    C3F8 :                     ; name. On return, the number is in register (A). Any error
     699/    C3F8 :                     ; causes 'filename?' to be printed and the command is aborted.
     700/    C3F8 :                     ;
     701/    C3F8 : CD 5E C2            DECODE:	CALL	CONVFST		;convert filename.
     702/    C3FB : 3A F0 C7            	LD	A,(CHGDRV)	;do not allow a drive to be specified.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 13 - 2/13/2018 8:47:39


     703/    C3FE : B7                  	OR	A
     704/    C3FF : C2 09 C2            	JP	NZ,SYNERR
     705/    C402 : 21 CE C7            	LD	HL,FCB+1	;convert number now.
     706/    C405 : 01 0B 00            	LD	BC,11		;(B)=sum register, (C)=max digit count.
     707/    C408 : 7E                  DECODE1:LD	A,(HL)
     708/    C409 : FE 20               	CP	' '		;a space terminates the numeral.
     709/    C40B : CA 33 C4            	JP	Z,DECODE3
     710/    C40E : 23                  	INC	HL
     711/    C40F : D6 30               	SUB	'0'		;make binary from ascii.
     712/    C411 : FE 0A               	CP	10		;legal digit?
     713/    C413 : D2 09 C2            	JP	NC,SYNERR
     714/    C416 : 57                  	LD	D,A		;yes, save it in (D).
     715/    C417 : 78                  	LD	A,B		;compute (B)=(B)*10 and check for overflow.
     716/    C418 : E6 E0               	AND	0E0H
     717/    C41A : C2 09 C2            	JP	NZ,SYNERR
     718/    C41D : 78                  	LD	A,B
     719/    C41E : 07                  	RLCA	
     720/    C41F : 07                  	RLCA	
     721/    C420 : 07                  	RLCA			;(A)=(B)*8
     722/    C421 : 80                  	ADD	A,B		;.......*9
     723/    C422 : DA 09 C2            	JP	C,SYNERR
     724/    C425 : 80                  	ADD	A,B		;.......*10
     725/    C426 : DA 09 C2            	JP	C,SYNERR
     726/    C429 : 82                  	ADD	A,D		;add in new digit now.
     727/    C42A : DA 09 C2            DECODE2:JP	C,SYNERR
     728/    C42D : 47                  	LD	B,A		;and save result.
     729/    C42E : 0D                  	DEC	C		;only look at 11 digits.
     730/    C42F : C2 08 C4            	JP	NZ,DECODE1
     731/    C432 : C9                  	RET	
     732/    C433 : 7E                  DECODE3:LD	A,(HL)		;spaces must follow (why?).
     733/    C434 : FE 20               	CP	' '
     734/    C436 : C2 09 C2            	JP	NZ,SYNERR
     735/    C439 : 23                  	INC	HL
     736/    C43A : 0D                  DECODE4:DEC	C
     737/    C43B : C2 33 C4            	JP	NZ,DECODE3
     738/    C43E : 78                  	LD	A,B		;set (A)=the numeric value entered.
     739/    C43F : C9                  	RET	
     740/    C440 :                     ;
     741/    C440 :                     ;   Move 3 bytes from (HL) to (DE). Note that there is only
     742/    C440 :                     ; one reference to this at (A2D5h).
     743/    C440 :                     ;
     744/    C440 : 06 03               MOVE3:	LD	B,3
     745/    C442 :                     ;
     746/    C442 :                     ;   Move (B) bytes from (HL) to (DE).
     747/    C442 :                     ;
     748/    C442 : 7E                  HL2DE:	LD	A,(HL)
     749/    C443 : 12                  	LD	(DE),A
     750/    C444 : 23                  	INC	HL
     751/    C445 : 13                  	INC	DE
     752/    C446 : 05                  	DEC	B
     753/    C447 : C2 42 C4            	JP	NZ,HL2DE
     754/    C44A : C9                  	RET	
     755/    C44B :                     ;
     756/    C44B :                     ;   Compute (HL)=(TBUFF)+(A)+(C) and get the byte that's here.
     757/    C44B :                     ;
     758/    C44B : 21 80 00            EXTRACT:LD	HL,TBUFF
     759/    C44E : 81                  	ADD	A,C
     760/    C44F : CD 59 C2            	CALL	ADDHL
     761/    C452 : 7E                  	LD	A,(HL)
     762/    C453 : C9                  	RET	
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 14 - 2/13/2018 8:47:39


     763/    C454 :                     ;
     764/    C454 :                     ;  Check drive specified. If it means a change, then the new
     765/    C454 :                     ; drive will be selected. In any case, the drive byte of the
     766/    C454 :                     ; fcb will be set to null (means use current drive).
     767/    C454 :                     ;
     768/    C454 : AF                  DSELECT:XOR	A		;null out first byte of fcb.
     769/    C455 : 32 CD C7            	LD	(FCB),A
     770/    C458 : 3A F0 C7            	LD	A,(CHGDRV)	;a drive change indicated?
     771/    C45B : B7                  	OR	A
     772/    C45C : C8                  	RET	Z
     773/    C45D : 3D                  	DEC	A		;yes, is it the same as the current drive?
     774/    C45E : 21 EF C7            	LD	HL,CDRIVE
     775/    C461 : BE                  	CP	(HL)
     776/    C462 : C8                  	RET	Z
     777/    C463 : C3 BD C0            	JP	DSKSEL		;no. Select it then.
     778/    C466 :                     ;
     779/    C466 :                     ;   Check the drive selection and reset it to the previous
     780/    C466 :                     ; drive if it was changed for the preceeding command.
     781/    C466 :                     ;
     782/    C466 : 3A F0 C7            RESETDR:LD	A,(CHGDRV)	;drive change indicated?
     783/    C469 : B7                  	OR	A
     784/    C46A : C8                  	RET	Z
     785/    C46B : 3D                  	DEC	A		;yes, was it a different drive?
     786/    C46C : 21 EF C7            	LD	HL,CDRIVE
     787/    C46F : BE                  	CP	(HL)
     788/    C470 : C8                  	RET	Z
     789/    C471 : 3A EF C7            	LD	A,(CDRIVE)	;yes, re-select our old drive.
     790/    C474 : C3 BD C0            	JP	DSKSEL
     791/    C477 :                     ;
     792/    C477 :                     ;**************************************************************
     793/    C477 :                     ;*
     794/    C477 :                     ;*           D I R E C T O R Y   C O M M A N D
     795/    C477 :                     ;*
     796/    C477 :                     ;**************************************************************
     797/    C477 :                     ;
     798/    C477 : CD 5E C2            DIRECT:	CALL	CONVFST		;convert file name.
     799/    C47A : CD 54 C4            	CALL	DSELECT		;select indicated drive.
     800/    C47D : 21 CE C7            	LD	HL,FCB+1	;was any file indicated?
     801/    C480 : 7E                  	LD	A,(HL)
     802/    C481 : FE 20               	CP	' '
     803/    C483 : C2 8F C4            	JP	NZ,DIRECT2
     804/    C486 : 06 0B               	LD	B,11		;no. Fill field with '?' - same as *.*.
     805/    C488 : 36 3F               DIRECT1:LD	(HL),'?'
     806/    C48A : 23                  	INC	HL
     807/    C48B : 05                  	DEC	B
     808/    C48C : C2 88 C4            	JP	NZ,DIRECT1
     809/    C48F : 1E 00               DIRECT2:LD	E,0		;set initial cursor position.
     810/    C491 : D5                  	PUSH	DE
     811/    C492 : CD E9 C0            	CALL	SRCHFCB		;get first file name.
     812/    C495 : CC EA C3            	CALL	Z,NONE		;none found at all?
     813/    C498 : CA 1B C5            DIRECT3:JP	Z,DIRECT9	;terminate if no more names.
     814/    C49B : 3A EE C7            	LD	A,(RTNCODE)	;get file's position in segment (0-3).
     815/    C49E : 0F                  	RRCA	
     816/    C49F : 0F                  	RRCA	
     817/    C4A0 : 0F                  	RRCA	
     818/    C4A1 : E6 60               	AND	60H		;(A)=position*32
     819/    C4A3 : 4F                  	LD	C,A
     820/    C4A4 : 3E 0A               	LD	A,10
     821/    C4A6 : CD 4B C4            	CALL	EXTRACT		;extract the tenth entry in fcb.
     822/    C4A9 : 17                  	RLA			;check system file status bit.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 15 - 2/13/2018 8:47:39


     823/    C4AA : DA 0F C5            	JP	C,DIRECT8	;we don't list them.
     824/    C4AD : D1                  	POP	DE
     825/    C4AE : 7B                  	LD	A,E		;bump name count.
     826/    C4AF : 1C                  	INC	E
     827/    C4B0 : D5                  	PUSH	DE
     828/    C4B1 : E6 03               	AND	03H		;at end of line?
     829/    C4B3 : F5                  	PUSH	AF
     830/    C4B4 : C2 CC C4            	JP	NZ,DIRECT4
     831/    C4B7 : CD 98 C0            	CALL	CRLF		;yes, end this line and start another.
     832/    C4BA : C5                  	PUSH	BC
     833/    C4BB : CD D0 C1            	CALL	GETDSK		;start line with ('A:').
     834/    C4BE : C1                  	POP	BC
     835/    C4BF : C6 41               	ADD	A,'A'
     836/    C4C1 : CD 92 C0            	CALL	PRINTB
     837/    C4C4 : 3E 3A               	LD	A,':'
     838/    C4C6 : CD 92 C0            	CALL	PRINTB
     839/    C4C9 : C3 D4 C4            	JP	DIRECT5
     840/    C4CC : CD A2 C0            DIRECT4:CALL	SPACE		;add seperator between file names.
     841/    C4CF : 3E 3A               	LD	A,':'
     842/    C4D1 : CD 92 C0            	CALL	PRINTB
     843/    C4D4 : CD A2 C0            DIRECT5:CALL	SPACE
     844/    C4D7 : 06 01               	LD	B,1		;'extract' each file name character at a time.
     845/    C4D9 : 78                  DIRECT6:LD	A,B
     846/    C4DA : CD 4B C4            	CALL	EXTRACT
     847/    C4DD : E6 7F               	AND	7FH		;strip bit 7 (status bit).
     848/    C4DF : FE 20               	CP	' '		;are we at the end of the name?
     849/    C4E1 : C2 F9 C4            	JP	NZ,DRECT65
     850/    C4E4 : F1                  	POP	AF		;yes, don't print spaces at the end of a line.
     851/    C4E5 : F5                  	PUSH	AF
     852/    C4E6 : FE 03               	CP	3
     853/    C4E8 : C2 F7 C4            	JP	NZ,DRECT63
     854/    C4EB : 3E 09               	LD	A,9		;first check for no extension.
     855/    C4ED : CD 4B C4            	CALL	EXTRACT
     856/    C4F0 : E6 7F               	AND	7FH
     857/    C4F2 : FE 20               	CP	' '
     858/    C4F4 : CA 0E C5            	JP	Z,DIRECT7	;don't print spaces.
     859/    C4F7 : 3E 20               DRECT63:LD	A,' '		;else print them.
     860/    C4F9 : CD 92 C0            DRECT65:CALL	PRINTB
     861/    C4FC : 04                  	INC	B		;bump to next character psoition.
     862/    C4FD : 78                  	LD	A,B
     863/    C4FE : FE 0C               	CP	12		;end of the name?
     864/    C500 : D2 0E C5            	JP	NC,DIRECT7
     865/    C503 : FE 09               	CP	9		;nope, starting extension?
     866/    C505 : C2 D9 C4            	JP	NZ,DIRECT6
     867/    C508 : CD A2 C0            	CALL	SPACE		;yes, add seperating space.
     868/    C50B : C3 D9 C4            	JP	DIRECT6
     869/    C50E : F1                  DIRECT7:POP	AF		;get the next file name.
     870/    C50F : CD C2 C1            DIRECT8:CALL	CHKCON		;first check console, quit on anything.
     871/    C512 : C2 1B C5            	JP	NZ,DIRECT9
     872/    C515 : CD E4 C0            	CALL	SRCHNXT		;get next name.
     873/    C518 : C3 98 C4            	JP	DIRECT3		;and continue with our list.
     874/    C51B : D1                  DIRECT9:POP	DE		;restore the stack and return to command level.
     875/    C51C : C3 86 C7            	JP	GETBACK
     876/    C51F :                     ;
     877/    C51F :                     ;**************************************************************
     878/    C51F :                     ;*
     879/    C51F :                     ;*                E R A S E   C O M M A N D
     880/    C51F :                     ;*
     881/    C51F :                     ;**************************************************************
     882/    C51F :                     ;
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 16 - 2/13/2018 8:47:39


     883/    C51F : CD 5E C2            ERASE:	CALL	CONVFST		;convert file name.
     884/    C522 : FE 0B               	CP	11		;was '*.*' entered?
     885/    C524 : C2 42 C5            	JP	NZ,ERASE1
     886/    C527 : 01 52 C5            	LD	BC,YESNO	;yes, ask for confirmation.
     887/    C52A : CD A7 C0            	CALL	PLINE
     888/    C52D : CD 39 C1            	CALL	GETINP
     889/    C530 : 21 07 C0            	LD	HL,INBUFF+1
     890/    C533 : 35                  	DEC	(HL)		;must be exactly 'y'.
     891/    C534 : C2 82 C3            	JP	NZ,CMMND1
     892/    C537 : 23                  	INC	HL
     893/    C538 : 7E                  	LD	A,(HL)
     894/    C539 : FE 59               	CP	'Y'
     895/    C53B : C2 82 C3            	JP	NZ,CMMND1
     896/    C53E : 23                  	INC	HL
     897/    C53F : 22 88 C0            	LD	(INPOINT),HL	;save input line pointer.
     898/    C542 : CD 54 C4            ERASE1:	CALL	DSELECT		;select desired disk.
     899/    C545 : 11 CD C7            	LD	DE,FCB
     900/    C548 : CD EF C0            	CALL	DELETE		;delete the file.
     901/    C54B : 3C                  	INC	A
     902/    C54C : CC EA C3            	CALL	Z,NONE		;not there?
     903/    C54F : C3 86 C7            	JP	GETBACK		;return to command level now.
     904/    C552 : 41 6C 6C 20 28 79   YESNO:	db	"All (y/n)?"
                    2F 6E 29 3F 
     905/    C55C : 00                  	DB	0
     906/    C55D :                     ;
     907/    C55D :                     ;**************************************************************
     908/    C55D :                     ;*
     909/    C55D :                     ;*            T Y P E   C O M M A N D
     910/    C55D :                     ;*
     911/    C55D :                     ;**************************************************************
     912/    C55D :                     ;
     913/    C55D : CD 5E C2            TYPE:	CALL	CONVFST		;convert file name.
     914/    C560 : C2 09 C2            	JP	NZ,SYNERR	;wild cards not allowed.
     915/    C563 : CD 54 C4            	CALL	DSELECT		;select indicated drive.
     916/    C566 : CD D0 C0            	CALL	OPENFCB		;open the file.
     917/    C569 : CA A7 C5            	JP	Z,TYPE5		;not there?
     918/    C56C : CD 98 C0            	CALL	CRLF		;ok, start a new line on the screen.
     919/    C56F : 21 F1 C7            	LD	HL,NBYTES	;initialize byte counter.
     920/    C572 : 36 FF               	LD	(HL),0FFH	;set to read first sector.
     921/    C574 : 21 F1 C7            TYPE1:	LD	HL,NBYTES
     922/    C577 : 7E                  TYPE2:	LD	A,(HL)		;have we written the entire sector?
     923/    C578 : FE 80               	CP	128
     924/    C57A : DA 87 C5            	JP	C,TYPE3
     925/    C57D : E5                  	PUSH	HL		;yes, read in the next one.
     926/    C57E : CD FE C0            	CALL	READFCB
     927/    C581 : E1                  	POP	HL
     928/    C582 : C2 A0 C5            	JP	NZ,TYPE4	;end or error?
     929/    C585 : AF                  	XOR	A		;ok, clear byte counter.
     930/    C586 : 77                  	LD	(HL),A
     931/    C587 : 34                  TYPE3:	INC	(HL)		;count this byte.
     932/    C588 : 21 80 00            	LD	HL,TBUFF	;and get the (A)th one from the buffer (TBUFF).
     933/    C58B : CD 59 C2            	CALL	ADDHL
     934/    C58E : 7E                  	LD	A,(HL)
     935/    C58F : FE 1A               	CP	CNTRLZ		;end of file mark?
     936/    C591 : CA 86 C7            	JP	Z,GETBACK
     937/    C594 : CD 8C C0            	CALL	PRINT		;no, print it.
     938/    C597 : CD C2 C1            	CALL	CHKCON		;check console, quit if anything ready.
     939/    C59A : C2 86 C7            	JP	NZ,GETBACK
     940/    C59D : C3 74 C5            	JP	TYPE1
     941/    C5A0 :                     ;
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 17 - 2/13/2018 8:47:39


     942/    C5A0 :                     ;   Get here on an end of file or read error.
     943/    C5A0 :                     ;
     944/    C5A0 : 3D                  TYPE4:	DEC	A		;read error?
     945/    C5A1 : CA 86 C7            	JP	Z,GETBACK
     946/    C5A4 : CD D9 C3            	CALL	RDERROR		;yes, print message.
     947/    C5A7 : CD 66 C4            TYPE5:	CALL	RESETDR		;and reset proper drive
     948/    C5AA : C3 09 C2            	JP	SYNERR		;now print file name with problem.
     949/    C5AD :                     ;
     950/    C5AD :                     ;**************************************************************
     951/    C5AD :                     ;*
     952/    C5AD :                     ;*            S A V E   C O M M A N D
     953/    C5AD :                     ;*
     954/    C5AD :                     ;**************************************************************
     955/    C5AD :                     ;
     956/    C5AD : CD F8 C3            SAVE:	CALL	DECODE		;get numeric number that follows SAVE.
     957/    C5B0 : F5                  	PUSH	AF		;save number of pages to write.
     958/    C5B1 : CD 5E C2            	CALL	CONVFST		;convert file name.
     959/    C5B4 : C2 09 C2            	JP	NZ,SYNERR	;wild cards not allowed.
     960/    C5B7 : CD 54 C4            	CALL	DSELECT		;select specified drive.
     961/    C5BA : 11 CD C7            	LD	DE,FCB		;now delete this file.
     962/    C5BD : D5                  	PUSH	DE
     963/    C5BE : CD EF C0            	CALL	DELETE
     964/    C5C1 : D1                  	POP	DE
     965/    C5C2 : CD 09 C1            	CALL	CREATE		;and create it again.
     966/    C5C5 : CA FB C5            	JP	Z,SAVE3		;can't create?
     967/    C5C8 : AF                  	XOR	A		;clear record number byte.
     968/    C5C9 : 32 ED C7            	LD	(FCB+32),A
     969/    C5CC : F1                  	POP	AF		;convert pages to sectors.
     970/    C5CD : 6F                  	LD	L,A
     971/    C5CE : 26 00               	LD	H,0
     972/    C5D0 : 29                  	ADD	HL,HL		;(HL)=number of sectors to write.
     973/    C5D1 : 11 00 01            	LD	DE,TBASE	;and we start from here.
     974/    C5D4 : 7C                  SAVE1:	LD	A,H		;done yet?
     975/    C5D5 : B5                  	OR	L
     976/    C5D6 : CA F1 C5            	JP	Z,SAVE2
     977/    C5D9 : 2B                  	DEC	HL		;nope, count this and compute the start
     978/    C5DA : E5                  	PUSH	HL		;of the next 128 byte sector.
     979/    C5DB : 21 80 00            	LD	HL,128
     980/    C5DE : 19                  	ADD	HL,DE
     981/    C5DF : E5                  	PUSH	HL		;save it and set the transfer address.
     982/    C5E0 : CD D8 C1            	CALL	DMASET
     983/    C5E3 : 11 CD C7            	LD	DE,FCB		;write out this sector now.
     984/    C5E6 : CD 04 C1            	CALL	WRTREC
     985/    C5E9 : D1                  	POP	DE		;reset (DE) to the start of the last sector.
     986/    C5EA : E1                  	POP	HL		;restore sector count.
     987/    C5EB : C2 FB C5            	JP	NZ,SAVE3	;write error?
     988/    C5EE : C3 D4 C5            	JP	SAVE1
     989/    C5F1 :                     ;
     990/    C5F1 :                     ;   Get here after writing all of the file.
     991/    C5F1 :                     ;
     992/    C5F1 : 11 CD C7            SAVE2:	LD	DE,FCB		;now close the file.
     993/    C5F4 : CD DA C0            	CALL	CLOSE
     994/    C5F7 : 3C                  	INC	A		;did it close ok?
     995/    C5F8 : C2 01 C6            	JP	NZ,SAVE4
     996/    C5FB :                     ;
     997/    C5FB :                     ;   Print out error message (no space).
     998/    C5FB :                     ;
     999/    C5FB : 01 07 C6            SAVE3:	LD	BC,NOSPACE
    1000/    C5FE : CD A7 C0            	CALL	PLINE
    1001/    C601 : CD D5 C1            SAVE4:	CALL	STDDMA		;reset the standard dma address.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 18 - 2/13/2018 8:47:39


    1002/    C604 : C3 86 C7            	JP	GETBACK
    1003/    C607 : 4E 6F 20 73 70 61   NOSPACE db	"No space"
                    63 65 
    1004/    C60F : 00                  	DB	0
    1005/    C610 :                     ;
    1006/    C610 :                     ;**************************************************************
    1007/    C610 :                     ;*
    1008/    C610 :                     ;*           R E N A M E   C O M M A N D
    1009/    C610 :                     ;*
    1010/    C610 :                     ;**************************************************************
    1011/    C610 :                     ;
    1012/    C610 : CD 5E C2            RENAME:	CALL	CONVFST		;convert first file name.
    1013/    C613 : C2 09 C2            	JP	NZ,SYNERR	;wild cards not allowed.
    1014/    C616 : 3A F0 C7            	LD	A,(CHGDRV)	;remember any change in drives specified.
    1015/    C619 : F5                  	PUSH	AF
    1016/    C61A : CD 54 C4            	CALL	DSELECT		;and select this drive.
    1017/    C61D : CD E9 C0            	CALL	SRCHFCB		;is this file present?
    1018/    C620 : C2 79 C6            	JP	NZ,RENAME6	;yes, print error message.
    1019/    C623 : 21 CD C7            	LD	HL,FCB		;yes, move this name into second slot.
    1020/    C626 : 11 DD C7            	LD	DE,FCB+16
    1021/    C629 : 06 10               	LD	B,16
    1022/    C62B : CD 42 C4            	CALL	HL2DE
    1023/    C62E : 2A 88 C0            	LD	HL,(INPOINT)	;get input pointer.
    1024/    C631 : EB                  	EX	DE,HL
    1025/    C632 : CD 4F C2            	CALL	NONBLANK	;get next non blank character.
    1026/    C635 : FE 3D               	CP	'='		;only allow an '=' or '_' seperator.
    1027/    C637 : CA 3F C6            	JP	Z,RENAME1
    1028/    C63A : FE 5F               	CP	'_'
    1029/    C63C : C2 73 C6            	JP	NZ,RENAME5
    1030/    C63F : EB                  RENAME1:EX	DE,HL
    1031/    C640 : 23                  	INC	HL		;ok, skip seperator.
    1032/    C641 : 22 88 C0            	LD	(INPOINT),HL	;save input line pointer.
    1033/    C644 : CD 5E C2            	CALL	CONVFST		;convert this second file name now.
    1034/    C647 : C2 73 C6            	JP	NZ,RENAME5	;again, no wild cards.
    1035/    C64A : F1                  	POP	AF		;if a drive was specified, then it
    1036/    C64B : 47                  	LD	B,A		;must be the same as before.
    1037/    C64C : 21 F0 C7            	LD	HL,CHGDRV
    1038/    C64F : 7E                  	LD	A,(HL)
    1039/    C650 : B7                  	OR	A
    1040/    C651 : CA 59 C6            	JP	Z,RENAME2
    1041/    C654 : B8                  	CP	B
    1042/    C655 : 70                  	LD	(HL),B
    1043/    C656 : C2 73 C6            	JP	NZ,RENAME5	;they were different, error.
    1044/    C659 : 70                  RENAME2:LD	(HL),B		;	reset as per the first file specification.
    1045/    C65A : AF                  	XOR	A
    1046/    C65B : 32 CD C7            	LD	(FCB),A		;clear the drive byte of the fcb.
    1047/    C65E : CD E9 C0            RENAME3:CALL	SRCHFCB		;and go look for second file.
    1048/    C661 : CA 6D C6            	JP	Z,RENAME4	;doesn't exist?
    1049/    C664 : 11 CD C7            	LD	DE,FCB
    1050/    C667 : CD 0E C1            	CALL	RENAM		;ok, rename the file.
    1051/    C66A : C3 86 C7            	JP	GETBACK
    1052/    C66D :                     ;
    1053/    C66D :                     ;   Process rename errors here.
    1054/    C66D :                     ;
    1055/    C66D : CD EA C3            RENAME4:CALL	NONE		;file not there.
    1056/    C670 : C3 86 C7            	JP	GETBACK
    1057/    C673 : CD 66 C4            RENAME5:CALL	RESETDR		;bad command format.
    1058/    C676 : C3 09 C2            	JP	SYNERR
    1059/    C679 : 01 82 C6            RENAME6:LD	BC,EXISTS	;destination file already exists.
    1060/    C67C : CD A7 C0            	CALL	PLINE
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 19 - 2/13/2018 8:47:39


    1061/    C67F : C3 86 C7            	JP	GETBACK
    1062/    C682 : 46 69 6C 65 20 65   EXISTS:	db	"File exists"
                    78 69 73 74 73 
    1063/    C68D : 00                  	DB	0
    1064/    C68E :                     ;
    1065/    C68E :                     ;**************************************************************
    1066/    C68E :                     ;*
    1067/    C68E :                     ;*             U S E R   C O M M A N D
    1068/    C68E :                     ;*
    1069/    C68E :                     ;**************************************************************
    1070/    C68E :                     ;
    1071/    C68E : CD F8 C3            USER:	CALL	DECODE		;get numeric value following command.
    1072/    C691 : FE 10               	CP	16		;legal user number?
    1073/    C693 : D2 09 C2            	JP	NC,SYNERR
    1074/    C696 : 5F                  	LD	E,A		;yes but is there anything else?
    1075/    C697 : 3A CE C7            	LD	A,(FCB+1)
    1076/    C69A : FE 20               	CP	' '
    1077/    C69C : CA 09 C2            	JP	Z,SYNERR	;yes, that is not allowed.
    1078/    C69F : CD 15 C1            	CALL	GETSETUC	;ok, set user code.
    1079/    C6A2 : C3 89 C7            	JP	GETBACK1
    1080/    C6A5 :                     ;
    1081/    C6A5 :                     ;**************************************************************
    1082/    C6A5 :                     ;*
    1083/    C6A5 :                     ;*        T R A N S I A N T   P R O G R A M   C O M M A N D
    1084/    C6A5 :                     ;*
    1085/    C6A5 :                     ;**************************************************************
    1086/    C6A5 :                     ;
    1087/    C6A5 : CD F5 C1            UNKNOWN:CALL	VERIFY		;check for valid system (why?).
    1088/    C6A8 : 3A CE C7            	LD	A,(FCB+1)	;anything to execute?
    1089/    C6AB : FE 20               	CP	' '
    1090/    C6AD : C2 C4 C6            	JP	NZ,UNKWN1
    1091/    C6B0 : 3A F0 C7            	LD	A,(CHGDRV)	;nope, only a drive change?
    1092/    C6B3 : B7                  	OR	A
    1093/    C6B4 : CA 89 C7            	JP	Z,GETBACK1	;neither???
    1094/    C6B7 : 3D                  	DEC	A
    1095/    C6B8 : 32 EF C7            	LD	(CDRIVE),A	;ok, store new drive.
    1096/    C6BB : CD 29 C1            	CALL	MOVECD		;set (TDRIVE) also.
    1097/    C6BE : CD BD C0            	CALL	DSKSEL		;and select this drive.
    1098/    C6C1 : C3 89 C7            	JP	GETBACK1	;then return.
    1099/    C6C4 :                     ;
    1100/    C6C4 :                     ;   Here a file name was typed. Prepare to execute it.
    1101/    C6C4 :                     ;
    1102/    C6C4 : 11 D6 C7            UNKWN1:	LD	DE,FCB+9	;an extension specified?
    1103/    C6C7 : 1A                  	LD	A,(DE)
    1104/    C6C8 : FE 20               	CP	' '
    1105/    C6CA : C2 09 C2            	JP	NZ,SYNERR	;yes, not allowed.
    1106/    C6CD : D5                  UNKWN2:	PUSH	DE
    1107/    C6CE : CD 54 C4            	CALL	DSELECT		;select specified drive.
    1108/    C6D1 : D1                  	POP	DE
    1109/    C6D2 : 21 83 C7            	LD	HL,COMFILE	;set the extension to 'COM'.
    1110/    C6D5 : CD 40 C4            	CALL	MOVE3
    1111/    C6D8 : CD D0 C0            	CALL	OPENFCB		;and open this file.
    1112/    C6DB : CA 6B C7            	JP	Z,UNKWN9	;not present?
    1113/    C6DE :                     ;
    1114/    C6DE :                     ;   Load in the program.
    1115/    C6DE :                     ;
    1116/    C6DE : 21 00 01            	LD	HL,TBASE	;store the program starting here.
    1117/    C6E1 : E5                  UNKWN3:	PUSH	HL
    1118/    C6E2 : EB                  	EX	DE,HL
    1119/    C6E3 : CD D8 C1            	CALL	DMASET		;set transfer address.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 20 - 2/13/2018 8:47:39


    1120/    C6E6 : 11 CD C7            	LD	DE,FCB		;and read the next record.
    1121/    C6E9 : CD F9 C0            	CALL	RDREC
    1122/    C6EC : C2 01 C7            	JP	NZ,UNKWN4	;end of file or read error?
    1123/    C6EF : E1                  	POP	HL		;nope, bump pointer for next sector.
    1124/    C6F0 : 11 80 00            	LD	DE,128
    1125/    C6F3 : 19                  	ADD	HL,DE
    1126/    C6F4 : 11 00 C0            	LD	DE,CBASE	;enough room for the whole file?
    1127/    C6F7 : 7D                  	LD	A,L
    1128/    C6F8 : 93                  	SUB	E
    1129/    C6F9 : 7C                  	LD	A,H
    1130/    C6FA : 9A                  	SBC	A,D
    1131/    C6FB : D2 71 C7            	JP	NC,UNKWN0	;no, it can't fit.
    1132/    C6FE : C3 E1 C6            	JP	UNKWN3
    1133/    C701 :                     ;
    1134/    C701 :                     ;   Get here after finished reading.
    1135/    C701 :                     ;
    1136/    C701 : E1                  UNKWN4:	POP	HL
    1137/    C702 : 3D                  	DEC	A		;normal end of file?
    1138/    C703 : C2 71 C7            	JP	NZ,UNKWN0
    1139/    C706 : CD 66 C4            	CALL	RESETDR		;yes, reset previous drive.
    1140/    C709 : CD 5E C2            	CALL	CONVFST		;convert the first file name that follows
    1141/    C70C : 21 F0 C7            	LD	HL,CHGDRV	;command name.
    1142/    C70F : E5                  	PUSH	HL
    1143/    C710 : 7E                  	LD	A,(HL)		;set drive code in default fcb.
    1144/    C711 : 32 CD C7            	LD	(FCB),A
    1145/    C714 : 3E 10               	LD	A,16		;put second name 16 bytes later.
    1146/    C716 : CD 60 C2            	CALL	CONVERT		;convert second file name.
    1147/    C719 : E1                  	POP	HL
    1148/    C71A : 7E                  	LD	A,(HL)		;and set the drive for this second file.
    1149/    C71B : 32 DD C7            	LD	(FCB+16),A
    1150/    C71E : AF                  	XOR	A		;clear record byte in fcb.
    1151/    C71F : 32 ED C7            	LD	(FCB+32),A
    1152/    C722 : 11 5C 00            	LD	DE,TFCB		;move it into place at(005Ch).
    1153/    C725 : 21 CD C7            	LD	HL,FCB
    1154/    C728 : 06 21               	LD	B,33
    1155/    C72A : CD 42 C4            	CALL	HL2DE
    1156/    C72D : 21 08 C0            	LD	HL,INBUFF+2	;now move the remainder of the input
    1157/    C730 : 7E                  UNKWN5:	LD	A,(HL)		;line down to (0080h). Look for a non blank.
    1158/    C731 : B7                  	OR	A		;or a null.
    1159/    C732 : CA 3E C7            	JP	Z,UNKWN6
    1160/    C735 : FE 20               	CP	' '
    1161/    C737 : CA 3E C7            	JP	Z,UNKWN6
    1162/    C73A : 23                  	INC	HL
    1163/    C73B : C3 30 C7            	JP	UNKWN5
    1164/    C73E :                     ;
    1165/    C73E :                     ;   Do the line move now. It ends in a null byte.
    1166/    C73E :                     ;
    1167/    C73E : 06 00               UNKWN6:	LD	B,0		;keep a character count.
    1168/    C740 : 11 81 00            	LD	DE,TBUFF+1	;data gets put here.
    1169/    C743 : 7E                  UNKWN7:	LD	A,(HL)		;move it now.
    1170/    C744 : 12                  	LD	(DE),A
    1171/    C745 : B7                  	OR	A
    1172/    C746 : CA 4F C7            	JP	Z,UNKWN8
    1173/    C749 : 04                  	INC	B
    1174/    C74A : 23                  	INC	HL
    1175/    C74B : 13                  	INC	DE
    1176/    C74C : C3 43 C7            	JP	UNKWN7
    1177/    C74F : 78                  UNKWN8:	LD	A,B		;now store the character count.
    1178/    C750 : 32 80 00            	LD	(TBUFF),A
    1179/    C753 : CD 98 C0            	CALL	CRLF		;clean up the screen.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 21 - 2/13/2018 8:47:39


    1180/    C756 : CD D5 C1            	CALL	STDDMA		;set standard transfer address.
    1181/    C759 : CD 1A C1            	CALL	SETCDRV		;reset current drive.
    1182/    C75C : CD 00 01            	CALL	TBASE		;and execute the program.
    1183/    C75F :                     ;
    1184/    C75F :                     ;   Transiant programs return here (or reboot).
    1185/    C75F :                     ;
    1186/    C75F : 31 AB C7            	LD	SP,BATCH	;set stack first off.
    1187/    C762 : CD 29 C1            	CALL	MOVECD		;move current drive into place (TDRIVE).
    1188/    C765 : CD BD C0            	CALL	DSKSEL		;and reselect it.
    1189/    C768 : C3 82 C3            	JP	CMMND1		;back to comand mode.
    1190/    C76B :                     ;
    1191/    C76B :                     ;   Get here if some error occured.
    1192/    C76B :                     ;
    1193/    C76B : CD 66 C4            UNKWN9:	CALL	RESETDR		;inproper format.
    1194/    C76E : C3 09 C2            	JP	SYNERR
    1195/    C771 : 01 7A C7            UNKWN0:	LD	BC,BADLOAD	;read error or won't fit.
    1196/    C774 : CD A7 C0            	CALL	PLINE
    1197/    C777 : C3 86 C7            	JP	GETBACK
    1198/    C77A : 42 61 64 20 6C 6F   BADLOAD db	"Bad load"
                    61 64 
    1199/    C782 : 00                  	DB	0
    1200/    C783 : 43 4F 4D            COMFILE: db	"COM"		;command file extension.
    1201/    C786 :                     ;
    1202/    C786 :                     ;   Get here to return to command level. We will reset the
    1203/    C786 :                     ; previous active drive and then either return to command
    1204/    C786 :                     ; level directly or print error message and then return.
    1205/    C786 :                     ;
    1206/    C786 : CD 66 C4            GETBACK:CALL	RESETDR		;reset previous drive.
    1207/    C789 : CD 5E C2            GETBACK1: CALL	CONVFST		;convert first name in (FCB).
    1208/    C78C : 3A CE C7            	LD	A,(FCB+1)	;if this was just a drive change request,
    1209/    C78F : D6 20               	SUB	' '		;make sure it was valid.
    1210/    C791 : 21 F0 C7            	LD	HL,CHGDRV
    1211/    C794 : B6                  	OR	(HL)
    1212/    C795 : C2 09 C2            	JP	NZ,SYNERR
    1213/    C798 : C3 82 C3            	JP	CMMND1		;ok, return to command level.
    1214/    C79B :                     ;
    1215/    C79B :                     ;   ccp stack area.
    1216/    C79B :                     ;
    1217/    C79B : 00 00 00 00 00 00   	DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                    00 00 00 00 00 00 
                    00 00 00 00 
    1218/    C7AB : =C7ABH              CCPSTACK EQU	$	;end of ccp stack area.
    1219/    C7AB :                     ;
    1220/    C7AB :                     ;   Batch (or SUBMIT) processing information storage.
    1221/    C7AB :                     ;
    1222/    C7AB : 00                  BATCH:	DB	0		;batch mode flag (0=not active).
    1223/    C7AC : 00                  BATCHFCB: DB	0
    1224/    C7AD : 24 24 24 20 20 20   	db "$$$     SUB"
                    20 20 53 55 42 
    1225/    C7B8 : 00 00 00 00 00 00   	DB 0,0,0,0,0,0,0,0,0,0,0,0
                    00 00 00 00 00 00 
    1226/    C7C4 : 00 00 00 00 00 00   	db 0,0,0,0,0,0,0,0,0
                    00 00 00 
    1227/    C7CD :                     ;
    1228/    C7CD :                     ;   File control block setup by the CCP.
    1229/    C7CD :                     ;
    1230/    C7CD : 00                  FCB:	DB	0
    1231/    C7CE : 20 20 20 20 20 20   	db	"           "
                    20 20 20 20 20 
    1232/    C7D9 : 00 00 00 00 00      	DB	0,0,0,0,0
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 22 - 2/13/2018 8:47:39


    1233/    C7DE : 20 20 20 20 20 20   	db	"           "
                    20 20 20 20 20 
    1234/    C7E9 : 00 00 00 00 00      	DB	0,0,0,0,0
    1235/    C7EE : 00                  RTNCODE: DB	0		;status returned from bdos call.
    1236/    C7EF : 00                  CDRIVE:	DB	0		;currently active drive.
    1237/    C7F0 : 00                  CHGDRV:	DB	0		;change in drives flag (0=no change).
    1238/    C7F1 : 00 00               NBYTES:	DW	0		;byte counter used by TYPE.
    1239/    C7F3 :                     ;
    1240/    C7F3 :                     ;   Room for expansion?
    1241/    C7F3 :                     ;
    1242/    C7F3 : 00 00 00 00 00 00   	DB	0,0,0,0,0,0,0,0,0,0,0,0,0
                    00 00 00 00 00 00 
                    00 
    1243/    C800 :                     ;
    1244/    C800 :                     ;   Note that the following six bytes must match those at
    1245/    C800 :                     ; (PATTRN1) or cp/m will HALT. Why?
    1246/    C800 :                     ;
    1247/    C800 : 00 16 00 00 00 00   PATTRN2: DB	0,22,0,0,0,0	;(* serial number bytes *).
    1248/    C806 :                     ;
    1249/    C806 :                     ;**************************************************************
    1250/    C806 :                     ;*
    1251/    C806 :                     ;*                    B D O S   E N T R Y
    1252/    C806 :                     ;*
    1253/    C806 :                     ;**************************************************************
    1254/    C806 :                     ;
    1255/    C806 : C3 11 C8            FBASE:	JP	FBASE1
    1256/    C809 :                     ;
    1257/    C809 :                     ;   Bdos error table.
    1258/    C809 :                     ;
    1259/    C809 : 99 C8               BADSCTR: DW	ERROR1		;bad sector on read or write.
    1260/    C80B : A5 C8               BADSLCT: DW	ERROR2		;bad disk select.
    1261/    C80D : AB C8               RODISK:	 DW	ERROR3		;disk is read only.
    1262/    C80F : B1 C8               ROFILE:	 DW	ERROR4		;file is read only.
    1263/    C811 :                     ;
    1264/    C811 :                     ;   Entry into bdos. (DE) or (E) are the parameters passed. The
    1265/    C811 :                     ; function number desired is in register (C).
    1266/    C811 :                     ;
    1267/    C811 : EB                  FBASE1:	EX	DE,HL		;save the (DE) parameters.
    1268/    C812 : 22 43 CB            	LD	(PARAMS),HL
    1269/    C815 : EB                  	EX	DE,HL
    1270/    C816 : 7B                  	LD	A,E		;and save register (E) in particular.
    1271/    C817 : 32 D6 D5            	LD	(EPARAM),A
    1272/    C81A : 21 00 00            	LD	HL,0
    1273/    C81D : 22 45 CB            	LD	(STATUS),HL	;clear return status.
    1274/    C820 : 39                  	ADD	HL,SP
    1275/    C821 : 22 0F CB            	LD	(USRSTACK),HL	;save users stack pointer.
    1276/    C824 : 31 41 CB            	LD	SP,STKAREA	;and set our own.
    1277/    C827 : AF                  	XOR	A		;clear auto select storage space.
    1278/    C828 : 32 E0 D5            	LD	(AUTOFLAG),A
    1279/    C82B : 32 DE D5            	LD	(AUTO),A
    1280/    C82E : 21 74 D5            	LD	HL,GOBACK	;set return address.
    1281/    C831 : E5                  	PUSH	HL
    1282/    C832 : 79                  	LD	A,C		;get function number.
    1283/    C833 : FE 29               	CP	NFUNCTS		;valid function number?
    1284/    C835 : D0                  	RET	NC
    1285/    C836 : 4B                  	LD	C,E		;keep single register function here.
    1286/    C837 : 21 47 C8            	LD	HL,FUNCTNS	;now look thru the function table.
    1287/    C83A : 5F                  	LD	E,A
    1288/    C83B : 16 00               	LD	D,0		;(DE)=function number.
    1289/    C83D : 19                  	ADD	HL,DE
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 23 - 2/13/2018 8:47:39


    1290/    C83E : 19                  	ADD	HL,DE		;(HL)=(start of table)+2*(function number).
    1291/    C83F : 5E                  	LD	E,(HL)
    1292/    C840 : 23                  	INC	HL
    1293/    C841 : 56                  	LD	D,(HL)		;now (DE)=address for this function.
    1294/    C842 : 2A 43 CB            	LD	HL,(PARAMS)	;retrieve parameters.
    1295/    C845 : EB                  	EX	DE,HL		;now (DE) has the original parameters.
    1296/    C846 : E9                  	JP	(HL)		;execute desired function.
    1297/    C847 :                     ;
    1298/    C847 :                     ;   BDOS function jump table.
    1299/    C847 :                     ;
    1300/    C847 : =29H                NFUNCTS EQU	41		;number of functions in followin table.
    1301/    C847 :                     ;
    1302/    C847 : 03 D6 C8 CA 90 C9   FUNCTNS: DW	WBOOT,GETCON,OUTCON,GETRDR,PUNCH,LIST,DIRCIO,GETIOB
                    CE CA 12 D6 0F D6 
                    D4 CA ED CA 
    1303/    C857 : F3 CA F8 CA E1 C9   	 DW	SETIOB,PRTSTR,RDBUFF,GETCSTS,GETVER,RSTDSK,SETDSK,OPENFIL
                    FE CA 7E D4 83 D4 
                    45 D4 9C D4 
    1304/    C867 : A5 D4 AB D4 C8 D4   	 DW	CLOSEFIL,GETFST,GETNXT,DELFILE,READSEQ,WRTSEQ,FCREATE
                    D7 D4 E0 D4 E6 D4 
                    EC D4 
    1305/    C875 : F5 D4 FE D4 04 D5   	 DW	RENFILE,GETLOG,GETCRNT,PUTDMA,GETALOC,WRTPRTD,GETROV,SETATTR
                    0A D5 11 D5 2C CD 
                    17 D5 1D D5 
    1306/    C885 : 26 D5 2D D5 41 D5   	 DW	GETPARM,GETUSER,RDRANDOM,WTRANDOM,FILESIZE,SETRAN,LOGOFF,RTN
                    47 D5 4D D5 0E D4 
                    53 D5 04 CB 
    1307/    C895 : 04 CB 9B D5         	 DW	RTN,WTSPECL
    1308/    C899 :                     ;
    1309/    C899 :                     ;   Bdos error message section.
    1310/    C899 :                     ;
    1311/    C899 : 21 CA C8            ERROR1:	LD	HL,BADSEC	;bad sector message.
    1312/    C89C : CD E5 C8            	CALL	PRTERR		;print it and get a 1 char responce.
    1313/    C89F : FE 03               	CP	CNTRLC		;re-boot request (control-c)?
    1314/    C8A1 : CA 00 00            	JP	Z,0		;yes.
    1315/    C8A4 : C9                  	RET			;no, return to retry i/o function.
    1316/    C8A5 :                     ;
    1317/    C8A5 : 21 D5 C8            ERROR2:	LD	HL,BADSEL	;bad drive selected.
    1318/    C8A8 : C3 B4 C8            	JP	ERROR5
    1319/    C8AB :                     ;
    1320/    C8AB : 21 E1 C8            ERROR3:	LD	HL,DISKRO	;disk is read only.
    1321/    C8AE : C3 B4 C8            	JP	ERROR5
    1322/    C8B1 :                     ;
    1323/    C8B1 : 21 DC C8            ERROR4:	LD	HL,FILERO	;file is read only.
    1324/    C8B4 :                     ;
    1325/    C8B4 : CD E5 C8            ERROR5:	CALL	PRTERR
    1326/    C8B7 : C3 00 00            	JP	0		;always reboot on these errors.
    1327/    C8BA :                     ;
    1328/    C8BA : 42 64 6F 73 20 45   BDOSERR: db	"Bdos Err On "
                    72 72 20 4F 6E 20 
    1329/    C8C6 : 20 3A 20 24         BDOSDRV: db	" : $"
    1330/    C8CA : 42 61 64 20 53 65   BADSEC:	 db	"Bad Sector$"
                    63 74 6F 72 24 
    1331/    C8D5 : 53 65 6C 65 63 74   BADSEL:	 db	"Select$"
                    24 
    1332/    C8DC : 46 69 6C 65 20      FILERO:	 db	"File "
    1333/    C8E1 : 52 2F 4F 24         DISKRO:	 db	"R/O$"
    1334/    C8E5 :                     ;
    1335/    C8E5 :                     ;   Print bdos error message.
    1336/    C8E5 :                     ;
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 24 - 2/13/2018 8:47:39


    1337/    C8E5 : E5                  PRTERR:	PUSH	HL		;save second message pointer.
    1338/    C8E6 : CD C9 C9            	CALL	OUTCRLF		;send (cr)(lf).
    1339/    C8E9 : 3A 42 CB            	LD	A,(ACTIVE)	;get active drive.
    1340/    C8EC : C6 41               	ADD	A,'A'		;make ascii.
    1341/    C8EE : 32 C6 C8            	LD	(BDOSDRV),A	;and put in message.
    1342/    C8F1 : 01 BA C8            	LD	BC,BDOSERR	;and print it.
    1343/    C8F4 : CD D3 C9            	CALL	PRTMESG
    1344/    C8F7 : C1                  	POP	BC		;print second message line now.
    1345/    C8F8 : CD D3 C9            	CALL	PRTMESG
    1346/    C8FB :                     ;
    1347/    C8FB :                     ;   Get an input character. We will check our 1 character
    1348/    C8FB :                     ; buffer first. This may be set by the console status routine.
    1349/    C8FB :                     ;
    1350/    C8FB : 21 0E CB            GETCHAR:LD	HL,CHARBUF	;check character buffer.
    1351/    C8FE : 7E                  	LD	A,(HL)		;anything present already?
    1352/    C8FF : 36 00               	LD	(HL),0		;...either case clear it.
    1353/    C901 : B7                  	OR	A
    1354/    C902 : C0                  	RET	NZ		;yes, use it.
    1355/    C903 : C3 09 D6            	JP	CONIN		;nope, go get a character responce.
    1356/    C906 :                     ;
    1357/    C906 :                     ;   Input and echo a character.
    1358/    C906 :                     ;
    1359/    C906 : CD FB C8            GETECHO:CALL	GETCHAR		;input a character.
    1360/    C909 : CD 14 C9            	CALL	CHKCHAR		;carriage control?
    1361/    C90C : D8                  	RET	C		;no, a regular control char so don't echo.
    1362/    C90D : F5                  	PUSH	AF		;ok, save character now.
    1363/    C90E : 4F                  	LD	C,A
    1364/    C90F : CD 90 C9            	CALL	OUTCON		;and echo it.
    1365/    C912 : F1                  	POP	AF		;get character and return.
    1366/    C913 : C9                  	RET	
    1367/    C914 :                     ;
    1368/    C914 :                     ;   Check character in (A). Set the zero flag on a carriage
    1369/    C914 :                     ; control character and the carry flag on any other control
    1370/    C914 :                     ; character.
    1371/    C914 :                     ;
    1372/    C914 : FE 0D               CHKCHAR:CP	CR		;check for carriage return, line feed, backspace,
    1373/    C916 : C8                  	RET	Z		;or a tab.
    1374/    C917 : FE 0A               	CP	LF
    1375/    C919 : C8                  	RET	Z
    1376/    C91A : FE 09               	CP	TAB
    1377/    C91C : C8                  	RET	Z
    1378/    C91D : FE 08               	CP	BS
    1379/    C91F : C8                  	RET	Z
    1380/    C920 : FE 20               	CP	' '		;other control char? Set carry flag.
    1381/    C922 : C9                  	RET	
    1382/    C923 :                     ;
    1383/    C923 :                     ;   Check the console during output. Halt on a control-s, then
    1384/    C923 :                     ; reboot on a control-c. If anything else is ready, clear the
    1385/    C923 :                     ; zero flag and return (the calling routine may want to do
    1386/    C923 :                     ; something).
    1387/    C923 :                     ;
    1388/    C923 : 3A 0E CB            CKCONSOL: LD	A,(CHARBUF)	;check buffer.
    1389/    C926 : B7                  	OR	A		;if anything, just return without checking.
    1390/    C927 : C2 45 C9            	JP	NZ,CKCON2
    1391/    C92A : CD 06 D6            	CALL	CONST		;nothing in buffer. Check console.
    1392/    C92D : E6 01               	AND	01H		;look at bit 0.
    1393/    C92F : C8                  	RET	Z		;return if nothing.
    1394/    C930 : CD 09 D6            	CALL	CONIN		;ok, get it.
    1395/    C933 : FE 13               	CP	CNTRLS		;if not control-s, return with zero cleared.
    1396/    C935 : C2 42 C9            	JP	NZ,CKCON1
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 25 - 2/13/2018 8:47:39


    1397/    C938 : CD 09 D6            	CALL	CONIN		;halt processing until another char
    1398/    C93B : FE 03               	CP	CNTRLC		;is typed. Control-c?
    1399/    C93D : CA 00 00            	JP	Z,0		;yes, reboot now.
    1400/    C940 : AF                  	XOR	A		;no, just pretend nothing was ever ready.
    1401/    C941 : C9                  	RET	
    1402/    C942 : 32 0E CB            CKCON1:	LD	(CHARBUF),A	;save character in buffer for later processing.
    1403/    C945 : 3E 01               CKCON2:	LD	A,1		;set (A) to non zero to mean something is ready.
    1404/    C947 : C9                  	RET	
    1405/    C948 :                     ;
    1406/    C948 :                     ;   Output (C) to the screen. If the printer flip-flop flag
    1407/    C948 :                     ; is set, we will send character to printer also. The console
    1408/    C948 :                     ; will be checked in the process.
    1409/    C948 :                     ;
    1410/    C948 : 3A 0A CB            OUTCHAR:LD	A,(OUTFLAG)	;check output flag.
    1411/    C94B : B7                  	OR	A		;anything and we won't generate output.
    1412/    C94C : C2 62 C9            	JP	NZ,OUTCHR1
    1413/    C94F : C5                  	PUSH	BC
    1414/    C950 : CD 23 C9            	CALL	CKCONSOL	;check console (we don't care whats there).
    1415/    C953 : C1                  	POP	BC
    1416/    C954 : C5                  	PUSH	BC
    1417/    C955 : CD 0C D6            	CALL	CONOUT		;output (C) to the screen.
    1418/    C958 : C1                  	POP	BC
    1419/    C959 : C5                  	PUSH	BC
    1420/    C95A : 3A 0D CB            	LD	A,(PRTFLAG)	;check printer flip-flop flag.
    1421/    C95D : B7                  	OR	A
    1422/    C95E : C4 0F D6            	CALL	NZ,LIST		;print it also if non-zero.
    1423/    C961 : C1                  	POP	BC
    1424/    C962 : 79                  OUTCHR1:LD	A,C		;update cursors position.
    1425/    C963 : 21 0C CB            	LD	HL,CURPOS
    1426/    C966 : FE 7F               	CP	DEL		;rubouts don't do anything here.
    1427/    C968 : C8                  	RET	Z
    1428/    C969 : 34                  	INC	(HL)		;bump line pointer.
    1429/    C96A : FE 20               	CP	' '		;and return if a normal character.
    1430/    C96C : D0                  	RET	NC
    1431/    C96D : 35                  	DEC	(HL)		;restore and check for the start of the line.
    1432/    C96E : 7E                  	LD	A,(HL)
    1433/    C96F : B7                  	OR	A
    1434/    C970 : C8                  	RET	Z		;ingnore control characters at the start of the line.
    1435/    C971 : 79                  	LD	A,C
    1436/    C972 : FE 08               	CP	BS		;is it a backspace?
    1437/    C974 : C2 79 C9            	JP	NZ,OUTCHR2
    1438/    C977 : 35                  	DEC	(HL)		;yes, backup pointer.
    1439/    C978 : C9                  	RET	
    1440/    C979 : FE 0A               OUTCHR2:CP	LF		;is it a line feed?
    1441/    C97B : C0                  	RET	NZ		;ignore anything else.
    1442/    C97C : 36 00               	LD	(HL),0		;reset pointer to start of line.
    1443/    C97E : C9                  	RET	
    1444/    C97F :                     ;
    1445/    C97F :                     ;   Output (A) to the screen. If it is a control character
    1446/    C97F :                     ; (other than carriage control), use ^x format.
    1447/    C97F :                     ;
    1448/    C97F : 79                  SHOWIT:	LD	A,C
    1449/    C980 : CD 14 C9            	CALL	CHKCHAR		;check character.
    1450/    C983 : D2 90 C9            	JP	NC,OUTCON	;not a control, use normal output.
    1451/    C986 : F5                  	PUSH	AF
    1452/    C987 : 0E 5E               	LD	C,'^'		;for a control character, preceed it with '^'.
    1453/    C989 : CD 48 C9            	CALL	OUTCHAR
    1454/    C98C : F1                  	POP	AF
    1455/    C98D : F6 40               	OR	'@'		;and then use the letter equivelant.
    1456/    C98F : 4F                  	LD	C,A
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 26 - 2/13/2018 8:47:39


    1457/    C990 :                     ;
    1458/    C990 :                     ;   Function to output (C) to the console device and expand tabs
    1459/    C990 :                     ; if necessary.
    1460/    C990 :                     ;
    1461/    C990 : 79                  OUTCON:	LD	A,C
    1462/    C991 : FE 09               	CP	TAB		;is it a tab?
    1463/    C993 : C2 48 C9            	JP	NZ,OUTCHAR	;use regular output.
    1464/    C996 : 0E 20               OUTCON1:LD	C,' '		;yes it is, use spaces instead.
    1465/    C998 : CD 48 C9            	CALL	OUTCHAR
    1466/    C99B : 3A 0C CB            	LD	A,(CURPOS)	;go until the cursor is at a multiple of 8
    1467/    C99E :                     
    1468/    C99E : E6 07               	AND	07H		;position.
    1469/    C9A0 : C2 96 C9            	JP	NZ,OUTCON1
    1470/    C9A3 : C9                  	RET	
    1471/    C9A4 :                     ;
    1472/    C9A4 :                     ;   Echo a backspace character. Erase the prevoius character
    1473/    C9A4 :                     ; on the screen.
    1474/    C9A4 :                     ;
    1475/    C9A4 : CD AC C9            BACKUP:	CALL	BACKUP1		;backup the screen 1 place.
    1476/    C9A7 : 0E 20               	LD	C,' '		;then blank that character.
    1477/    C9A9 : CD 0C D6            	CALL	CONOUT
    1478/    C9AC : 0E 08               BACKUP1:LD	C,BS		;then back space once more.
    1479/    C9AE : C3 0C D6            	JP	CONOUT
    1480/    C9B1 :                     ;
    1481/    C9B1 :                     ;   Signal a deleted line. Print a '#' at the end and start
    1482/    C9B1 :                     ; over.
    1483/    C9B1 :                     ;
    1484/    C9B1 : 0E 23               NEWLINE:LD	C,'#'
    1485/    C9B3 : CD 48 C9            	CALL	OUTCHAR		;print this.
    1486/    C9B6 : CD C9 C9            	CALL	OUTCRLF		;start new line.
    1487/    C9B9 : 3A 0C CB            NEWLN1:	LD	A,(CURPOS)	;move the cursor to the starting position.
    1488/    C9BC : 21 0B CB            	LD	HL,STARTING
    1489/    C9BF : BE                  	CP	(HL)
    1490/    C9C0 : D0                  	RET	NC		;there yet?
    1491/    C9C1 : 0E 20               	LD	C,' '
    1492/    C9C3 : CD 48 C9            	CALL	OUTCHAR		;nope, keep going.
    1493/    C9C6 : C3 B9 C9            	JP	NEWLN1
    1494/    C9C9 :                     ;
    1495/    C9C9 :                     ;   Output a (cr) (lf) to the console device (screen).
    1496/    C9C9 :                     ;
    1497/    C9C9 : 0E 0D               OUTCRLF:LD	C,CR
    1498/    C9CB : CD 48 C9            	CALL	OUTCHAR
    1499/    C9CE : 0E 0A               	LD	C,LF
    1500/    C9D0 : C3 48 C9            	JP	OUTCHAR
    1501/    C9D3 :                     ;
    1502/    C9D3 :                     ;   Print message pointed to by (BC). It will end with a '$'.
    1503/    C9D3 :                     ;
    1504/    C9D3 : 0A                  PRTMESG:LD	A,(BC)		;check for terminating character.
    1505/    C9D4 : FE 24               	CP	'$'
    1506/    C9D6 : C8                  	RET	Z
    1507/    C9D7 : 03                  	INC	BC
    1508/    C9D8 : C5                  	PUSH	BC		;otherwise, bump pointer and print it.
    1509/    C9D9 : 4F                  	LD	C,A
    1510/    C9DA : CD 90 C9            	CALL	OUTCON
    1511/    C9DD : C1                  	POP	BC
    1512/    C9DE : C3 D3 C9            	JP	PRTMESG
    1513/    C9E1 :                     ;
    1514/    C9E1 :                     ;   Function to execute a buffered read.
    1515/    C9E1 :                     ;
    1516/    C9E1 : 3A 0C CB            RDBUFF:	LD	A,(CURPOS)	;use present location as starting one.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 27 - 2/13/2018 8:47:39


    1517/    C9E4 : 32 0B CB            	LD	(STARTING),A
    1518/    C9E7 : 2A 43 CB            	LD	HL,(PARAMS)	;get the maximum buffer space.
    1519/    C9EA : 4E                  	LD	C,(HL)
    1520/    C9EB : 23                  	INC	HL		;point to first available space.
    1521/    C9EC : E5                  	PUSH	HL		;and save.
    1522/    C9ED : 06 00               	LD	B,0		;keep a character count.
    1523/    C9EF : C5                  RDBUF1:	PUSH	BC
    1524/    C9F0 : E5                  	PUSH	HL
    1525/    C9F1 : CD FB C8            RDBUF2:	CALL	GETCHAR		;get the next input character.
    1526/    C9F4 : E6 7F               	AND	7FH		;strip bit 7.
    1527/    C9F6 : E1                  	POP	HL		;reset registers.
    1528/    C9F7 : C1                  	POP	BC
    1529/    C9F8 : FE 0D               	CP	CR		;en of the line?
    1530/    C9FA : CA C1 CA            	JP	Z,RDBUF17
    1531/    C9FD : FE 0A               	CP	LF
    1532/    C9FF : CA C1 CA            	JP	Z,RDBUF17
    1533/    CA02 : FE 08               	CP	BS		;how about a backspace?
    1534/    CA04 : C2 16 CA            	JP	NZ,RDBUF3
    1535/    CA07 : 78                  	LD	A,B		;yes, but ignore at the beginning of the line.
    1536/    CA08 : B7                  	OR	A
    1537/    CA09 : CA EF C9            	JP	Z,RDBUF1
    1538/    CA0C : 05                  	DEC	B		;ok, update counter.
    1539/    CA0D : 3A 0C CB            	LD	A,(CURPOS)	;if we backspace to the start of the line,
    1540/    CA10 : 32 0A CB            	LD	(OUTFLAG),A	;treat as a cancel (control-x).
    1541/    CA13 : C3 70 CA            	JP	RDBUF10
    1542/    CA16 : FE 7F               RDBUF3:	CP	DEL		;user typed a rubout?
    1543/    CA18 : C2 26 CA            	JP	NZ,RDBUF4
    1544/    CA1B : 78                  	LD	A,B		;ignore at the start of the line.
    1545/    CA1C : B7                  	OR	A
    1546/    CA1D : CA EF C9            	JP	Z,RDBUF1
    1547/    CA20 : 7E                  	LD	A,(HL)		;ok, echo the prevoius character.
    1548/    CA21 : 05                  	DEC	B		;and reset pointers (counters).
    1549/    CA22 : 2B                  	DEC	HL
    1550/    CA23 : C3 A9 CA            	JP	RDBUF15
    1551/    CA26 : FE 05               RDBUF4:	CP	CNTRLE		;physical end of line?
    1552/    CA28 : C2 37 CA            	JP	NZ,RDBUF5
    1553/    CA2B : C5                  	PUSH	BC		;yes, do it.
    1554/    CA2C : E5                  	PUSH	HL
    1555/    CA2D : CD C9 C9            	CALL	OUTCRLF
    1556/    CA30 : AF                  	XOR	A		;and update starting position.
    1557/    CA31 : 32 0B CB            	LD	(STARTING),A
    1558/    CA34 : C3 F1 C9            	JP	RDBUF2
    1559/    CA37 : FE 10               RDBUF5:	CP	CNTRLP		;control-p?
    1560/    CA39 : C2 48 CA            	JP	NZ,RDBUF6
    1561/    CA3C : E5                  	PUSH	HL		;yes, flip the print flag filp-flop byte.
    1562/    CA3D : 21 0D CB            	LD	HL,PRTFLAG
    1563/    CA40 : 3E 01               	LD	A,1		;PRTFLAG=1-PRTFLAG
    1564/    CA42 : 96                  	SUB	(HL)
    1565/    CA43 : 77                  	LD	(HL),A
    1566/    CA44 : E1                  	POP	HL
    1567/    CA45 : C3 EF C9            	JP	RDBUF1
    1568/    CA48 : FE 18               RDBUF6:	CP	CNTRLX		;control-x (cancel)?
    1569/    CA4A : C2 5F CA            	JP	NZ,RDBUF8
    1570/    CA4D : E1                  	POP	HL
    1571/    CA4E : 3A 0B CB            RDBUF7:	LD	A,(STARTING)	;yes, backup the cursor to here.
    1572/    CA51 : 21 0C CB            	LD	HL,CURPOS
    1573/    CA54 : BE                  	CP	(HL)
    1574/    CA55 : D2 E1 C9            	JP	NC,RDBUFF	;done yet?
    1575/    CA58 : 35                  	DEC	(HL)		;no, decrement pointer and output back up one space.
    1576/    CA59 : CD A4 C9            	CALL	BACKUP
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 28 - 2/13/2018 8:47:39


    1577/    CA5C : C3 4E CA            	JP	RDBUF7
    1578/    CA5F : FE 15               RDBUF8:	CP	CNTRLU		;cntrol-u (cancel line)?
    1579/    CA61 : C2 6B CA            	JP	NZ,RDBUF9
    1580/    CA64 : CD B1 C9            	CALL	NEWLINE		;start a new line.
    1581/    CA67 : E1                  	POP	HL
    1582/    CA68 : C3 E1 C9            	JP	RDBUFF
    1583/    CA6B : FE 12               RDBUF9:	CP	CNTRLR		;control-r?
    1584/    CA6D : C2 A6 CA            	JP	NZ,RDBUF14
    1585/    CA70 : C5                  RDBUF10:PUSH	BC		;yes, start a new line and retype the old one.
    1586/    CA71 : CD B1 C9            	CALL	NEWLINE
    1587/    CA74 : C1                  	POP	BC
    1588/    CA75 : E1                  	POP	HL
    1589/    CA76 : E5                  	PUSH	HL
    1590/    CA77 : C5                  	PUSH	BC
    1591/    CA78 : 78                  RDBUF11:LD	A,B		;done whole line yet?
    1592/    CA79 : B7                  	OR	A
    1593/    CA7A : CA 8A CA            	JP	Z,RDBUF12
    1594/    CA7D : 23                  	INC	HL		;nope, get next character.
    1595/    CA7E : 4E                  	LD	C,(HL)
    1596/    CA7F : 05                  	DEC	B		;count it.
    1597/    CA80 : C5                  	PUSH	BC
    1598/    CA81 : E5                  	PUSH	HL
    1599/    CA82 : CD 7F C9            	CALL	SHOWIT		;and display it.
    1600/    CA85 : E1                  	POP	HL
    1601/    CA86 : C1                  	POP	BC
    1602/    CA87 : C3 78 CA            	JP	RDBUF11
    1603/    CA8A : E5                  RDBUF12:PUSH	HL		;done with line. If we were displaying
    1604/    CA8B : 3A 0A CB            	LD	A,(OUTFLAG)	;then update cursor position.
    1605/    CA8E : B7                  	OR	A
    1606/    CA8F : CA F1 C9            	JP	Z,RDBUF2
    1607/    CA92 : 21 0C CB            	LD	HL,CURPOS	;because this line is shorter, we must
    1608/    CA95 : 96                  	SUB	(HL)		;back up the cursor (not the screen however)
    1609/    CA96 : 32 0A CB            	LD	(OUTFLAG),A	;some number of positions.
    1610/    CA99 : CD A4 C9            RDBUF13:CALL	BACKUP		;note that as long as (OUTFLAG) is non
    1611/    CA9C : 21 0A CB            	LD	HL,OUTFLAG	;zero, the screen will not be changed.
    1612/    CA9F : 35                  	DEC	(HL)
    1613/    CAA0 : C2 99 CA            	JP	NZ,RDBUF13
    1614/    CAA3 : C3 F1 C9            	JP	RDBUF2		;now just get the next character.
    1615/    CAA6 :                     ;
    1616/    CAA6 :                     ;   Just a normal character, put this in our buffer and echo.
    1617/    CAA6 :                     ;
    1618/    CAA6 : 23                  RDBUF14:INC	HL
    1619/    CAA7 : 77                  	LD	(HL),A		;store character.
    1620/    CAA8 : 04                  	INC	B		;and count it.
    1621/    CAA9 : C5                  RDBUF15:PUSH	BC
    1622/    CAAA : E5                  	PUSH	HL
    1623/    CAAB : 4F                  	LD	C,A		;echo it now.
    1624/    CAAC : CD 7F C9            	CALL	SHOWIT
    1625/    CAAF : E1                  	POP	HL
    1626/    CAB0 : C1                  	POP	BC
    1627/    CAB1 : 7E                  	LD	A,(HL)		;was it an abort request?
    1628/    CAB2 : FE 03               	CP	CNTRLC		;control-c abort?
    1629/    CAB4 : 78                  	LD	A,B
    1630/    CAB5 : C2 BD CA            	JP	NZ,RDBUF16
    1631/    CAB8 : FE 01               	CP	1		;only if at start of line.
    1632/    CABA : CA 00 00            	JP	Z,0
    1633/    CABD : B9                  RDBUF16:CP	C		;nope, have we filled the buffer?
    1634/    CABE : DA EF C9            	JP	C,RDBUF1
    1635/    CAC1 : E1                  RDBUF17:POP	HL		;yes end the line and return.
    1636/    CAC2 : 70                  	LD	(HL),B
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 29 - 2/13/2018 8:47:39


    1637/    CAC3 : 0E 0D               	LD	C,CR
    1638/    CAC5 : C3 48 C9            	JP	OUTCHAR		;output (cr) and return.
    1639/    CAC8 :                     ;
    1640/    CAC8 :                     ;   Function to get a character from the console device.
    1641/    CAC8 :                     ;
    1642/    CAC8 : CD 06 C9            GETCON:	CALL	GETECHO		;get and echo.
    1643/    CACB : C3 01 CB            	JP	SETSTAT		;save status and return.
    1644/    CACE :                     ;
    1645/    CACE :                     ;   Function to get a character from the tape reader device.
    1646/    CACE :                     ;
    1647/    CACE : CD 15 D6            GETRDR:	CALL	READER		;get a character from reader, set status and return.
    1648/    CAD1 : C3 01 CB            	JP	SETSTAT
    1649/    CAD4 :                     ;
    1650/    CAD4 :                     ;  Function to perform direct console i/o. If (C) contains (FF)
    1651/    CAD4 :                     ; then this is an input request. If (C) contains (FE) then
    1652/    CAD4 :                     ; this is a status request. Otherwise we are to output (C).
    1653/    CAD4 :                     ;
    1654/    CAD4 : 79                  DIRCIO:	LD	A,C		;test for (FF).
    1655/    CAD5 : 3C                  	INC	A
    1656/    CAD6 : CA E0 CA            	JP	Z,DIRC1
    1657/    CAD9 : 3C                  	INC	A		;test for (FE).
    1658/    CADA : CA 06 D6            	JP	Z,CONST
    1659/    CADD : C3 0C D6            	JP	CONOUT		;just output (C).
    1660/    CAE0 : CD 06 D6            DIRC1:	CALL	CONST		;this is an input request.
    1661/    CAE3 : B7                  	OR	A
    1662/    CAE4 : CA 91 D5            	JP	Z,GOBACK1	;not ready? Just return (directly).
    1663/    CAE7 : CD 09 D6            	CALL	CONIN		;yes, get character.
    1664/    CAEA : C3 01 CB            	JP	SETSTAT		;set status and return.
    1665/    CAED :                     ;
    1666/    CAED :                     ;   Function to return the i/o byte.
    1667/    CAED :                     ;
    1668/    CAED : 3A 03 00            GETIOB:	LD	A,(IOBYTE)
    1669/    CAF0 : C3 01 CB            	JP	SETSTAT
    1670/    CAF3 :                     ;
    1671/    CAF3 :                     ;   Function to set the i/o byte.
    1672/    CAF3 :                     ;
    1673/    CAF3 : 21 03 00            SETIOB:	LD	HL,IOBYTE
    1674/    CAF6 : 71                  	LD	(HL),C
    1675/    CAF7 : C9                  	RET	
    1676/    CAF8 :                     ;
    1677/    CAF8 :                     ;   Function to print the character string pointed to by (DE)
    1678/    CAF8 :                     ; on the console device. The string ends with a '$'.
    1679/    CAF8 :                     ;
    1680/    CAF8 : EB                  PRTSTR:	EX	DE,HL
    1681/    CAF9 : 4D                  	LD	C,L
    1682/    CAFA : 44                  	LD	B,H		;now (BC) points to it.
    1683/    CAFB : C3 D3 C9            	JP	PRTMESG
    1684/    CAFE :                     ;
    1685/    CAFE :                     ;   Function to interigate the console device.
    1686/    CAFE :                     ;
    1687/    CAFE : CD 23 C9            GETCSTS:CALL	CKCONSOL
    1688/    CB01 :                     ;
    1689/    CB01 :                     ;   Get here to set the status and return to the cleanup
    1690/    CB01 :                     ; section. Then back to the user.
    1691/    CB01 :                     ;
    1692/    CB01 : 32 45 CB            SETSTAT:LD	(STATUS),A
    1693/    CB04 : C9                  RTN:	RET	
    1694/    CB05 :                     ;
    1695/    CB05 :                     ;   Set the status to 1 (read or write error code).
    1696/    CB05 :                     ;
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 30 - 2/13/2018 8:47:39


    1697/    CB05 : 3E 01               IOERR1:	LD	A,1
    1698/    CB07 : C3 01 CB            	JP	SETSTAT
    1699/    CB0A :                     ;
    1700/    CB0A : 00                  OUTFLAG: DB	0		;output flag (non zero means no output).
    1701/    CB0B : 02                  STARTING:  DB	2		;starting position for cursor.
    1702/    CB0C : 00                  CURPOS:	DB	0		;cursor position (0=start of line).
    1703/    CB0D : 00                  PRTFLAG: DB	0		;printer flag (control-p toggle). List if non zero.
    1704/    CB0E : 00                  CHARBUF: DB	0		;single input character buffer.
    1705/    CB0F :                     ;
    1706/    CB0F :                     ;   Stack area for BDOS calls.
    1707/    CB0F :                     ;
    1708/    CB0F : 00 00               USRSTACK: DW	0		;save users stack pointer here.
    1709/    CB11 :                     ;
    1710/    CB11 : 00 00 00 00 00 00   	DB	0,0,0,0,0,0,0,0,0,0,0,0,0
                    00 00 00 00 00 00 
                    00 
    1711/    CB1E : 00 00 00 00 00 00   	db	0,0,0,0,0,0,0,0,0,0,0
                    00 00 00 00 00 
    1712/    CB29 : 00 00 00 00 00 00   	DB	0,0,0,0,0,0,0,0,0,0,0,0,0
                    00 00 00 00 00 00 
                    00 
    1713/    CB36 : 00 00 00 00 00 00   	db	0,0,0,0,0,0,0,0,0,0,0
                    00 00 00 00 00 
    1714/    CB41 :                     
    1715/    CB41 : =CB41H              STKAREA  EQU	$		;end of stack area.
    1716/    CB41 :                     ;
    1717/    CB41 : 00                  USERNO:	 DB	0		;current user number.
    1718/    CB42 : 00                  ACTIVE:	 DB	0		;currently active drive.
    1719/    CB43 : 00 00               PARAMS:	DW	0		;save (DE) parameters here on entry.
    1720/    CB45 : 00 00               STATUS:	DW	0		;status returned from bdos function.
    1721/    CB47 :                     ;
    1722/    CB47 :                     ;   Select error occured, jump to error routine.
    1723/    CB47 :                     ;
    1724/    CB47 : 21 0B C8            SLCTERR:LD	HL,BADSLCT
    1725/    CB4A :                     ;
    1726/    CB4A :                     ;   Jump to (HL) indirectly.
    1727/    CB4A :                     ;
    1728/    CB4A : 5E                  JUMPHL:	LD	E,(HL)
    1729/    CB4B : 23                  	INC	HL
    1730/    CB4C : 56                  	LD	D,(HL)		;now (DE) contain the desired address.
    1731/    CB4D : EB                  	EX	DE,HL
    1732/    CB4E : E9                  	JP	(HL)
    1733/    CB4F :                     ;
    1734/    CB4F :                     ;   Block move. (DE) to (HL), (C) bytes total.
    1735/    CB4F :                     ;
    1736/    CB4F : 0C                  DE2HL:	INC	C		;is count down to zero?
    1737/    CB50 : 0D                  DE2HL1:	DEC	C
    1738/    CB51 : C8                  	RET	Z		;yes, we are done.
    1739/    CB52 : 1A                  	LD	A,(DE)		;no, move one more byte.
    1740/    CB53 : 77                  	LD	(HL),A
    1741/    CB54 : 13                  	INC	DE
    1742/    CB55 : 23                  	INC	HL
    1743/    CB56 : C3 50 CB            	JP	DE2HL1		;and repeat.
    1744/    CB59 :                     ;
    1745/    CB59 :                     ;   Select the desired drive.
    1746/    CB59 :                     ;
    1747/    CB59 : 3A 42 CB            SELECT:	LD	A,(ACTIVE)	;get active disk.
    1748/    CB5C : 4F                  	LD	C,A
    1749/    CB5D : CD 1B D6            	CALL	SELDSK		;select it.
    1750/    CB60 : 7C                  	LD	A,H		;valid drive?
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 31 - 2/13/2018 8:47:39


    1751/    CB61 : B5                  	OR	L		;valid drive?
    1752/    CB62 : C8                  	RET	Z		;return if not.
    1753/    CB63 :                     ;
    1754/    CB63 :                     ;   Here, the BIOS returned the address of the parameter block
    1755/    CB63 :                     ; in (HL). We will extract the necessary pointers and save them.
    1756/    CB63 :                     ;
    1757/    CB63 : 5E                  	LD	E,(HL)		;yes, get address of translation table into (DE).
    1758/    CB64 : 23                  	INC	HL
    1759/    CB65 : 56                  	LD	D,(HL)
    1760/    CB66 : 23                  	INC	HL
    1761/    CB67 : 22 B3 D5            	LD	(SCRATCH1),HL	;save pointers to scratch areas.
    1762/    CB6A : 23                  	INC	HL
    1763/    CB6B : 23                  	INC	HL
    1764/    CB6C : 22 B5 D5            	LD	(SCRATCH2),HL	;ditto.
    1765/    CB6F : 23                  	INC	HL
    1766/    CB70 : 23                  	INC	HL
    1767/    CB71 : 22 B7 D5            	LD	(SCRATCH3),HL	;ditto.
    1768/    CB74 : 23                  	INC	HL
    1769/    CB75 : 23                  	INC	HL
    1770/    CB76 : EB                  	EX	DE,HL		;now save the translation table address.
    1771/    CB77 : 22 D0 D5            	LD	(XLATE),HL
    1772/    CB7A : 21 B9 D5            	LD	HL,DIRBUF	;put the next 8 bytes here.
    1773/    CB7D : 0E 08               	LD	C,8		;they consist of the directory buffer
    1774/    CB7F : CD 4F CB            	CALL	DE2HL		;pointer, parameter block pointer,
    1775/    CB82 : 2A BB D5            	LD	HL,(DISKPB)	;check and allocation vectors.
    1776/    CB85 : EB                  	EX	DE,HL
    1777/    CB86 : 21 C1 D5            	LD	HL,SECTORS	;move parameter block into our ram.
    1778/    CB89 : 0E 0F               	LD	C,15		;it is 15 bytes long.
    1779/    CB8B : CD 4F CB            	CALL	DE2HL
    1780/    CB8E : 2A C6 D5            	LD	HL,(DSKSIZE)	;check disk size.
    1781/    CB91 : 7C                  	LD	A,H		;more than 256 blocks on this?
    1782/    CB92 : 21 DD D5            	LD	HL,BIGDISK
    1783/    CB95 : 36 FF               	LD	(HL),0FFH	;set to samll.
    1784/    CB97 : B7                  	OR	A
    1785/    CB98 : CA 9D CB            	JP	Z,SELECT1
    1786/    CB9B : 36 00               	LD	(HL),0		;wrong, set to large.
    1787/    CB9D : 3E FF               SELECT1:LD	A,0FFH		;clear the zero flag.
    1788/    CB9F : B7                  	OR	A
    1789/    CBA0 : C9                  	RET	
    1790/    CBA1 :                     ;
    1791/    CBA1 :                     ;   Routine to home the disk track head and clear pointers.
    1792/    CBA1 :                     ;
    1793/    CBA1 : CD 18 D6            HOMEDRV:CALL	HOME		;home the head.
    1794/    CBA4 : AF                  	XOR	A
    1795/    CBA5 : 2A B5 D5            	LD	HL,(SCRATCH2)	;set our track pointer also.
    1796/    CBA8 : 77                  	LD	(HL),A
    1797/    CBA9 : 23                  	INC	HL
    1798/    CBAA : 77                  	LD	(HL),A
    1799/    CBAB : 2A B7 D5            	LD	HL,(SCRATCH3)	;and our sector pointer.
    1800/    CBAE : 77                  	LD	(HL),A
    1801/    CBAF : 23                  	INC	HL
    1802/    CBB0 : 77                  	LD	(HL),A
    1803/    CBB1 : C9                  	RET	
    1804/    CBB2 :                     ;
    1805/    CBB2 :                     ;   Do the actual disk read and check the error return status.
    1806/    CBB2 :                     ;
    1807/    CBB2 : CD 27 D6            DOREAD:	CALL	READ
    1808/    CBB5 : C3 BB CB            	JP	IORET
    1809/    CBB8 :                     ;
    1810/    CBB8 :                     ;   Do the actual disk write and handle any bios error.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 32 - 2/13/2018 8:47:39


    1811/    CBB8 :                     ;
    1812/    CBB8 : CD 2A D6            DOWRITE:CALL	WRITE
    1813/    CBBB : B7                  IORET:	OR	A
    1814/    CBBC : C8                  	RET	Z		;return unless an error occured.
    1815/    CBBD : 21 09 C8            	LD	HL,BADSCTR	;bad read/write on this sector.
    1816/    CBC0 : C3 4A CB            	JP	JUMPHL
    1817/    CBC3 :                     ;
    1818/    CBC3 :                     ;   Routine to select the track and sector that the desired
    1819/    CBC3 :                     ; block number falls in.
    1820/    CBC3 :                     ;
    1821/    CBC3 : 2A EA D5            TRKSEC:	LD	HL,(FILEPOS)	;get position of last accessed file
    1822/    CBC6 : 0E 02               	LD	C,2		;in directory and compute sector #.
    1823/    CBC8 : CD EA CC            	CALL	SHIFTR		;sector #=file-position/4.
    1824/    CBCB : 22 E5 D5            	LD	(BLKNMBR),HL	;save this as the block number of interest.
    1825/    CBCE : 22 EC D5            	LD	(CKSUMTBL),HL	;what's it doing here too?
    1826/    CBD1 :                     ;
    1827/    CBD1 :                     ;   if the sector number has already been set (BLKNMBR), enter
    1828/    CBD1 :                     ; at this point.
    1829/    CBD1 :                     ;
    1830/    CBD1 : 21 E5 D5            TRKSEC1:LD	HL,BLKNMBR
    1831/    CBD4 : 4E                  	LD	C,(HL)		;move sector number into (BC).
    1832/    CBD5 : 23                  	INC	HL
    1833/    CBD6 : 46                  	LD	B,(HL)
    1834/    CBD7 : 2A B7 D5            	LD	HL,(SCRATCH3)	;get current sector number and
    1835/    CBDA : 5E                  	LD	E,(HL)		;move this into (DE).
    1836/    CBDB : 23                  	INC	HL
    1837/    CBDC : 56                  	LD	D,(HL)
    1838/    CBDD : 2A B5 D5            	LD	HL,(SCRATCH2)	;get current track number.
    1839/    CBE0 : 7E                  	LD	A,(HL)		;and this into (HL).
    1840/    CBE1 : 23                  	INC	HL
    1841/    CBE2 : 66                  	LD	H,(HL)
    1842/    CBE3 : 6F                  	LD	L,A
    1843/    CBE4 : 79                  TRKSEC2:LD	A,C		;is desired sector before current one?
    1844/    CBE5 : 93                  	SUB	E
    1845/    CBE6 : 78                  	LD	A,B
    1846/    CBE7 : 9A                  	SBC	A,D
    1847/    CBE8 : D2 FA CB            	JP	NC,TRKSEC3
    1848/    CBEB : E5                  	PUSH	HL		;yes, decrement sectors by one track.
    1849/    CBEC : 2A C1 D5            	LD	HL,(SECTORS)	;get sectors per track.
    1850/    CBEF : 7B                  	LD	A,E
    1851/    CBF0 : 95                  	SUB	L
    1852/    CBF1 : 5F                  	LD	E,A
    1853/    CBF2 : 7A                  	LD	A,D
    1854/    CBF3 : 9C                  	SBC	A,H
    1855/    CBF4 : 57                  	LD	D,A		;now we have backed up one full track.
    1856/    CBF5 : E1                  	POP	HL
    1857/    CBF6 : 2B                  	DEC	HL		;adjust track counter.
    1858/    CBF7 : C3 E4 CB            	JP	TRKSEC2
    1859/    CBFA : E5                  TRKSEC3:PUSH	HL		;desired sector is after current one.
    1860/    CBFB : 2A C1 D5            	LD	HL,(SECTORS)	;get sectors per track.
    1861/    CBFE : 19                  	ADD	HL,DE		;bump sector pointer to next track.
    1862/    CBFF : DA 0F CC            	JP	C,TRKSEC4
    1863/    CC02 : 79                  	LD	A,C		;is desired sector now before current one?
    1864/    CC03 : 95                  	SUB	L
    1865/    CC04 : 78                  	LD	A,B
    1866/    CC05 : 9C                  	SBC	A,H
    1867/    CC06 : DA 0F CC            	JP	C,TRKSEC4
    1868/    CC09 : EB                  	EX	DE,HL		;not yes, increment track counter
    1869/    CC0A : E1                  	POP	HL		;and continue until it is.
    1870/    CC0B : 23                  	INC	HL
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 33 - 2/13/2018 8:47:39


    1871/    CC0C : C3 FA CB            	JP	TRKSEC3
    1872/    CC0F :                     ;
    1873/    CC0F :                     ;   here we have determined the track number that contains the
    1874/    CC0F :                     ; desired sector.
    1875/    CC0F :                     ;
    1876/    CC0F : E1                  TRKSEC4:POP	HL		;get track number (HL).
    1877/    CC10 : C5                  	PUSH	BC
    1878/    CC11 : D5                  	PUSH	DE
    1879/    CC12 : E5                  	PUSH	HL
    1880/    CC13 : EB                  	EX	DE,HL
    1881/    CC14 : 2A CE D5            	LD	HL,(OFFSET)	;adjust for first track offset.
    1882/    CC17 : 19                  	ADD	HL,DE
    1883/    CC18 : 44                  	LD	B,H
    1884/    CC19 : 4D                  	LD	C,L
    1885/    CC1A : CD 1E D6            	CALL	SETTRK		;select this track.
    1886/    CC1D : D1                  	POP	DE		;reset current track pointer.
    1887/    CC1E : 2A B5 D5            	LD	HL,(SCRATCH2)
    1888/    CC21 : 73                  	LD	(HL),E
    1889/    CC22 : 23                  	INC	HL
    1890/    CC23 : 72                  	LD	(HL),D
    1891/    CC24 : D1                  	POP	DE
    1892/    CC25 : 2A B7 D5            	LD	HL,(SCRATCH3)	;reset the first sector on this track.
    1893/    CC28 : 73                  	LD	(HL),E
    1894/    CC29 : 23                  	INC	HL
    1895/    CC2A : 72                  	LD	(HL),D
    1896/    CC2B : C1                  	POP	BC
    1897/    CC2C : 79                  	LD	A,C		;now subtract the desired one.
    1898/    CC2D : 93                  	SUB	E		;to make it relative (1-# sectors/track).
    1899/    CC2E : 4F                  	LD	C,A
    1900/    CC2F : 78                  	LD	A,B
    1901/    CC30 : 9A                  	SBC	A,D
    1902/    CC31 : 47                  	LD	B,A
    1903/    CC32 : 2A D0 D5            	LD	HL,(XLATE)	;translate this sector according to this table.
    1904/    CC35 : EB                  	EX	DE,HL
    1905/    CC36 : CD 30 D6            	CALL	SECTRN		;let the bios translate it.
    1906/    CC39 : 4D                  	LD	C,L
    1907/    CC3A : 44                  	LD	B,H
    1908/    CC3B : C3 21 D6            	JP	SETSEC		;and select it.
    1909/    CC3E :                     ;
    1910/    CC3E :                     ;   Compute block number from record number (SAVNREC) and
    1911/    CC3E :                     ; extent number (SAVEXT).
    1912/    CC3E :                     ;
    1913/    CC3E : 21 C3 D5            GETBLOCK: LD	HL,BLKSHFT	;get logical to physical conversion.
    1914/    CC41 : 4E                  	LD	C,(HL)		;note that this is base 2 log of ratio.
    1915/    CC42 : 3A E3 D5            	LD	A,(SAVNREC)	;get record number.
    1916/    CC45 : B7                  GETBLK1:OR	A		;compute (A)=(A)/2^BLKSHFT.
    1917/    CC46 : 1F                  	RRA	
    1918/    CC47 : 0D                  	DEC	C
    1919/    CC48 : C2 45 CC            	JP	NZ,GETBLK1
    1920/    CC4B : 47                  	LD	B,A		;save result in (B).
    1921/    CC4C : 3E 08               	LD	A,8
    1922/    CC4E : 96                  	SUB	(HL)
    1923/    CC4F : 4F                  	LD	C,A		;compute (C)=8-BLKSHFT.
    1924/    CC50 : 3A E2 D5            	LD	A,(SAVEXT)
    1925/    CC53 : 0D                  GETBLK2:DEC	C		;compute (A)=SAVEXT*2^(8-BLKSHFT).
    1926/    CC54 : CA 5C CC            	JP	Z,GETBLK3
    1927/    CC57 : B7                  	OR	A
    1928/    CC58 : 17                  	RLA	
    1929/    CC59 : C3 53 CC            	JP	GETBLK2
    1930/    CC5C : 80                  GETBLK3:ADD	A,B
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 34 - 2/13/2018 8:47:39


    1931/    CC5D : C9                  	RET	
    1932/    CC5E :                     ;
    1933/    CC5E :                     ;   Routine to extract the (BC) block byte from the fcb pointed
    1934/    CC5E :                     ; to by (PARAMS). If this is a big-disk, then these are 16 bit
    1935/    CC5E :                     ; block numbers, else they are 8 bit numbers.
    1936/    CC5E :                     ; Number is returned in (HL).
    1937/    CC5E :                     ;
    1938/    CC5E : 2A 43 CB            EXTBLK:	LD	HL,(PARAMS)	;get fcb address.
    1939/    CC61 : 11 10 00            	LD	DE,16		;block numbers start 16 bytes into fcb.
    1940/    CC64 : 19                  	ADD	HL,DE
    1941/    CC65 : 09                  	ADD	HL,BC
    1942/    CC66 : 3A DD D5            	LD	A,(BIGDISK)	;are we using a big-disk?
    1943/    CC69 : B7                  	OR	A
    1944/    CC6A : CA 71 CC            	JP	Z,EXTBLK1
    1945/    CC6D : 6E                  	LD	L,(HL)		;no, extract an 8 bit number from the fcb.
    1946/    CC6E : 26 00               	LD	H,0
    1947/    CC70 : C9                  	RET	
    1948/    CC71 : 09                  EXTBLK1:ADD	HL,BC		;yes, extract a 16 bit number.
    1949/    CC72 : 5E                  	LD	E,(HL)
    1950/    CC73 : 23                  	INC	HL
    1951/    CC74 : 56                  	LD	D,(HL)
    1952/    CC75 : EB                  	EX	DE,HL		;return in (HL).
    1953/    CC76 : C9                  	RET	
    1954/    CC77 :                     ;
    1955/    CC77 :                     ;   Compute block number.
    1956/    CC77 :                     ;
    1957/    CC77 : CD 3E CC            COMBLK:	CALL	GETBLOCK
    1958/    CC7A : 4F                  	LD	C,A
    1959/    CC7B : 06 00               	LD	B,0
    1960/    CC7D : CD 5E CC            	CALL	EXTBLK
    1961/    CC80 : 22 E5 D5            	LD	(BLKNMBR),HL
    1962/    CC83 : C9                  	RET	
    1963/    CC84 :                     ;
    1964/    CC84 :                     ;   Check for a zero block number (unused).
    1965/    CC84 :                     ;
    1966/    CC84 : 2A E5 D5            CHKBLK:	LD	HL,(BLKNMBR)
    1967/    CC87 : 7D                  	LD	A,L		;is it zero?
    1968/    CC88 : B4                  	OR	H
    1969/    CC89 : C9                  	RET	
    1970/    CC8A :                     ;
    1971/    CC8A :                     ;   Adjust physical block (BLKNMBR) and convert to logical
    1972/    CC8A :                     ; sector (LOGSECT). This is the starting sector of this block.
    1973/    CC8A :                     ; The actual sector of interest is then added to this and the
    1974/    CC8A :                     ; resulting sector number is stored back in (BLKNMBR). This
    1975/    CC8A :                     ; will still have to be adjusted for the track number.
    1976/    CC8A :                     ;
    1977/    CC8A : 3A C3 D5            LOGICAL:LD	A,(BLKSHFT)	;get log2(physical/logical sectors).
    1978/    CC8D : 2A E5 D5            	LD	HL,(BLKNMBR)	;get physical sector desired.
    1979/    CC90 : 29                  LOGICL1:ADD	HL,HL		;compute logical sector number.
    1980/    CC91 : 3D                  	DEC	A		;note logical sectors are 128 bytes long.
    1981/    CC92 : C2 90 CC            	JP	NZ,LOGICL1
    1982/    CC95 : 22 E7 D5            	LD	(LOGSECT),HL	;save logical sector.
    1983/    CC98 : 3A C4 D5            	LD	A,(BLKMASK)	;get block mask.
    1984/    CC9B : 4F                  	LD	C,A
    1985/    CC9C : 3A E3 D5            	LD	A,(SAVNREC)	;get next sector to access.
    1986/    CC9F : A1                  	AND	C		;extract the relative position within physical block.
    1987/    CCA0 : B5                  	OR	L		;and add it too logical sector.
    1988/    CCA1 : 6F                  	LD	L,A
    1989/    CCA2 : 22 E5 D5            	LD	(BLKNMBR),HL	;and store.
    1990/    CCA5 : C9                  	RET	
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 35 - 2/13/2018 8:47:39


    1991/    CCA6 :                     ;
    1992/    CCA6 :                     ;   Set (HL) to point to extent byte in fcb.
    1993/    CCA6 :                     ;
    1994/    CCA6 : 2A 43 CB            SETEXT:	LD	HL,(PARAMS)
    1995/    CCA9 : 11 0C 00            	LD	DE,12		;it is the twelth byte.
    1996/    CCAC : 19                  	ADD	HL,DE
    1997/    CCAD : C9                  	RET	
    1998/    CCAE :                     ;
    1999/    CCAE :                     ;   Set (HL) to point to record count byte in fcb and (DE) to
    2000/    CCAE :                     ; next record number byte.
    2001/    CCAE :                     ;
    2002/    CCAE : 2A 43 CB            SETHLDE:LD	HL,(PARAMS)
    2003/    CCB1 : 11 0F 00            	LD	DE,15		;record count byte (#15).
    2004/    CCB4 : 19                  	ADD	HL,DE
    2005/    CCB5 : EB                  	EX	DE,HL
    2006/    CCB6 : 21 11 00            	LD	HL,17		;next record number (#32).
    2007/    CCB9 : 19                  	ADD	HL,DE
    2008/    CCBA : C9                  	RET	
    2009/    CCBB :                     ;
    2010/    CCBB :                     ;   Save current file data from fcb.
    2011/    CCBB :                     ;
    2012/    CCBB : CD AE CC            STRDATA:CALL	SETHLDE
    2013/    CCBE : 7E                  	LD	A,(HL)		;get and store record count byte.
    2014/    CCBF : 32 E3 D5            	LD	(SAVNREC),A
    2015/    CCC2 : EB                  	EX	DE,HL
    2016/    CCC3 : 7E                  	LD	A,(HL)		;get and store next record number byte.
    2017/    CCC4 : 32 E1 D5            	LD	(SAVNXT),A
    2018/    CCC7 : CD A6 CC            	CALL	SETEXT		;point to extent byte.
    2019/    CCCA : 3A C5 D5            	LD	A,(EXTMASK)	;get extent mask.
    2020/    CCCD : A6                  	AND	(HL)
    2021/    CCCE : 32 E2 D5            	LD	(SAVEXT),A	;and save extent here.
    2022/    CCD1 : C9                  	RET	
    2023/    CCD2 :                     ;
    2024/    CCD2 :                     ;   Set the next record to access. If (MODE) is set to 2, then
    2025/    CCD2 :                     ; the last record byte (SAVNREC) has the correct number to access.
    2026/    CCD2 :                     ; For sequential access, (MODE) will be equal to 1.
    2027/    CCD2 :                     ;
    2028/    CCD2 : CD AE CC            SETNREC:CALL	SETHLDE
    2029/    CCD5 : 3A D5 D5            	LD	A,(MODE)	;get sequential flag (=1).
    2030/    CCD8 : FE 02               	CP	2		;a 2 indicates that no adder is needed.
    2031/    CCDA : C2 DE CC            	JP	NZ,STNREC1
    2032/    CCDD : AF                  	XOR	A		;clear adder (random access?).
    2033/    CCDE : 4F                  STNREC1:LD	C,A
    2034/    CCDF : 3A E3 D5            	LD	A,(SAVNREC)	;get last record number.
    2035/    CCE2 : 81                  	ADD	A,C		;increment record count.
    2036/    CCE3 : 77                  	LD	(HL),A		;and set fcb's next record byte.
    2037/    CCE4 : EB                  	EX	DE,HL
    2038/    CCE5 : 3A E1 D5            	LD	A,(SAVNXT)	;get next record byte from storage.
    2039/    CCE8 : 77                  	LD	(HL),A		;and put this into fcb as number of records used.
    2040/    CCE9 : C9                  	RET	
    2041/    CCEA :                     ;
    2042/    CCEA :                     ;   Shift (HL) right (C) bits.
    2043/    CCEA :                     ;
    2044/    CCEA : 0C                  SHIFTR:	INC	C
    2045/    CCEB : 0D                  SHIFTR1:DEC	C
    2046/    CCEC : C8                  	RET	Z
    2047/    CCED : 7C                  	LD	A,H
    2048/    CCEE : B7                  	OR	A
    2049/    CCEF : 1F                  	RRA	
    2050/    CCF0 : 67                  	LD	H,A
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 36 - 2/13/2018 8:47:39


    2051/    CCF1 : 7D                  	LD	A,L
    2052/    CCF2 : 1F                  	RRA	
    2053/    CCF3 : 6F                  	LD	L,A
    2054/    CCF4 : C3 EB CC            	JP	SHIFTR1
    2055/    CCF7 :                     ;
    2056/    CCF7 :                     ;   Compute the check-sum for the directory buffer. Return
    2057/    CCF7 :                     ; integer sum in (A).
    2058/    CCF7 :                     ;
    2059/    CCF7 : 0E 80               CHECKSUM: LD	C,128		;length of buffer.
    2060/    CCF9 : 2A B9 D5            	LD	HL,(DIRBUF)	;get its location.
    2061/    CCFC : AF                  	XOR	A		;clear summation byte.
    2062/    CCFD : 86                  CHKSUM1:ADD	A,(HL)		;and compute sum ignoring carries.
    2063/    CCFE : 23                  	INC	HL
    2064/    CCFF : 0D                  	DEC	C
    2065/    CD00 : C2 FD CC            	JP	NZ,CHKSUM1
    2066/    CD03 : C9                  	RET	
    2067/    CD04 :                     ;
    2068/    CD04 :                     ;   Shift (HL) left (C) bits.
    2069/    CD04 :                     ;
    2070/    CD04 : 0C                  SHIFTL:	INC	C
    2071/    CD05 : 0D                  SHIFTL1:DEC	C
    2072/    CD06 : C8                  	RET	Z
    2073/    CD07 : 29                  	ADD	HL,HL		;shift left 1 bit.
    2074/    CD08 : C3 05 CD            	JP	SHIFTL1
    2075/    CD0B :                     ;
    2076/    CD0B :                     ;   Routine to set a bit in a 16 bit value contained in (BC).
    2077/    CD0B :                     ; The bit set depends on the current drive selection.
    2078/    CD0B :                     ;
    2079/    CD0B : C5                  SETBIT:	PUSH	BC		;save 16 bit word.
    2080/    CD0C : 3A 42 CB            	LD	A,(ACTIVE)	;get active drive.
    2081/    CD0F : 4F                  	LD	C,A
    2082/    CD10 : 21 01 00            	LD	HL,1
    2083/    CD13 : CD 04 CD            	CALL	SHIFTL		;shift bit 0 into place.
    2084/    CD16 : C1                  	POP	BC		;now 'or' this with the original word.
    2085/    CD17 : 79                  	LD	A,C
    2086/    CD18 : B5                  	OR	L
    2087/    CD19 : 6F                  	LD	L,A		;low byte done, do high byte.
    2088/    CD1A : 78                  	LD	A,B
    2089/    CD1B : B4                  	OR	H
    2090/    CD1C : 67                  	LD	H,A
    2091/    CD1D : C9                  	RET	
    2092/    CD1E :                     ;
    2093/    CD1E :                     ;   Extract the write protect status bit for the current drive.
    2094/    CD1E :                     ; The result is returned in (A), bit 0.
    2095/    CD1E :                     ;
    2096/    CD1E : 2A AD D5            GETWPRT:LD	HL,(WRTPRT)	;get status bytes.
    2097/    CD21 : 3A 42 CB            	LD	A,(ACTIVE)	;which drive is current?
    2098/    CD24 : 4F                  	LD	C,A
    2099/    CD25 : CD EA CC            	CALL	SHIFTR		;shift status such that bit 0 is the
    2100/    CD28 : 7D                  	LD	A,L		;one of interest for this drive.
    2101/    CD29 : E6 01               	AND	01H		;and isolate it.
    2102/    CD2B : C9                  	RET	
    2103/    CD2C :                     ;
    2104/    CD2C :                     ;   Function to write protect the current disk.
    2105/    CD2C :                     ;
    2106/    CD2C : 21 AD D5            WRTPRTD:LD	HL,WRTPRT	;point to status word.
    2107/    CD2F : 4E                  	LD	C,(HL)		;set (BC) equal to the status.
    2108/    CD30 : 23                  	INC	HL
    2109/    CD31 : 46                  	LD	B,(HL)
    2110/    CD32 : CD 0B CD            	CALL	SETBIT		;and set this bit according to current drive.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 37 - 2/13/2018 8:47:39


    2111/    CD35 : 22 AD D5            	LD	(WRTPRT),HL	;then save.
    2112/    CD38 : 2A C8 D5            	LD	HL,(DIRSIZE)	;now save directory size limit.
    2113/    CD3B : 23                  	INC	HL		;remember the last one.
    2114/    CD3C : EB                  	EX	DE,HL
    2115/    CD3D : 2A B3 D5            	LD	HL,(SCRATCH1)	;and store it here.
    2116/    CD40 : 73                  	LD	(HL),E		;put low byte.
    2117/    CD41 : 23                  	INC	HL
    2118/    CD42 : 72                  	LD	(HL),D		;then high byte.
    2119/    CD43 : C9                  	RET	
    2120/    CD44 :                     ;
    2121/    CD44 :                     ;   Check for a read only file.
    2122/    CD44 :                     ;
    2123/    CD44 : CD 5E CD            CHKROFL:CALL	FCB2HL		;set (HL) to file entry in directory buffer.
    2124/    CD47 : 11 09 00            CKROF1:	LD	DE,9		;look at bit 7 of the ninth byte.
    2125/    CD4A : 19                  	ADD	HL,DE
    2126/    CD4B : 7E                  	LD	A,(HL)
    2127/    CD4C : 17                  	RLA	
    2128/    CD4D : D0                  	RET	NC		;return if ok.
    2129/    CD4E : 21 0F C8            	LD	HL,ROFILE	;else, print error message and terminate.
    2130/    CD51 : C3 4A CB            	JP	JUMPHL
    2131/    CD54 :                     ;
    2132/    CD54 :                     ;   Check the write protect status of the active disk.
    2133/    CD54 :                     ;
    2134/    CD54 : CD 1E CD            CHKWPRT:CALL	GETWPRT
    2135/    CD57 : C8                  	RET	Z		;return if ok.
    2136/    CD58 : 21 0D C8            	LD	HL,RODISK	;else print message and terminate.
    2137/    CD5B : C3 4A CB            	JP	JUMPHL
    2138/    CD5E :                     ;
    2139/    CD5E :                     ;   Routine to set (HL) pointing to the proper entry in the
    2140/    CD5E :                     ; directory buffer.
    2141/    CD5E :                     ;
    2142/    CD5E : 2A B9 D5            FCB2HL:	LD	HL,(DIRBUF)	;get address of buffer.
    2143/    CD61 : 3A E9 D5            	LD	A,(FCBPOS)	;relative position of file.
    2144/    CD64 :                     ;
    2145/    CD64 :                     ;   Routine to add (A) to (HL).
    2146/    CD64 :                     ;
    2147/    CD64 : 85                  ADDA2HL:ADD	A,L
    2148/    CD65 : 6F                  	LD	L,A
    2149/    CD66 : D0                  	RET	NC
    2150/    CD67 : 24                  	INC	H		;take care of any carry.
    2151/    CD68 : C9                  	RET	
    2152/    CD69 :                     ;
    2153/    CD69 :                     ;   Routine to get the 's2' byte from the fcb supplied in
    2154/    CD69 :                     ; the initial parameter specification.
    2155/    CD69 :                     ;
    2156/    CD69 : 2A 43 CB            GETS2:	LD	HL,(PARAMS)	;get address of fcb.
    2157/    CD6C : 11 0E 00            	LD	DE,14		;relative position of 's2'.
    2158/    CD6F : 19                  	ADD	HL,DE
    2159/    CD70 : 7E                  	LD	A,(HL)		;extract this byte.
    2160/    CD71 : C9                  	RET	
    2161/    CD72 :                     ;
    2162/    CD72 :                     ;   Clear the 's2' byte in the fcb.
    2163/    CD72 :                     ;
    2164/    CD72 : CD 69 CD            CLEARS2:CALL	GETS2		;this sets (HL) pointing to it.
    2165/    CD75 : 36 00               	LD	(HL),0		;now clear it.
    2166/    CD77 : C9                  	RET	
    2167/    CD78 :                     ;
    2168/    CD78 :                     ;   Set bit 7 in the 's2' byte of the fcb.
    2169/    CD78 :                     ;
    2170/    CD78 : CD 69 CD            SETS2B7:CALL	GETS2		;get the byte.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 38 - 2/13/2018 8:47:39


    2171/    CD7B : F6 80               	OR	80H		;and set bit 7.
    2172/    CD7D : 77                  	LD	(HL),A		;then store.
    2173/    CD7E : C9                  	RET	
    2174/    CD7F :                     ;
    2175/    CD7F :                     ;   Compare (FILEPOS) with (SCRATCH1) and set flags based on
    2176/    CD7F :                     ; the difference. This checks to see if there are more file
    2177/    CD7F :                     ; names in the directory. We are at (FILEPOS) and there are
    2178/    CD7F :                     ; (SCRATCH1) of them to check.
    2179/    CD7F :                     ;
    2180/    CD7F : 2A EA D5            MOREFLS:LD	HL,(FILEPOS)	;we are here.
    2181/    CD82 : EB                  	EX	DE,HL
    2182/    CD83 : 2A B3 D5            	LD	HL,(SCRATCH1)	;and don't go past here.
    2183/    CD86 : 7B                  	LD	A,E		;compute difference but don't keep.
    2184/    CD87 : 96                  	SUB	(HL)
    2185/    CD88 : 23                  	INC	HL
    2186/    CD89 : 7A                  	LD	A,D
    2187/    CD8A : 9E                  	SBC	A,(HL)		;set carry if no more names.
    2188/    CD8B : C9                  	RET	
    2189/    CD8C :                     ;
    2190/    CD8C :                     ;   Call this routine to prevent (SCRATCH1) from being greater
    2191/    CD8C :                     ; than (FILEPOS).
    2192/    CD8C :                     ;
    2193/    CD8C : CD 7F CD            CHKNMBR:CALL	MOREFLS		;SCRATCH1 too big?
    2194/    CD8F : D8                  	RET	C
    2195/    CD90 : 13                  	INC	DE		;yes, reset it to (FILEPOS).
    2196/    CD91 : 72                  	LD	(HL),D
    2197/    CD92 : 2B                  	DEC	HL
    2198/    CD93 : 73                  	LD	(HL),E
    2199/    CD94 : C9                  	RET	
    2200/    CD95 :                     ;
    2201/    CD95 :                     ;   Compute (HL)=(DE)-(HL)
    2202/    CD95 :                     ;
    2203/    CD95 : 7B                  SUBHL:	LD	A,E		;compute difference.
    2204/    CD96 : 95                  	SUB	L
    2205/    CD97 : 6F                  	LD	L,A		;store low byte.
    2206/    CD98 : 7A                  	LD	A,D
    2207/    CD99 : 9C                  	SBC	A,H
    2208/    CD9A : 67                  	LD	H,A		;and then high byte.
    2209/    CD9B : C9                  	RET	
    2210/    CD9C :                     ;
    2211/    CD9C :                     ;   Set the directory checksum byte.
    2212/    CD9C :                     ;
    2213/    CD9C : 0E FF               SETDIR:	LD	C,0FFH
    2214/    CD9E :                     ;
    2215/    CD9E :                     ;   Routine to set or compare the directory checksum byte. If
    2216/    CD9E :                     ; (C)=0ffh, then this will set the checksum byte. Else the byte
    2217/    CD9E :                     ; will be checked. If the check fails (the disk has been changed),
    2218/    CD9E :                     ; then this disk will be write protected.
    2219/    CD9E :                     ;
    2220/    CD9E : 2A EC D5            CHECKDIR: LD	HL,(CKSUMTBL)
    2221/    CDA1 : EB                  	EX	DE,HL
    2222/    CDA2 : 2A CC D5            	LD	HL,(ALLOC1)
    2223/    CDA5 : CD 95 CD            	CALL	SUBHL
    2224/    CDA8 : D0                  	RET	NC		;ok if (CKSUMTBL) > (ALLOC1), so return.
    2225/    CDA9 : C5                  	PUSH	BC
    2226/    CDAA : CD F7 CC            	CALL	CHECKSUM	;else compute checksum.
    2227/    CDAD : 2A BD D5            	LD	HL,(CHKVECT)	;get address of checksum table.
    2228/    CDB0 : EB                  	EX	DE,HL
    2229/    CDB1 : 2A EC D5            	LD	HL,(CKSUMTBL)
    2230/    CDB4 : 19                  	ADD	HL,DE		;set (HL) to point to byte for this drive.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 39 - 2/13/2018 8:47:39


    2231/    CDB5 : C1                  	POP	BC
    2232/    CDB6 : 0C                  	INC	C		;set or check ?
    2233/    CDB7 : CA C4 CD            	JP	Z,CHKDIR1
    2234/    CDBA : BE                  	CP	(HL)		;check them.
    2235/    CDBB : C8                  	RET	Z		;return if they are the same.
    2236/    CDBC : CD 7F CD            	CALL	MOREFLS		;not the same, do we care?
    2237/    CDBF : D0                  	RET	NC
    2238/    CDC0 : CD 2C CD            	CALL	WRTPRTD		;yes, mark this as write protected.
    2239/    CDC3 : C9                  	RET	
    2240/    CDC4 : 77                  CHKDIR1:LD	(HL),A		;just set the byte.
    2241/    CDC5 : C9                  	RET	
    2242/    CDC6 :                     ;
    2243/    CDC6 :                     ;   Do a write to the directory of the current disk.
    2244/    CDC6 :                     ;
    2245/    CDC6 : CD 9C CD            DIRWRITE: CALL	SETDIR		;set checksum byte.
    2246/    CDC9 : CD E0 CD            	CALL	DIRDMA		;set directory dma address.
    2247/    CDCC : 0E 01               	LD	C,1		;tell the bios to actually write.
    2248/    CDCE : CD B8 CB            	CALL	DOWRITE		;then do the write.
    2249/    CDD1 : C3 DA CD            	JP	DEFDMA
    2250/    CDD4 :                     ;
    2251/    CDD4 :                     ;   Read from the directory.
    2252/    CDD4 :                     ;
    2253/    CDD4 : CD E0 CD            DIRREAD:CALL	DIRDMA		;set the directory dma address.
    2254/    CDD7 : CD B2 CB            	CALL	DOREAD		;and read it.
    2255/    CDDA :                     ;
    2256/    CDDA :                     ;   Routine to set the dma address to the users choice.
    2257/    CDDA :                     ;
    2258/    CDDA : 21 B1 D5            DEFDMA:	LD	HL,USERDMA	;reset the default dma address and return.
    2259/    CDDD : C3 E3 CD            	JP	DIRDMA1
    2260/    CDE0 :                     ;
    2261/    CDE0 :                     ;   Routine to set the dma address for directory work.
    2262/    CDE0 :                     ;
    2263/    CDE0 : 21 B9 D5            DIRDMA:	LD	HL,DIRBUF
    2264/    CDE3 :                     ;
    2265/    CDE3 :                     ;   Set the dma address. On entry, (HL) points to
    2266/    CDE3 :                     ; word containing the desired dma address.
    2267/    CDE3 :                     ;
    2268/    CDE3 : 4E                  DIRDMA1:LD	C,(HL)
    2269/    CDE4 : 23                  	INC	HL
    2270/    CDE5 : 46                  	LD	B,(HL)		;setup (BC) and go to the bios to set it.
    2271/    CDE6 : C3 24 D6            	JP	SETDMA
    2272/    CDE9 :                     ;
    2273/    CDE9 :                     ;   Move the directory buffer into user's dma space.
    2274/    CDE9 :                     ;
    2275/    CDE9 : 2A B9 D5            MOVEDIR:LD	HL,(DIRBUF)	;buffer is located here, and
    2276/    CDEC : EB                  	EX	DE,HL
    2277/    CDED : 2A B1 D5            	LD	HL,(USERDMA)	; put it here.
    2278/    CDF0 : 0E 80               	LD	C,128		;this is its length.
    2279/    CDF2 : C3 4F CB            	JP	DE2HL		;move it now and return.
    2280/    CDF5 :                     ;
    2281/    CDF5 :                     ;   Check (FILEPOS) and set the zero flag if it equals 0ffffh.
    2282/    CDF5 :                     ;
    2283/    CDF5 : 21 EA D5            CKFILPOS: LD	HL,FILEPOS
    2284/    CDF8 : 7E                  	LD	A,(HL)
    2285/    CDF9 : 23                  	INC	HL
    2286/    CDFA : BE                  	CP	(HL)		;are both bytes the same?
    2287/    CDFB : C0                  	RET	NZ
    2288/    CDFC : 3C                  	INC	A		;yes, but are they each 0ffh?
    2289/    CDFD : C9                  	RET	
    2290/    CDFE :                     ;
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 40 - 2/13/2018 8:47:39


    2291/    CDFE :                     ;   Set location (FILEPOS) to 0ffffh.
    2292/    CDFE :                     ;
    2293/    CDFE : 21 FF FF            STFILPOS: LD	HL,0FFFFH
    2294/    CE01 : 22 EA D5            	LD	(FILEPOS),HL
    2295/    CE04 : C9                  	RET	
    2296/    CE05 :                     ;
    2297/    CE05 :                     ;   Move on to the next file position within the current
    2298/    CE05 :                     ; directory buffer. If no more exist, set pointer to 0ffffh
    2299/    CE05 :                     ; and the calling routine will check for this. Enter with (C)
    2300/    CE05 :                     ; equal to 0ffh to cause the checksum byte to be set, else we
    2301/    CE05 :                     ; will check this disk and set write protect if checksums are
    2302/    CE05 :                     ; not the same (applies only if another directory sector must
    2303/    CE05 :                     ; be read).
    2304/    CE05 :                     ;
    2305/    CE05 : 2A C8 D5            NXENTRY:LD	HL,(DIRSIZE)	;get directory entry size limit.
    2306/    CE08 : EB                  	EX	DE,HL
    2307/    CE09 : 2A EA D5            	LD	HL,(FILEPOS)	;get current count.
    2308/    CE0C : 23                  	INC	HL		;go on to the next one.
    2309/    CE0D : 22 EA D5            	LD	(FILEPOS),HL
    2310/    CE10 : CD 95 CD            	CALL	SUBHL		;(HL)=(DIRSIZE)-(FILEPOS)
    2311/    CE13 : D2 19 CE            	JP	NC,NXENT1	;is there more room left?
    2312/    CE16 : C3 FE CD            	JP	STFILPOS	;no. Set this flag and return.
    2313/    CE19 : 3A EA D5            NXENT1:	LD	A,(FILEPOS)	;get file position within directory.
    2314/    CE1C : E6 03               	AND	03H		;only look within this sector (only 4 entries fit).
    2315/    CE1E : 06 05               	LD	B,5		;convert to relative position (32 bytes each).
    2316/    CE20 : 87                  NXENT2:	ADD	A,A		;note that this is not efficient code.
    2317/    CE21 : 05                  	DEC	B		;5 'ADD A's would be better.
    2318/    CE22 : C2 20 CE            	JP	NZ,NXENT2
    2319/    CE25 : 32 E9 D5            	LD	(FCBPOS),A	;save it as position of fcb.
    2320/    CE28 : B7                  	OR	A
    2321/    CE29 : C0                  	RET	NZ		;return if we are within buffer.
    2322/    CE2A : C5                  	PUSH	BC
    2323/    CE2B : CD C3 CB            	CALL	TRKSEC		;we need the next directory sector.
    2324/    CE2E : CD D4 CD            	CALL	DIRREAD
    2325/    CE31 : C1                  	POP	BC
    2326/    CE32 : C3 9E CD            	JP	CHECKDIR
    2327/    CE35 :                     ;
    2328/    CE35 :                     ;   Routine to to get a bit from the disk space allocation
    2329/    CE35 :                     ; map. It is returned in (A), bit position 0. On entry to here,
    2330/    CE35 :                     ; set (BC) to the block number on the disk to check.
    2331/    CE35 :                     ; On return, (D) will contain the original bit position for
    2332/    CE35 :                     ; this block number and (HL) will point to the address for it.
    2333/    CE35 :                     ;
    2334/    CE35 : 79                  CKBITMAP: LD	A,C		;determine bit number of interest.
    2335/    CE36 : E6 07               	AND	07H		;compute (D)=(E)=(C and 7)+1.
    2336/    CE38 : 3C                  	INC	A
    2337/    CE39 : 5F                  	LD	E,A		;save particular bit number.
    2338/    CE3A : 57                  	LD	D,A
    2339/    CE3B :                     ;
    2340/    CE3B :                     ;   compute (BC)=(BC)/8.
    2341/    CE3B :                     ;
    2342/    CE3B : 79                  	LD	A,C
    2343/    CE3C : 0F                  	RRCA			;now shift right 3 bits.
    2344/    CE3D : 0F                  	RRCA	
    2345/    CE3E : 0F                  	RRCA	
    2346/    CE3F : E6 1F               	AND	1FH		;and clear bits 7,6,5.
    2347/    CE41 : 4F                  	LD	C,A
    2348/    CE42 : 78                  	LD	A,B
    2349/    CE43 : 87                  	ADD	A,A		;now shift (B) into bits 7,6,5.
    2350/    CE44 : 87                  	ADD	A,A
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 41 - 2/13/2018 8:47:39


    2351/    CE45 : 87                  	ADD	A,A
    2352/    CE46 : 87                  	ADD	A,A
    2353/    CE47 : 87                  	ADD	A,A
    2354/    CE48 : B1                  	OR	C		;and add in (C).
    2355/    CE49 : 4F                  	LD	C,A		;ok, (C) ha been completed.
    2356/    CE4A : 78                  	LD	A,B		;is there a better way of doing this?
    2357/    CE4B : 0F                  	RRCA	
    2358/    CE4C : 0F                  	RRCA	
    2359/    CE4D : 0F                  	RRCA	
    2360/    CE4E : E6 1F               	AND	1FH
    2361/    CE50 : 47                  	LD	B,A		;and now (B) is completed.
    2362/    CE51 :                     ;
    2363/    CE51 :                     ;   use this as an offset into the disk space allocation
    2364/    CE51 :                     ; table.
    2365/    CE51 :                     ;
    2366/    CE51 : 2A BF D5            	LD	HL,(ALOCVECT)
    2367/    CE54 : 09                  	ADD	HL,BC
    2368/    CE55 : 7E                  	LD	A,(HL)		;now get correct byte.
    2369/    CE56 : 07                  CKBMAP1:RLCA			;get correct bit into position 0.
    2370/    CE57 : 1D                  	DEC	E
    2371/    CE58 : C2 56 CE            	JP	NZ,CKBMAP1
    2372/    CE5B : C9                  	RET	
    2373/    CE5C :                     ;
    2374/    CE5C :                     ;   Set or clear the bit map such that block number (BC) will be marked
    2375/    CE5C :                     ; as used. On entry, if (E)=0 then this bit will be cleared, if it equals
    2376/    CE5C :                     ; 1 then it will be set (don't use anyother values).
    2377/    CE5C :                     ;
    2378/    CE5C : D5                  STBITMAP: PUSH	DE
    2379/    CE5D : CD 35 CE            	CALL	CKBITMAP	;get the byte of interest.
    2380/    CE60 : E6 FE               	AND	0FEH		;clear the affected bit.
    2381/    CE62 : C1                  	POP	BC
    2382/    CE63 : B1                  	OR	C		;and now set it acording to (C).
    2383/    CE64 :                     ;
    2384/    CE64 :                     ;  entry to restore the original bit position and then store
    2385/    CE64 :                     ; in table. (A) contains the value, (D) contains the bit
    2386/    CE64 :                     ; position (1-8), and (HL) points to the address within the
    2387/    CE64 :                     ; space allocation table for this byte.
    2388/    CE64 :                     ;
    2389/    CE64 : 0F                  STBMAP1:RRCA			;restore original bit position.
    2390/    CE65 : 15                  	DEC	D
    2391/    CE66 : C2 64 CE            	JP	NZ,STBMAP1
    2392/    CE69 : 77                  	LD	(HL),A		;and stor byte in table.
    2393/    CE6A : C9                  	RET	
    2394/    CE6B :                     ;
    2395/    CE6B :                     ;   Set/clear space used bits in allocation map for this file.
    2396/    CE6B :                     ; On entry, (C)=1 to set the map and (C)=0 to clear it.
    2397/    CE6B :                     ;
    2398/    CE6B : CD 5E CD            SETFILE:CALL	FCB2HL		;get address of fcb
    2399/    CE6E : 11 10 00            	LD	DE,16
    2400/    CE71 : 19                  	ADD	HL,DE		;get to block number bytes.
    2401/    CE72 : C5                  	PUSH	BC
    2402/    CE73 : 0E 11               	LD	C,17		;check all 17 bytes (max) of table.
    2403/    CE75 : D1                  SETFL1:	POP	DE
    2404/    CE76 : 0D                  	DEC	C		;done all bytes yet?
    2405/    CE77 : C8                  	RET	Z
    2406/    CE78 : D5                  	PUSH	DE
    2407/    CE79 : 3A DD D5            	LD	A,(BIGDISK)	;check disk size for 16 bit block numbers.
    2408/    CE7C : B7                  	OR	A
    2409/    CE7D : CA 88 CE            	JP	Z,SETFL2
    2410/    CE80 : C5                  	PUSH	BC		;only 8 bit numbers. set (BC) to this one.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 42 - 2/13/2018 8:47:39


    2411/    CE81 : E5                  	PUSH	HL
    2412/    CE82 : 4E                  	LD	C,(HL)		;get low byte from table, always
    2413/    CE83 : 06 00               	LD	B,0		;set high byte to zero.
    2414/    CE85 : C3 8E CE            	JP	SETFL3
    2415/    CE88 : 0D                  SETFL2:	DEC	C		;for 16 bit block numbers, adjust counter.
    2416/    CE89 : C5                  	PUSH	BC
    2417/    CE8A : 4E                  	LD	C,(HL)		;now get both the low and high bytes.
    2418/    CE8B : 23                  	INC	HL
    2419/    CE8C : 46                  	LD	B,(HL)
    2420/    CE8D : E5                  	PUSH	HL
    2421/    CE8E : 79                  SETFL3:	LD	A,C		;block used?
    2422/    CE8F : B0                  	OR	B
    2423/    CE90 : CA 9D CE            	JP	Z,SETFL4
    2424/    CE93 : 2A C6 D5            	LD	HL,(DSKSIZE)	;is this block number within the
    2425/    CE96 : 7D                  	LD	A,L		;space on the disk?
    2426/    CE97 : 91                  	SUB	C
    2427/    CE98 : 7C                  	LD	A,H
    2428/    CE99 : 98                  	SBC	A,B
    2429/    CE9A : D4 5C CE            	CALL	NC,STBITMAP	;yes, set the proper bit.
    2430/    CE9D : E1                  SETFL4:	POP	HL		;point to next block number in fcb.
    2431/    CE9E : 23                  	INC	HL
    2432/    CE9F : C1                  	POP	BC
    2433/    CEA0 : C3 75 CE            	JP	SETFL1
    2434/    CEA3 :                     ;
    2435/    CEA3 :                     ;   Construct the space used allocation bit map for the active
    2436/    CEA3 :                     ; drive. If a file name starts with '$' and it is under the
    2437/    CEA3 :                     ; current user number, then (STATUS) is set to minus 1. Otherwise
    2438/    CEA3 :                     ; it is not set at all.
    2439/    CEA3 :                     ;
    2440/    CEA3 : 2A C6 D5            BITMAP:	LD	HL,(DSKSIZE)	;compute size of allocation table.
    2441/    CEA6 : 0E 03               	LD	C,3
    2442/    CEA8 : CD EA CC            	CALL	SHIFTR		;(HL)=(HL)/8.
    2443/    CEAB : 23                  	INC	HL		;at lease 1 byte.
    2444/    CEAC : 44                  	LD	B,H
    2445/    CEAD : 4D                  	LD	C,L		;set (BC) to the allocation table length.
    2446/    CEAE :                     ;
    2447/    CEAE :                     ;   Initialize the bitmap for this drive. Right now, the first
    2448/    CEAE :                     ; two bytes are specified by the disk parameter block. However
    2449/    CEAE :                     ; a patch could be entered here if it were necessary to setup
    2450/    CEAE :                     ; this table in a special mannor. For example, the bios could
    2451/    CEAE :                     ; determine locations of 'bad blocks' and set them as already
    2452/    CEAE :                     ; 'used' in the map.
    2453/    CEAE :                     ;
    2454/    CEAE : 2A BF D5            	LD	HL,(ALOCVECT)	;now zero out the table now.
    2455/    CEB1 : 36 00               BITMAP1:LD	(HL),0
    2456/    CEB3 : 23                  	INC	HL
    2457/    CEB4 : 0B                  	DEC	BC
    2458/    CEB5 : 78                  	LD	A,B
    2459/    CEB6 : B1                  	OR	C
    2460/    CEB7 : C2 B1 CE            	JP	NZ,BITMAP1
    2461/    CEBA : 2A CA D5            	LD	HL,(ALLOC0)	;get initial space used by directory.
    2462/    CEBD : EB                  	EX	DE,HL
    2463/    CEBE : 2A BF D5            	LD	HL,(ALOCVECT)	;and put this into map.
    2464/    CEC1 : 73                  	LD	(HL),E
    2465/    CEC2 : 23                  	INC	HL
    2466/    CEC3 : 72                  	LD	(HL),D
    2467/    CEC4 :                     ;
    2468/    CEC4 :                     ;   End of initialization portion.
    2469/    CEC4 :                     ;
    2470/    CEC4 : CD A1 CB            	CALL	HOMEDRV		;now home the drive.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 43 - 2/13/2018 8:47:39


    2471/    CEC7 : 2A B3 D5            	LD	HL,(SCRATCH1)
    2472/    CECA : 36 03               	LD	(HL),3		;force next directory request to read
    2473/    CECC : 23                  	INC	HL		;in a sector.
    2474/    CECD : 36 00               	LD	(HL),0
    2475/    CECF : CD FE CD            	CALL	STFILPOS	;clear initial file position also.
    2476/    CED2 : 0E FF               BITMAP2:LD	C,0FFH		;read next file name in directory
    2477/    CED4 : CD 05 CE            	CALL	NXENTRY		;and set checksum byte.
    2478/    CED7 : CD F5 CD            	CALL	CKFILPOS	;is there another file?
    2479/    CEDA : C8                  	RET	Z
    2480/    CEDB : CD 5E CD            	CALL	FCB2HL		;yes, get its address.
    2481/    CEDE : 3E E5               	LD	A,0E5H
    2482/    CEE0 : BE                  	CP	(HL)		;empty file entry?
    2483/    CEE1 : CA D2 CE            	JP	Z,BITMAP2
    2484/    CEE4 : 3A 41 CB            	LD	A,(USERNO)	;no, correct user number?
    2485/    CEE7 : BE                  	CP	(HL)
    2486/    CEE8 : C2 F6 CE            	JP	NZ,BITMAP3
    2487/    CEEB : 23                  	INC	HL
    2488/    CEEC : 7E                  	LD	A,(HL)		;yes, does name start with a '$'?
    2489/    CEED : D6 24               	SUB	'$'
    2490/    CEEF : C2 F6 CE            	JP	NZ,BITMAP3
    2491/    CEF2 : 3D                  	DEC	A		;yes, set atatus to minus one.
    2492/    CEF3 : 32 45 CB            	LD	(STATUS),A
    2493/    CEF6 : 0E 01               BITMAP3:LD	C,1		;now set this file's space as used in bit map.
    2494/    CEF8 : CD 6B CE            	CALL	SETFILE
    2495/    CEFB : CD 8C CD            	CALL	CHKNMBR		;keep (SCRATCH1) in bounds.
    2496/    CEFE : C3 D2 CE            	JP	BITMAP2
    2497/    CF01 :                     ;
    2498/    CF01 :                     ;   Set the status (STATUS) and return.
    2499/    CF01 :                     ;
    2500/    CF01 : 3A D4 D5            STSTATUS: LD	A,(FNDSTAT)
    2501/    CF04 : C3 01 CB            	JP	SETSTAT
    2502/    CF07 :                     ;
    2503/    CF07 :                     ;   Check extents in (A) and (C). Set the zero flag if they
    2504/    CF07 :                     ; are the same. The number of 16k chunks of disk space that
    2505/    CF07 :                     ; the directory extent covers is expressad is (EXTMASK+1).
    2506/    CF07 :                     ; No registers are modified.
    2507/    CF07 :                     ;
    2508/    CF07 : C5                  SAMEXT:	PUSH	BC
    2509/    CF08 : F5                  	PUSH	AF
    2510/    CF09 : 3A C5 D5            	LD	A,(EXTMASK)	;get extent mask and use it to
    2511/    CF0C : 2F                  	CPL			;to compare both extent numbers.
    2512/    CF0D : 47                  	LD	B,A		;save resulting mask here.
    2513/    CF0E : 79                  	LD	A,C		;mask first extent and save in (C).
    2514/    CF0F : A0                  	AND	B
    2515/    CF10 : 4F                  	LD	C,A
    2516/    CF11 : F1                  	POP	AF		;now mask second extent and compare
    2517/    CF12 : A0                  	AND	B		;with the first one.
    2518/    CF13 : 91                  	SUB	C
    2519/    CF14 : E6 1F               	AND	1FH		;(* only check buts 0-4 *)
    2520/    CF16 : C1                  	POP	BC		;the zero flag is set if they are the same.
    2521/    CF17 : C9                  	RET			;restore (BC) and return.
    2522/    CF18 :                     ;
    2523/    CF18 :                     ;   Search for the first occurence of a file name. On entry,
    2524/    CF18 :                     ; register (C) should contain the number of bytes of the fcb
    2525/    CF18 :                     ; that must match.
    2526/    CF18 :                     ;
    2527/    CF18 : 3E FF               FINDFST:LD	A,0FFH
    2528/    CF1A : 32 D4 D5            	LD	(FNDSTAT),A
    2529/    CF1D : 21 D8 D5            	LD	HL,COUNTER	;save character count.
    2530/    CF20 : 71                  	LD	(HL),C
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 44 - 2/13/2018 8:47:39


    2531/    CF21 : 2A 43 CB            	LD	HL,(PARAMS)	;get filename to match.
    2532/    CF24 : 22 D9 D5            	LD	(SAVEFCB),HL	;and save.
    2533/    CF27 : CD FE CD            	CALL	STFILPOS	;clear initial file position (set to 0ffffh).
    2534/    CF2A : CD A1 CB            	CALL	HOMEDRV		;home the drive.
    2535/    CF2D :                     ;
    2536/    CF2D :                     ;   Entry to locate the next occurence of a filename within the
    2537/    CF2D :                     ; directory. The disk is not expected to have been changed. If
    2538/    CF2D :                     ; it was, then it will be write protected.
    2539/    CF2D :                     ;
    2540/    CF2D : 0E 00               FINDNXT:LD	C,0		;write protect the disk if changed.
    2541/    CF2F : CD 05 CE            	CALL	NXENTRY		;get next filename entry in directory.
    2542/    CF32 : CD F5 CD            	CALL	CKFILPOS	;is file position = 0ffffh?
    2543/    CF35 : CA 94 CF            	JP	Z,FNDNXT6	;yes, exit now then.
    2544/    CF38 : 2A D9 D5            	LD	HL,(SAVEFCB)	;set (DE) pointing to filename to match.
    2545/    CF3B : EB                  	EX	DE,HL
    2546/    CF3C : 1A                  	LD	A,(DE)
    2547/    CF3D : FE E5               	CP	0E5H		;empty directory entry?
    2548/    CF3F : CA 4A CF            	JP	Z,FNDNXT1	;(* are we trying to reserect erased entries? *)
    2549/    CF42 : D5                  	PUSH	DE
    2550/    CF43 : CD 7F CD            	CALL	MOREFLS		;more files in directory?
    2551/    CF46 : D1                  	POP	DE
    2552/    CF47 : D2 94 CF            	JP	NC,FNDNXT6	;no more. Exit now.
    2553/    CF4A : CD 5E CD            FNDNXT1:CALL	FCB2HL		;get address of this fcb in directory.
    2554/    CF4D : 3A D8 D5            	LD	A,(COUNTER)	;get number of bytes (characters) to check.
    2555/    CF50 : 4F                  	LD	C,A
    2556/    CF51 : 06 00               	LD	B,0		;initialize byte position counter.
    2557/    CF53 : 79                  FNDNXT2:LD	A,C		;are we done with the compare?
    2558/    CF54 : B7                  	OR	A
    2559/    CF55 : CA 83 CF            	JP	Z,FNDNXT5
    2560/    CF58 : 1A                  	LD	A,(DE)		;no, check next byte.
    2561/    CF59 : FE 3F               	CP	'?'		;don't care about this character?
    2562/    CF5B : CA 7C CF            	JP	Z,FNDNXT4
    2563/    CF5E : 78                  	LD	A,B		;get bytes position in fcb.
    2564/    CF5F : FE 0D               	CP	13		;don't care about the thirteenth byte either.
    2565/    CF61 : CA 7C CF            	JP	Z,FNDNXT4
    2566/    CF64 : FE 0C               	CP	12		;extent byte?
    2567/    CF66 : 1A                  	LD	A,(DE)
    2568/    CF67 : CA 73 CF            	JP	Z,FNDNXT3
    2569/    CF6A : 96                  	SUB	(HL)		;otherwise compare characters.
    2570/    CF6B : E6 7F               	AND	7FH
    2571/    CF6D : C2 2D CF            	JP	NZ,FINDNXT	;not the same, check next entry.
    2572/    CF70 : C3 7C CF            	JP	FNDNXT4		;so far so good, keep checking.
    2573/    CF73 : C5                  FNDNXT3:PUSH	BC		;check the extent byte here.
    2574/    CF74 : 4E                  	LD	C,(HL)
    2575/    CF75 : CD 07 CF            	CALL	SAMEXT
    2576/    CF78 : C1                  	POP	BC
    2577/    CF79 : C2 2D CF            	JP	NZ,FINDNXT	;not the same, look some more.
    2578/    CF7C :                     ;
    2579/    CF7C :                     ;   So far the names compare. Bump pointers to the next byte
    2580/    CF7C :                     ; and continue until all (C) characters have been checked.
    2581/    CF7C :                     ;
    2582/    CF7C : 13                  FNDNXT4:INC	DE		;bump pointers.
    2583/    CF7D : 23                  	INC	HL
    2584/    CF7E : 04                  	INC	B
    2585/    CF7F : 0D                  	DEC	C		;adjust character counter.
    2586/    CF80 : C3 53 CF            	JP	FNDNXT2
    2587/    CF83 : 3A EA D5            FNDNXT5:LD	A,(FILEPOS)	;return the position of this entry.
    2588/    CF86 : E6 03               	AND	03H
    2589/    CF88 : 32 45 CB            	LD	(STATUS),A
    2590/    CF8B : 21 D4 D5            	LD	HL,FNDSTAT
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 45 - 2/13/2018 8:47:39


    2591/    CF8E : 7E                  	LD	A,(HL)
    2592/    CF8F : 17                  	RLA	
    2593/    CF90 : D0                  	RET	NC
    2594/    CF91 : AF                  	XOR	A
    2595/    CF92 : 77                  	LD	(HL),A
    2596/    CF93 : C9                  	RET	
    2597/    CF94 :                     ;
    2598/    CF94 :                     ;   Filename was not found. Set appropriate status.
    2599/    CF94 :                     ;
    2600/    CF94 : CD FE CD            FNDNXT6:CALL	STFILPOS	;set (FILEPOS) to 0ffffh.
    2601/    CF97 : 3E FF               	LD	A,0FFH		;say not located.
    2602/    CF99 : C3 01 CB            	JP	SETSTAT
    2603/    CF9C :                     ;
    2604/    CF9C :                     ;   Erase files from the directory. Only the first byte of the
    2605/    CF9C :                     ; fcb will be affected. It is set to (E5).
    2606/    CF9C :                     ;
    2607/    CF9C : CD 54 CD            ERAFILE:CALL	CHKWPRT		;is disk write protected?
    2608/    CF9F : 0E 0C               	LD	C,12		;only compare file names.
    2609/    CFA1 : CD 18 CF            	CALL	FINDFST		;get first file name.
    2610/    CFA4 : CD F5 CD            ERAFIL1:CALL	CKFILPOS	;any found?
    2611/    CFA7 : C8                  	RET	Z		;nope, we must be done.
    2612/    CFA8 : CD 44 CD            	CALL	CHKROFL		;is file read only?
    2613/    CFAB : CD 5E CD            	CALL	FCB2HL		;nope, get address of fcb and
    2614/    CFAE : 36 E5               	LD	(HL),0E5H	;set first byte to 'empty'.
    2615/    CFB0 : 0E 00               	LD	C,0		;clear the space from the bit map.
    2616/    CFB2 : CD 6B CE            	CALL	SETFILE
    2617/    CFB5 : CD C6 CD            	CALL	DIRWRITE	;now write the directory sector back out.
    2618/    CFB8 : CD 2D CF            	CALL	FINDNXT		;find the next file name.
    2619/    CFBB : C3 A4 CF            	JP	ERAFIL1		;and repeat process.
    2620/    CFBE :                     ;
    2621/    CFBE :                     ;   Look through the space allocation map (bit map) for the
    2622/    CFBE :                     ; next available block. Start searching at block number (BC-1).
    2623/    CFBE :                     ; The search procedure is to look for an empty block that is
    2624/    CFBE :                     ; before the starting block. If not empty, look at a later
    2625/    CFBE :                     ; block number. In this way, we return the closest empty block
    2626/    CFBE :                     ; on either side of the 'target' block number. This will speed
    2627/    CFBE :                     ; access on random devices. For serial devices, this should be
    2628/    CFBE :                     ; changed to look in the forward direction first and then start
    2629/    CFBE :                     ; at the front and search some more.
    2630/    CFBE :                     ;
    2631/    CFBE :                     ;   On return, (DE)= block number that is empty and (HL) =0
    2632/    CFBE :                     ; if no empry block was found.
    2633/    CFBE :                     ;
    2634/    CFBE : 50                  FNDSPACE: LD	D,B		;set (DE) as the block that is checked.
    2635/    CFBF : 59                  	LD	E,C
    2636/    CFC0 :                     ;
    2637/    CFC0 :                     ;   Look before target block. Registers (BC) are used as the lower
    2638/    CFC0 :                     ; pointer and (DE) as the upper pointer.
    2639/    CFC0 :                     ;
    2640/    CFC0 : 79                  FNDSPA1:LD	A,C		;is block 0 specified?
    2641/    CFC1 : B0                  	OR	B
    2642/    CFC2 : CA D1 CF            	JP	Z,FNDSPA2
    2643/    CFC5 : 0B                  	DEC	BC		;nope, check previous block.
    2644/    CFC6 : D5                  	PUSH	DE
    2645/    CFC7 : C5                  	PUSH	BC
    2646/    CFC8 : CD 35 CE            	CALL	CKBITMAP
    2647/    CFCB : 1F                  	RRA			;is this block empty?
    2648/    CFCC : D2 EC CF            	JP	NC,FNDSPA3	;yes. use this.
    2649/    CFCF :                     ;
    2650/    CFCF :                     ;   Note that the above logic gets the first block that it finds
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 46 - 2/13/2018 8:47:39


    2651/    CFCF :                     ; that is empty. Thus a file could be written 'backward' making
    2652/    CFCF :                     ; it very slow to access. This could be changed to look for the
    2653/    CFCF :                     ; first empty block and then continue until the start of this
    2654/    CFCF :                     ; empty space is located and then used that starting block.
    2655/    CFCF :                     ; This should help speed up access to some files especially on
    2656/    CFCF :                     ; a well used disk with lots of fairly small 'holes'.
    2657/    CFCF :                     ;
    2658/    CFCF : C1                  	POP	BC		;nope, check some more.
    2659/    CFD0 : D1                  	POP	DE
    2660/    CFD1 :                     ;
    2661/    CFD1 :                     ;   Now look after target block.
    2662/    CFD1 :                     ;
    2663/    CFD1 : 2A C6 D5            FNDSPA2:LD	HL,(DSKSIZE)	;is block (DE) within disk limits?
    2664/    CFD4 : 7B                  	LD	A,E
    2665/    CFD5 : 95                  	SUB	L
    2666/    CFD6 : 7A                  	LD	A,D
    2667/    CFD7 : 9C                  	SBC	A,H
    2668/    CFD8 : D2 F4 CF            	JP	NC,FNDSPA4
    2669/    CFDB : 13                  	INC	DE		;yes, move on to next one.
    2670/    CFDC : C5                  	PUSH	BC
    2671/    CFDD : D5                  	PUSH	DE
    2672/    CFDE : 42                  	LD	B,D
    2673/    CFDF : 4B                  	LD	C,E
    2674/    CFE0 : CD 35 CE            	CALL	CKBITMAP	;check it.
    2675/    CFE3 : 1F                  	RRA			;empty?
    2676/    CFE4 : D2 EC CF            	JP	NC,FNDSPA3
    2677/    CFE7 : D1                  	POP	DE		;nope, continue searching.
    2678/    CFE8 : C1                  	POP	BC
    2679/    CFE9 : C3 C0 CF            	JP	FNDSPA1
    2680/    CFEC :                     ;
    2681/    CFEC :                     ;   Empty block found. Set it as used and return with (HL)
    2682/    CFEC :                     ; pointing to it (true?).
    2683/    CFEC :                     ;
    2684/    CFEC : 17                  FNDSPA3:RLA			;reset byte.
    2685/    CFED : 3C                  	INC	A		;and set bit 0.
    2686/    CFEE : CD 64 CE            	CALL	STBMAP1		;update bit map.
    2687/    CFF1 : E1                  	POP	HL		;set return registers.
    2688/    CFF2 : D1                  	POP	DE
    2689/    CFF3 : C9                  	RET	
    2690/    CFF4 :                     ;
    2691/    CFF4 :                     ;   Free block was not found. If (BC) is not zero, then we have
    2692/    CFF4 :                     ; not checked all of the disk space.
    2693/    CFF4 :                     ;
    2694/    CFF4 : 79                  FNDSPA4:LD	A,C
    2695/    CFF5 : B0                  	OR	B
    2696/    CFF6 : C2 C0 CF            	JP	NZ,FNDSPA1
    2697/    CFF9 : 21 00 00            	LD	HL,0		;set 'not found' status.
    2698/    CFFC : C9                  	RET	
    2699/    CFFD :                     ;
    2700/    CFFD :                     ;   Move a complete fcb entry into the directory and write it.
    2701/    CFFD :                     ;
    2702/    CFFD : 0E 00               FCBSET:	LD	C,0
    2703/    CFFF : 1E 20               	LD	E,32		;length of each entry.
    2704/    D001 :                     ;
    2705/    D001 :                     ;   Move (E) bytes from the fcb pointed to by (PARAMS) into
    2706/    D001 :                     ; fcb in directory starting at relative byte (C). This updated
    2707/    D001 :                     ; directory buffer is then written to the disk.
    2708/    D001 :                     ;
    2709/    D001 : D5                  UPDATE:	PUSH	DE
    2710/    D002 : 06 00               	LD	B,0		;set (BC) to relative byte position.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 47 - 2/13/2018 8:47:39


    2711/    D004 : 2A 43 CB            	LD	HL,(PARAMS)	;get address of fcb.
    2712/    D007 : 09                  	ADD	HL,BC		;compute starting byte.
    2713/    D008 : EB                  	EX	DE,HL
    2714/    D009 : CD 5E CD            	CALL	FCB2HL		;get address of fcb to update in directory.
    2715/    D00C : C1                  	POP	BC		;set (C) to number of bytes to change.
    2716/    D00D : CD 4F CB            	CALL	DE2HL
    2717/    D010 : CD C3 CB            UPDATE1:CALL	TRKSEC		;determine the track and sector affected.
    2718/    D013 : C3 C6 CD            	JP	DIRWRITE	;then write this sector out.
    2719/    D016 :                     ;
    2720/    D016 :                     ;   Routine to change the name of all files on the disk with a
    2721/    D016 :                     ; specified name. The fcb contains the current name as the
    2722/    D016 :                     ; first 12 characters and the new name 16 bytes into the fcb.
    2723/    D016 :                     ;
    2724/    D016 : CD 54 CD            CHGNAMES: CALL	CHKWPRT		;check for a write protected disk.
    2725/    D019 : 0E 0C               	LD	C,12		;match first 12 bytes of fcb only.
    2726/    D01B : CD 18 CF            	CALL	FINDFST		;get first name.
    2727/    D01E : 2A 43 CB            	LD	HL,(PARAMS)	;get address of fcb.
    2728/    D021 : 7E                  	LD	A,(HL)		;get user number.
    2729/    D022 : 11 10 00            	LD	DE,16		;move over to desired name.
    2730/    D025 : 19                  	ADD	HL,DE
    2731/    D026 : 77                  	LD	(HL),A		;keep same user number.
    2732/    D027 : CD F5 CD            CHGNAM1:CALL	CKFILPOS	;any matching file found?
    2733/    D02A : C8                  	RET	Z		;no, we must be done.
    2734/    D02B : CD 44 CD            	CALL	CHKROFL		;check for read only file.
    2735/    D02E : 0E 10               	LD	C,16		;start 16 bytes into fcb.
    2736/    D030 : 1E 0C               	LD	E,12		;and update the first 12 bytes of directory.
    2737/    D032 : CD 01 D0            	CALL	UPDATE
    2738/    D035 : CD 2D CF            	CALL	FINDNXT		;get te next file name.
    2739/    D038 : C3 27 D0            	JP	CHGNAM1		;and continue.
    2740/    D03B :                     ;
    2741/    D03B :                     ;   Update a files attributes. The procedure is to search for
    2742/    D03B :                     ; every file with the same name as shown in fcb (ignoring bit 7)
    2743/    D03B :                     ; and then to update it (which includes bit 7). No other changes
    2744/    D03B :                     ; are made.
    2745/    D03B :                     ;
    2746/    D03B : 0E 0C               SAVEATTR: LD	C,12		;match first 12 bytes.
    2747/    D03D : CD 18 CF            	CALL	FINDFST		;look for first filename.
    2748/    D040 : CD F5 CD            SAVATR1:CALL	CKFILPOS	;was one found?
    2749/    D043 : C8                  	RET	Z		;nope, we must be done.
    2750/    D044 : 0E 00               	LD	C,0		;yes, update the first 12 bytes now.
    2751/    D046 : 1E 0C               	LD	E,12
    2752/    D048 : CD 01 D0            	CALL	UPDATE		;update filename and write directory.
    2753/    D04B : CD 2D CF            	CALL	FINDNXT		;and get the next file.
    2754/    D04E : C3 40 D0            	JP	SAVATR1		;then continue until done.
    2755/    D051 :                     ;
    2756/    D051 :                     ;  Open a file (name specified in fcb).
    2757/    D051 :                     ;
    2758/    D051 : 0E 0F               OPENIT:	LD	C,15		;compare the first 15 bytes.
    2759/    D053 : CD 18 CF            	CALL	FINDFST		;get the first one in directory.
    2760/    D056 : CD F5 CD            	CALL	CKFILPOS	;any at all?
    2761/    D059 : C8                  	RET	Z
    2762/    D05A : CD A6 CC            OPENIT1:CALL	SETEXT		;point to extent byte within users fcb.
    2763/    D05D : 7E                  	LD	A,(HL)		;and get it.
    2764/    D05E : F5                  	PUSH	AF		;save it and address.
    2765/    D05F : E5                  	PUSH	HL
    2766/    D060 : CD 5E CD            	CALL	FCB2HL		;point to fcb in directory.
    2767/    D063 : EB                  	EX	DE,HL
    2768/    D064 : 2A 43 CB            	LD	HL,(PARAMS)	;this is the users copy.
    2769/    D067 : 0E 20               	LD	C,32		;move it into users space.
    2770/    D069 : D5                  	PUSH	DE
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 48 - 2/13/2018 8:47:39


    2771/    D06A : CD 4F CB            	CALL	DE2HL
    2772/    D06D : CD 78 CD            	CALL	SETS2B7		;set bit 7 in 's2' byte (unmodified).
    2773/    D070 : D1                  	POP	DE		;now get the extent byte from this fcb.
    2774/    D071 : 21 0C 00            	LD	HL,12
    2775/    D074 : 19                  	ADD	HL,DE
    2776/    D075 : 4E                  	LD	C,(HL)		;into (C).
    2777/    D076 : 21 0F 00            	LD	HL,15		;now get the record count byte into (B).
    2778/    D079 : 19                  	ADD	HL,DE
    2779/    D07A : 46                  	LD	B,(HL)
    2780/    D07B : E1                  	POP	HL		;keep the same extent as the user had originally.
    2781/    D07C : F1                  	POP	AF
    2782/    D07D : 77                  	LD	(HL),A
    2783/    D07E : 79                  	LD	A,C		;is it the same as in the directory fcb?
    2784/    D07F : BE                  	CP	(HL)
    2785/    D080 : 78                  	LD	A,B		;if yes, then use the same record count.
    2786/    D081 : CA 8B D0            	JP	Z,OPENIT2
    2787/    D084 : 3E 00               	LD	A,0		;if the user specified an extent greater than
    2788/    D086 : DA 8B D0            	JP	C,OPENIT2	;the one in the directory, then set record count to 0.
    2789/    D089 : 3E 80               	LD	A,128		;otherwise set to maximum.
    2790/    D08B : 2A 43 CB            OPENIT2:LD	HL,(PARAMS)	;set record count in users fcb to (A).
    2791/    D08E : 11 0F 00            	LD	DE,15
    2792/    D091 : 19                  	ADD	HL,DE		;compute relative position.
    2793/    D092 : 77                  	LD	(HL),A		;and set the record count.
    2794/    D093 : C9                  	RET	
    2795/    D094 :                     ;
    2796/    D094 :                     ;   Move two bytes from (DE) to (HL) if (and only if) (HL)
    2797/    D094 :                     ; point to a zero value (16 bit).
    2798/    D094 :                     ;   Return with zero flag set it (DE) was moved. Registers (DE)
    2799/    D094 :                     ; and (HL) are not changed. However (A) is.
    2800/    D094 :                     ;
    2801/    D094 : 7E                  MOVEWORD: LD	A,(HL)		;check for a zero word.
    2802/    D095 : 23                  	INC	HL
    2803/    D096 : B6                  	OR	(HL)		;both bytes zero?
    2804/    D097 : 2B                  	DEC	HL
    2805/    D098 : C0                  	RET	NZ		;nope, just return.
    2806/    D099 : 1A                  	LD	A,(DE)		;yes, move two bytes from (DE) into
    2807/    D09A : 77                  	LD	(HL),A		;this zero space.
    2808/    D09B : 13                  	INC	DE
    2809/    D09C : 23                  	INC	HL
    2810/    D09D : 1A                  	LD	A,(DE)
    2811/    D09E : 77                  	LD	(HL),A
    2812/    D09F : 1B                  	DEC	DE		;don't disturb these registers.
    2813/    D0A0 : 2B                  	DEC	HL
    2814/    D0A1 : C9                  	RET	
    2815/    D0A2 :                     ;
    2816/    D0A2 :                     ;   Get here to close a file specified by (fcb).
    2817/    D0A2 :                     ;
    2818/    D0A2 : AF                  CLOSEIT:XOR	A		;clear status and file position bytes.
    2819/    D0A3 : 32 45 CB            	LD	(STATUS),A
    2820/    D0A6 : 32 EA D5            	LD	(FILEPOS),A
    2821/    D0A9 : 32 EB D5            	LD	(FILEPOS+1),A
    2822/    D0AC : CD 1E CD            	CALL	GETWPRT		;get write protect bit for this drive.
    2823/    D0AF : C0                  	RET	NZ		;just return if it is set.
    2824/    D0B0 : CD 69 CD            	CALL	GETS2		;else get the 's2' byte.
    2825/    D0B3 : E6 80               	AND	80H		;and look at bit 7 (file unmodified?).
    2826/    D0B5 : C0                  	RET	NZ		;just return if set.
    2827/    D0B6 : 0E 0F               	LD	C,15		;else look up this file in directory.
    2828/    D0B8 : CD 18 CF            	CALL	FINDFST
    2829/    D0BB : CD F5 CD            	CALL	CKFILPOS	;was it found?
    2830/    D0BE : C8                  	RET	Z		;just return if not.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 49 - 2/13/2018 8:47:39


    2831/    D0BF : 01 10 00            	LD	BC,16		;set (HL) pointing to records used section.
    2832/    D0C2 : CD 5E CD            	CALL	FCB2HL
    2833/    D0C5 : 09                  	ADD	HL,BC
    2834/    D0C6 : EB                  	EX	DE,HL
    2835/    D0C7 : 2A 43 CB            	LD	HL,(PARAMS)	;do the same for users specified fcb.
    2836/    D0CA : 09                  	ADD	HL,BC
    2837/    D0CB : 0E 10               	LD	C,16		;this many bytes are present in this extent.
    2838/    D0CD : 3A DD D5            CLOSEIT1: LD	A,(BIGDISK)	;8 or 16 bit record numbers?
    2839/    D0D0 : B7                  	OR	A
    2840/    D0D1 : CA E8 D0            	JP	Z,CLOSEIT4
    2841/    D0D4 : 7E                  	LD	A,(HL)		;just 8 bit. Get one from users fcb.
    2842/    D0D5 : B7                  	OR	A
    2843/    D0D6 : 1A                  	LD	A,(DE)		;now get one from directory fcb.
    2844/    D0D7 : C2 DB D0            	JP	NZ,CLOSEIT2
    2845/    D0DA : 77                  	LD	(HL),A		;users byte was zero. Update from directory.
    2846/    D0DB : B7                  CLOSEIT2: OR	A
    2847/    D0DC : C2 E1 D0            	JP	NZ,CLOSEIT3
    2848/    D0DF : 7E                  	LD	A,(HL)		;directories byte was zero, update from users fcb.
    2849/    D0E0 : 12                  	LD	(DE),A
    2850/    D0E1 : BE                  CLOSEIT3: CP	(HL)		;if neither one of these bytes were zero,
    2851/    D0E2 : C2 1F D1            	JP	NZ,CLOSEIT7	;then close error if they are not the same.
    2852/    D0E5 : C3 FD D0            	JP	CLOSEIT5	;ok so far, get to next byte in fcbs.
    2853/    D0E8 : CD 94 D0            CLOSEIT4: CALL	MOVEWORD	;update users fcb if it is zero.
    2854/    D0EB : EB                  	EX	DE,HL
    2855/    D0EC : CD 94 D0            	CALL	MOVEWORD	;update directories fcb if it is zero.
    2856/    D0EF : EB                  	EX	DE,HL
    2857/    D0F0 : 1A                  	LD	A,(DE)		;if these two values are no different,
    2858/    D0F1 : BE                  	CP	(HL)		;then a close error occured.
    2859/    D0F2 : C2 1F D1            	JP	NZ,CLOSEIT7
    2860/    D0F5 : 13                  	INC	DE		;check second byte.
    2861/    D0F6 : 23                  	INC	HL
    2862/    D0F7 : 1A                  	LD	A,(DE)
    2863/    D0F8 : BE                  	CP	(HL)
    2864/    D0F9 : C2 1F D1            	JP	NZ,CLOSEIT7
    2865/    D0FC : 0D                  	DEC	C		;remember 16 bit values.
    2866/    D0FD : 13                  CLOSEIT5: INC	DE		;bump to next item in table.
    2867/    D0FE : 23                  	INC	HL
    2868/    D0FF : 0D                  	DEC	C		;there are 16 entries only.
    2869/    D100 : C2 CD D0            	JP	NZ,CLOSEIT1	;continue if more to do.
    2870/    D103 : 01 EC FF            	LD	BC,0FFECH	;backup 20 places (extent byte).
    2871/    D106 : 09                  	ADD	HL,BC
    2872/    D107 : EB                  	EX	DE,HL
    2873/    D108 : 09                  	ADD	HL,BC
    2874/    D109 : 1A                  	LD	A,(DE)
    2875/    D10A : BE                  	CP	(HL)		;directory's extent already greater than the
    2876/    D10B : DA 17 D1            	JP	C,CLOSEIT6	;users extent?
    2877/    D10E : 77                  	LD	(HL),A		;no, update directory extent.
    2878/    D10F : 01 03 00            	LD	BC,3		;and update the record count byte in
    2879/    D112 : 09                  	ADD	HL,BC		;directories fcb.
    2880/    D113 : EB                  	EX	DE,HL
    2881/    D114 : 09                  	ADD	HL,BC
    2882/    D115 : 7E                  	LD	A,(HL)		;get from user.
    2883/    D116 : 12                  	LD	(DE),A		;and put in directory.
    2884/    D117 : 3E FF               CLOSEIT6: LD	A,0FFH		;set 'was open and is now closed' byte.
    2885/    D119 : 32 D2 D5            	LD	(CLOSEFLG),A
    2886/    D11C : C3 10 D0            	JP	UPDATE1		;update the directory now.
    2887/    D11F : 21 45 CB            CLOSEIT7: LD	HL,STATUS	;set return status and then return.
    2888/    D122 : 35                  	DEC	(HL)
    2889/    D123 : C9                  	RET	
    2890/    D124 :                     ;
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 50 - 2/13/2018 8:47:39


    2891/    D124 :                     ;   Routine to get the next empty space in the directory. It
    2892/    D124 :                     ; will then be cleared for use.
    2893/    D124 :                     ;
    2894/    D124 : CD 54 CD            GETEMPTY: CALL	CHKWPRT		;make sure disk is not write protected.
    2895/    D127 : 2A 43 CB            	LD	HL,(PARAMS)	;save current parameters (fcb).
    2896/    D12A : E5                  	PUSH	HL
    2897/    D12B : 21 AC D5            	LD	HL,EMPTYFCB	;use special one for empty space.
    2898/    D12E : 22 43 CB            	LD	(PARAMS),HL
    2899/    D131 : 0E 01               	LD	C,1		;search for first empty spot in directory.
    2900/    D133 : CD 18 CF            	CALL	FINDFST		;(* only check first byte *)
    2901/    D136 : CD F5 CD            	CALL	CKFILPOS	;none?
    2902/    D139 : E1                  	POP	HL
    2903/    D13A : 22 43 CB            	LD	(PARAMS),HL	;restore original fcb address.
    2904/    D13D : C8                  	RET	Z		;return if no more space.
    2905/    D13E : EB                  	EX	DE,HL
    2906/    D13F : 21 0F 00            	LD	HL,15		;point to number of records for this file.
    2907/    D142 : 19                  	ADD	HL,DE
    2908/    D143 : 0E 11               	LD	C,17		;and clear all of this space.
    2909/    D145 : AF                  	XOR	A
    2910/    D146 : 77                  GETMT1:	LD	(HL),A
    2911/    D147 : 23                  	INC	HL
    2912/    D148 : 0D                  	DEC	C
    2913/    D149 : C2 46 D1            	JP	NZ,GETMT1
    2914/    D14C : 21 0D 00            	LD	HL,13		;clear the 's1' byte also.
    2915/    D14F : 19                  	ADD	HL,DE
    2916/    D150 : 77                  	LD	(HL),A
    2917/    D151 : CD 8C CD            	CALL	CHKNMBR		;keep (SCRATCH1) within bounds.
    2918/    D154 : CD FD CF            	CALL	FCBSET		;write out this fcb entry to directory.
    2919/    D157 : C3 78 CD            	JP	SETS2B7		;set 's2' byte bit 7 (unmodified at present).
    2920/    D15A :                     ;
    2921/    D15A :                     ;   Routine to close the current extent and open the next one
    2922/    D15A :                     ; for reading.
    2923/    D15A :                     ;
    2924/    D15A : AF                  GETNEXT:XOR	A
    2925/    D15B : 32 D2 D5            	LD	(CLOSEFLG),A	;clear close flag.
    2926/    D15E : CD A2 D0            	CALL	CLOSEIT		;close this extent.
    2927/    D161 : CD F5 CD            	CALL	CKFILPOS
    2928/    D164 : C8                  	RET	Z		;not there???
    2929/    D165 : 2A 43 CB            	LD	HL,(PARAMS)	;get extent byte.
    2930/    D168 : 01 0C 00            	LD	BC,12
    2931/    D16B : 09                  	ADD	HL,BC
    2932/    D16C : 7E                  	LD	A,(HL)		;and increment it.
    2933/    D16D : 3C                  	INC	A
    2934/    D16E : E6 1F               	AND	1FH		;keep within range 0-31.
    2935/    D170 : 77                  	LD	(HL),A
    2936/    D171 : CA 83 D1            	JP	Z,GTNEXT1	;overflow?
    2937/    D174 : 47                  	LD	B,A		;mask extent byte.
    2938/    D175 : 3A C5 D5            	LD	A,(EXTMASK)
    2939/    D178 : A0                  	AND	B
    2940/    D179 : 21 D2 D5            	LD	HL,CLOSEFLG	;check close flag (0ffh is ok).
    2941/    D17C : A6                  	AND	(HL)
    2942/    D17D : CA 8E D1            	JP	Z,GTNEXT2	;if zero, we must read in next extent.
    2943/    D180 : C3 AC D1            	JP	GTNEXT3		;else, it is already in memory.
    2944/    D183 : 01 02 00            GTNEXT1:LD	BC,2		;Point to the 's2' byte.
    2945/    D186 : 09                  	ADD	HL,BC
    2946/    D187 : 34                  	INC	(HL)		;and bump it.
    2947/    D188 : 7E                  	LD	A,(HL)		;too many extents?
    2948/    D189 : E6 0F               	AND	0FH
    2949/    D18B : CA B6 D1            	JP	Z,GTNEXT5	;yes, set error code.
    2950/    D18E :                     ;
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 51 - 2/13/2018 8:47:39


    2951/    D18E :                     ;   Get here to open the next extent.
    2952/    D18E :                     ;
    2953/    D18E : 0E 0F               GTNEXT2:LD	C,15		;set to check first 15 bytes of fcb.
    2954/    D190 : CD 18 CF            	CALL	FINDFST		;find the first one.
    2955/    D193 : CD F5 CD            	CALL	CKFILPOS	;none available?
    2956/    D196 : C2 AC D1            	JP	NZ,GTNEXT3
    2957/    D199 : 3A D3 D5            	LD	A,(RDWRTFLG)	;no extent present. Can we open an empty one?
    2958/    D19C : 3C                  	INC	A		;0ffh means reading (so not possible).
    2959/    D19D : CA B6 D1            	JP	Z,GTNEXT5	;or an error.
    2960/    D1A0 : CD 24 D1            	CALL	GETEMPTY	;we are writing, get an empty entry.
    2961/    D1A3 : CD F5 CD            	CALL	CKFILPOS	;none?
    2962/    D1A6 : CA B6 D1            	JP	Z,GTNEXT5	;error if true.
    2963/    D1A9 : C3 AF D1            	JP	GTNEXT4		;else we are almost done.
    2964/    D1AC : CD 5A D0            GTNEXT3:CALL	OPENIT1		;open this extent.
    2965/    D1AF : CD BB CC            GTNEXT4:CALL	STRDATA		;move in updated data (rec #, extent #, etc.)
    2966/    D1B2 : AF                  	XOR	A		;clear status and return.
    2967/    D1B3 : C3 01 CB            	JP	SETSTAT
    2968/    D1B6 :                     ;
    2969/    D1B6 :                     ;   Error in extending the file. Too many extents were needed
    2970/    D1B6 :                     ; or not enough space on the disk.
    2971/    D1B6 :                     ;
    2972/    D1B6 : CD 05 CB            GTNEXT5:CALL	IOERR1		;set error code, clear bit 7 of 's2'
    2973/    D1B9 : C3 78 CD            	JP	SETS2B7		;so this is not written on a close.
    2974/    D1BC :                     ;
    2975/    D1BC :                     ;   Read a sequential file.
    2976/    D1BC :                     ;
    2977/    D1BC : 3E 01               RDSEQ:	LD	A,1		;set sequential access mode.
    2978/    D1BE : 32 D5 D5            	LD	(MODE),A
    2979/    D1C1 : 3E FF               RDSEQ1:	LD	A,0FFH		;don't allow reading unwritten space.
    2980/    D1C3 : 32 D3 D5            	LD	(RDWRTFLG),A
    2981/    D1C6 : CD BB CC            	CALL	STRDATA		;put rec# and ext# into fcb.
    2982/    D1C9 : 3A E3 D5            	LD	A,(SAVNREC)	;get next record to read.
    2983/    D1CC : 21 E1 D5            	LD	HL,SAVNXT	;get number of records in extent.
    2984/    D1CF : BE                  	CP	(HL)		;within this extent?
    2985/    D1D0 : DA E6 D1            	JP	C,RDSEQ2
    2986/    D1D3 : FE 80               	CP	128		;no. Is this extent fully used?
    2987/    D1D5 : C2 FB D1            	JP	NZ,RDSEQ3	;no. End-of-file.
    2988/    D1D8 : CD 5A D1            	CALL	GETNEXT		;yes, open the next one.
    2989/    D1DB : AF                  	XOR	A		;reset next record to read.
    2990/    D1DC : 32 E3 D5            	LD	(SAVNREC),A
    2991/    D1DF : 3A 45 CB            	LD	A,(STATUS)	;check on open, successful?
    2992/    D1E2 : B7                  	OR	A
    2993/    D1E3 : C2 FB D1            	JP	NZ,RDSEQ3	;no, error.
    2994/    D1E6 : CD 77 CC            RDSEQ2:	CALL	COMBLK		;ok. compute block number to read.
    2995/    D1E9 : CD 84 CC            	CALL	CHKBLK		;check it. Within bounds?
    2996/    D1EC : CA FB D1            	JP	Z,RDSEQ3	;no, error.
    2997/    D1EF : CD 8A CC            	CALL	LOGICAL		;convert (BLKNMBR) to logical sector (128 byte).
    2998/    D1F2 : CD D1 CB            	CALL	TRKSEC1		;set the track and sector for this block #.
    2999/    D1F5 : CD B2 CB            	CALL	DOREAD		;and read it.
    3000/    D1F8 : C3 D2 CC            	JP	SETNREC		;and set the next record to be accessed.
    3001/    D1FB :                     ;
    3002/    D1FB :                     ;   Read error occured. Set status and return.
    3003/    D1FB :                     ;
    3004/    D1FB : C3 05 CB            RDSEQ3:	JP	IOERR1
    3005/    D1FE :                     ;
    3006/    D1FE :                     ;   Write the next sequential record.
    3007/    D1FE :                     ;
    3008/    D1FE : 3E 01               WTSEQ:	LD	A,1		;set sequential access mode.
    3009/    D200 : 32 D5 D5            	LD	(MODE),A
    3010/    D203 : 3E 00               WTSEQ1:	LD	A,0		;allow an addition empty extent to be opened.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 52 - 2/13/2018 8:47:39


    3011/    D205 : 32 D3 D5            	LD	(RDWRTFLG),A
    3012/    D208 : CD 54 CD            	CALL	CHKWPRT		;check write protect status.
    3013/    D20B : 2A 43 CB            	LD	HL,(PARAMS)
    3014/    D20E : CD 47 CD            	CALL	CKROF1		;check for read only file, (HL) already set to fcb.
    3015/    D211 : CD BB CC            	CALL	STRDATA		;put updated data into fcb.
    3016/    D214 : 3A E3 D5            	LD	A,(SAVNREC)	;get record number to write.
    3017/    D217 : FE 80               	CP	128		;within range?
    3018/    D219 : D2 05 CB            	JP	NC,IOERR1	;no, error(?).
    3019/    D21C : CD 77 CC            	CALL	COMBLK		;compute block number.
    3020/    D21F : CD 84 CC            	CALL	CHKBLK		;check number.
    3021/    D222 : 0E 00               	LD	C,0		;is there one to write to?
    3022/    D224 : C2 6E D2            	JP	NZ,WTSEQ6	;yes, go do it.
    3023/    D227 : CD 3E CC            	CALL	GETBLOCK	;get next block number within fcb to use.
    3024/    D22A : 32 D7 D5            	LD	(RELBLOCK),A	;and save.
    3025/    D22D : 01 00 00            	LD	BC,0		;start looking for space from the start
    3026/    D230 : B7                  	OR	A		;if none allocated as yet.
    3027/    D231 : CA 3B D2            	JP	Z,WTSEQ2
    3028/    D234 : 4F                  	LD	C,A		;extract previous block number from fcb
    3029/    D235 : 0B                  	DEC	BC		;so we can be closest to it.
    3030/    D236 : CD 5E CC            	CALL	EXTBLK
    3031/    D239 : 44                  	LD	B,H
    3032/    D23A : 4D                  	LD	C,L
    3033/    D23B : CD BE CF            WTSEQ2:	CALL	FNDSPACE	;find the next empty block nearest number (BC).
    3034/    D23E : 7D                  	LD	A,L		;check for a zero number.
    3035/    D23F : B4                  	OR	H
    3036/    D240 : C2 48 D2            	JP	NZ,WTSEQ3
    3037/    D243 : 3E 02               	LD	A,2		;no more space?
    3038/    D245 : C3 01 CB            	JP	SETSTAT
    3039/    D248 : 22 E5 D5            WTSEQ3:	LD	(BLKNMBR),HL	;save block number to access.
    3040/    D24B : EB                  	EX	DE,HL		;put block number into (DE).
    3041/    D24C : 2A 43 CB            	LD	HL,(PARAMS)	;now we must update the fcb for this
    3042/    D24F : 01 10 00            	LD	BC,16		;newly allocated block.
    3043/    D252 : 09                  	ADD	HL,BC
    3044/    D253 : 3A DD D5            	LD	A,(BIGDISK)	;8 or 16 bit block numbers?
    3045/    D256 : B7                  	OR	A
    3046/    D257 : 3A D7 D5            	LD	A,(RELBLOCK)	;(* update this entry *)
    3047/    D25A : CA 64 D2            	JP	Z,WTSEQ4	;zero means 16 bit ones.
    3048/    D25D : CD 64 CD            	CALL	ADDA2HL		;(HL)=(HL)+(A)
    3049/    D260 : 73                  	LD	(HL),E		;store new block number.
    3050/    D261 : C3 6C D2            	JP	WTSEQ5
    3051/    D264 : 4F                  WTSEQ4:	LD	C,A		;compute spot in this 16 bit table.
    3052/    D265 : 06 00               	LD	B,0
    3053/    D267 : 09                  	ADD	HL,BC
    3054/    D268 : 09                  	ADD	HL,BC
    3055/    D269 : 73                  	LD	(HL),E		;stuff block number (DE) there.
    3056/    D26A : 23                  	INC	HL
    3057/    D26B : 72                  	LD	(HL),D
    3058/    D26C : 0E 02               WTSEQ5:	LD	C,2		;set (C) to indicate writing to un-used disk space.
    3059/    D26E : 3A 45 CB            WTSEQ6:	LD	A,(STATUS)	;are we ok so far?
    3060/    D271 : B7                  	OR	A
    3061/    D272 : C0                  	RET	NZ
    3062/    D273 : C5                  	PUSH	BC		;yes, save write flag for bios (register C).
    3063/    D274 : CD 8A CC            	CALL	LOGICAL		;convert (BLKNMBR) over to loical sectors.
    3064/    D277 : 3A D5 D5            	LD	A,(MODE)	;get access mode flag (1=sequential,
    3065/    D27A : 3D                  	DEC	A		;0=random, 2=special?).
    3066/    D27B : 3D                  	DEC	A
    3067/    D27C : C2 BB D2            	JP	NZ,WTSEQ9
    3068/    D27F :                     ;
    3069/    D27F :                     ;   Special random i/o from function #40. Maybe for M/PM, but the
    3070/    D27F :                     ; current block, if it has not been written to, will be zeroed
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 53 - 2/13/2018 8:47:39


    3071/    D27F :                     ; out and then written (reason?).
    3072/    D27F :                     ;
    3073/    D27F : C1                  	POP	BC
    3074/    D280 : C5                  	PUSH	BC
    3075/    D281 : 79                  	LD	A,C		;get write status flag (2=writing unused space).
    3076/    D282 : 3D                  	DEC	A
    3077/    D283 : 3D                  	DEC	A
    3078/    D284 : C2 BB D2            	JP	NZ,WTSEQ9
    3079/    D287 : E5                  	PUSH	HL
    3080/    D288 : 2A B9 D5            	LD	HL,(DIRBUF)	;zero out the directory buffer.
    3081/    D28B : 57                  	LD	D,A		;note that (A) is zero here.
    3082/    D28C : 77                  WTSEQ7:	LD	(HL),A
    3083/    D28D : 23                  	INC	HL
    3084/    D28E : 14                  	INC	D		;do 128 bytes.
    3085/    D28F : F2 8C D2            	JP	P,WTSEQ7
    3086/    D292 : CD E0 CD            	CALL	DIRDMA		;tell the bios the dma address for directory access.
    3087/    D295 : 2A E7 D5            	LD	HL,(LOGSECT)	;get sector that starts current block.
    3088/    D298 : 0E 02               	LD	C,2		;set 'writing to unused space' flag.
    3089/    D29A : 22 E5 D5            WTSEQ8:	LD	(BLKNMBR),HL	;save sector to write.
    3090/    D29D : C5                  	PUSH	BC
    3091/    D29E : CD D1 CB            	CALL	TRKSEC1		;determine its track and sector numbers.
    3092/    D2A1 : C1                  	POP	BC
    3093/    D2A2 : CD B8 CB            	CALL	DOWRITE		;now write out 128 bytes of zeros.
    3094/    D2A5 : 2A E5 D5            	LD	HL,(BLKNMBR)	;get sector number.
    3095/    D2A8 : 0E 00               	LD	C,0		;set normal write flag.
    3096/    D2AA : 3A C4 D5            	LD	A,(BLKMASK)	;determine if we have written the entire
    3097/    D2AD : 47                  	LD	B,A		;physical block.
    3098/    D2AE : A5                  	AND	L
    3099/    D2AF : B8                  	CP	B
    3100/    D2B0 : 23                  	INC	HL		;prepare for the next one.
    3101/    D2B1 : C2 9A D2            	JP	NZ,WTSEQ8	;continue until (BLKMASK+1) sectors written.
    3102/    D2B4 : E1                  	POP	HL		;reset next sector number.
    3103/    D2B5 : 22 E5 D5            	LD	(BLKNMBR),HL
    3104/    D2B8 : CD DA CD            	CALL	DEFDMA		;and reset dma address.
    3105/    D2BB :                     ;
    3106/    D2BB :                     ;   Normal disk write. Set the desired track and sector then
    3107/    D2BB :                     ; do the actual write.
    3108/    D2BB :                     ;
    3109/    D2BB : CD D1 CB            WTSEQ9:	CALL	TRKSEC1		;determine track and sector for this write.
    3110/    D2BE : C1                  	POP	BC		;get write status flag.
    3111/    D2BF : C5                  	PUSH	BC
    3112/    D2C0 : CD B8 CB            	CALL	DOWRITE		;and write this out.
    3113/    D2C3 : C1                  	POP	BC
    3114/    D2C4 : 3A E3 D5            	LD	A,(SAVNREC)	;get number of records in file.
    3115/    D2C7 : 21 E1 D5            	LD	HL,SAVNXT	;get last record written.
    3116/    D2CA : BE                  	CP	(HL)
    3117/    D2CB : DA D2 D2            	JP	C,WTSEQ10
    3118/    D2CE : 77                  	LD	(HL),A		;we have to update record count.
    3119/    D2CF : 34                  	INC	(HL)
    3120/    D2D0 : 0E 02               	LD	C,2
    3121/    D2D2 :                     ;
    3122/    D2D2 :                     ;*   This area has been patched to correct disk update problem
    3123/    D2D2 :                     ;* when using blocking and de-blocking in the BIOS.
    3124/    D2D2 :                     ;
    3125/    D2D2 : 00                  WTSEQ10:NOP			;was 'dcr c'
    3126/    D2D3 : 00                  	NOP			;was 'dcr c'
    3127/    D2D4 : 21 00 00            	LD	HL,0		;was 'jnz wtseq99'
    3128/    D2D7 :                     ;
    3129/    D2D7 :                     ; *   End of patch.
    3130/    D2D7 :                     ;
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 54 - 2/13/2018 8:47:39


    3131/    D2D7 : F5                  	PUSH	AF
    3132/    D2D8 : CD 69 CD            	CALL	GETS2		;set 'extent written to' flag.
    3133/    D2DB : E6 7F               	AND	7FH		;(* clear bit 7 *)
    3134/    D2DD : 77                  	LD	(HL),A
    3135/    D2DE : F1                  	POP	AF		;get record count for this extent.
    3136/    D2DF : FE 7F               WTSEQ99:CP	127		;is it full?
    3137/    D2E1 : C2 00 D3            	JP	NZ,WTSEQ12
    3138/    D2E4 : 3A D5 D5            	LD	A,(MODE)	;yes, are we in sequential mode?
    3139/    D2E7 : FE 01               	CP	1
    3140/    D2E9 : C2 00 D3            	JP	NZ,WTSEQ12
    3141/    D2EC : CD D2 CC            	CALL	SETNREC		;yes, set next record number.
    3142/    D2EF : CD 5A D1            	CALL	GETNEXT		;and get next empty space in directory.
    3143/    D2F2 : 21 45 CB            	LD	HL,STATUS	;ok?
    3144/    D2F5 : 7E                  	LD	A,(HL)
    3145/    D2F6 : B7                  	OR	A
    3146/    D2F7 : C2 FE D2            	JP	NZ,WTSEQ11
    3147/    D2FA : 3D                  	DEC	A		;yes, set record count to -1.
    3148/    D2FB : 32 E3 D5            	LD	(SAVNREC),A
    3149/    D2FE : 36 00               WTSEQ11:LD	(HL),0		;clear status.
    3150/    D300 : C3 D2 CC            WTSEQ12:JP	SETNREC		;set next record to access.
    3151/    D303 :                     ;
    3152/    D303 :                     ;   For random i/o, set the fcb for the desired record number
    3153/    D303 :                     ; based on the 'r0,r1,r2' bytes. These bytes in the fcb are
    3154/    D303 :                     ; used as follows:
    3155/    D303 :                     ;
    3156/    D303 :                     ;       fcb+35            fcb+34            fcb+33
    3157/    D303 :                     ;  |     'r-2'      |      'r-1'      |      'r-0'     |
    3158/    D303 :                     ;  |7             0 | 7             0 | 7             0|
    3159/    D303 :                     ;  |0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0 | 0 0 0 0 0 0 0 0|
    3160/    D303 :                     ;  |    overflow   | | extra |  extent   |   record #  |
    3161/    D303 :                     ;  | ______________| |_extent|__number___|_____________|
    3162/    D303 :                     ;                     also 's2'
    3163/    D303 :                     ;
    3164/    D303 :                     ;   On entry, register (C) contains 0ffh if this is a read
    3165/    D303 :                     ; and thus we can not access unwritten disk space. Otherwise,
    3166/    D303 :                     ; another extent will be opened (for writing) if required.
    3167/    D303 :                     ;
    3168/    D303 : AF                  POSITION: XOR	A		;set random i/o flag.
    3169/    D304 : 32 D5 D5            	LD	(MODE),A
    3170/    D307 :                     ;
    3171/    D307 :                     ;   Special entry (function #40). M/PM ?
    3172/    D307 :                     ;
    3173/    D307 : C5                  POSITN1:PUSH	BC		;save read/write flag.
    3174/    D308 : 2A 43 CB            	LD	HL,(PARAMS)	;get address of fcb.
    3175/    D30B : EB                  	EX	DE,HL
    3176/    D30C : 21 21 00            	LD	HL,33		;now get byte 'r0'.
    3177/    D30F : 19                  	ADD	HL,DE
    3178/    D310 : 7E                  	LD	A,(HL)
    3179/    D311 : E6 7F               	AND	7FH		;keep bits 0-6 for the record number to access.
    3180/    D313 : F5                  	PUSH	AF
    3181/    D314 : 7E                  	LD	A,(HL)		;now get bit 7 of 'r0' and bits 0-3 of 'r1'.
    3182/    D315 : 17                  	RLA	
    3183/    D316 : 23                  	INC	HL
    3184/    D317 : 7E                  	LD	A,(HL)
    3185/    D318 : 17                  	RLA	
    3186/    D319 : E6 1F               	AND	1FH		;and save this in bits 0-4 of (C).
    3187/    D31B : 4F                  	LD	C,A		;this is the extent byte.
    3188/    D31C : 7E                  	LD	A,(HL)		;now get the extra extent byte.
    3189/    D31D : 1F                  	RRA	
    3190/    D31E : 1F                  	RRA	
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 55 - 2/13/2018 8:47:39


    3191/    D31F : 1F                  	RRA	
    3192/    D320 : 1F                  	RRA	
    3193/    D321 : E6 0F               	AND	0FH
    3194/    D323 : 47                  	LD	B,A		;and save it in (B).
    3195/    D324 : F1                  	POP	AF		;get record number back to (A).
    3196/    D325 : 23                  	INC	HL		;check overflow byte 'r2'.
    3197/    D326 : 6E                  	LD	L,(HL)
    3198/    D327 : 2C                  	INC	L
    3199/    D328 : 2D                  	DEC	L
    3200/    D329 : 2E 06               	LD	L,6		;prepare for error.
    3201/    D32B : C2 8B D3            	JP	NZ,POSITN5	;out of disk space error.
    3202/    D32E : 21 20 00            	LD	HL,32		;store record number into fcb.
    3203/    D331 : 19                  	ADD	HL,DE
    3204/    D332 : 77                  	LD	(HL),A
    3205/    D333 : 21 0C 00            	LD	HL,12		;and now check the extent byte.
    3206/    D336 : 19                  	ADD	HL,DE
    3207/    D337 : 79                  	LD	A,C
    3208/    D338 : 96                  	SUB	(HL)		;same extent as before?
    3209/    D339 : C2 47 D3            	JP	NZ,POSITN2
    3210/    D33C : 21 0E 00            	LD	HL,14		;yes, check extra extent byte 's2' also.
    3211/    D33F : 19                  	ADD	HL,DE
    3212/    D340 : 78                  	LD	A,B
    3213/    D341 : 96                  	SUB	(HL)
    3214/    D342 : E6 7F               	AND	7FH
    3215/    D344 : CA 7F D3            	JP	Z,POSITN3	;same, we are almost done then.
    3216/    D347 :                     ;
    3217/    D347 :                     ;  Get here when another extent is required.
    3218/    D347 :                     ;
    3219/    D347 : C5                  POSITN2:PUSH	BC
    3220/    D348 : D5                  	PUSH	DE
    3221/    D349 : CD A2 D0            	CALL	CLOSEIT		;close current extent.
    3222/    D34C : D1                  	POP	DE
    3223/    D34D : C1                  	POP	BC
    3224/    D34E : 2E 03               	LD	L,3		;prepare for error.
    3225/    D350 : 3A 45 CB            	LD	A,(STATUS)
    3226/    D353 : 3C                  	INC	A
    3227/    D354 : CA 84 D3            	JP	Z,POSITN4	;close error.
    3228/    D357 : 21 0C 00            	LD	HL,12		;put desired extent into fcb now.
    3229/    D35A : 19                  	ADD	HL,DE
    3230/    D35B : 71                  	LD	(HL),C
    3231/    D35C : 21 0E 00            	LD	HL,14		;and store extra extent byte 's2'.
    3232/    D35F : 19                  	ADD	HL,DE
    3233/    D360 : 70                  	LD	(HL),B
    3234/    D361 : CD 51 D0            	CALL	OPENIT		;try and get this extent.
    3235/    D364 : 3A 45 CB            	LD	A,(STATUS)	;was it there?
    3236/    D367 : 3C                  	INC	A
    3237/    D368 : C2 7F D3            	JP	NZ,POSITN3
    3238/    D36B : C1                  	POP	BC		;no. can we create a new one (writing?).
    3239/    D36C : C5                  	PUSH	BC
    3240/    D36D : 2E 04               	LD	L,4		;prepare for error.
    3241/    D36F : 0C                  	INC	C
    3242/    D370 : CA 84 D3            	JP	Z,POSITN4	;nope, reading unwritten space error.
    3243/    D373 : CD 24 D1            	CALL	GETEMPTY	;yes we can, try to find space.
    3244/    D376 : 2E 05               	LD	L,5		;prepare for error.
    3245/    D378 : 3A 45 CB            	LD	A,(STATUS)
    3246/    D37B : 3C                  	INC	A
    3247/    D37C : CA 84 D3            	JP	Z,POSITN4	;out of space?
    3248/    D37F :                     ;
    3249/    D37F :                     ;   Normal return location. Clear error code and return.
    3250/    D37F :                     ;
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 56 - 2/13/2018 8:47:39


    3251/    D37F : C1                  POSITN3:POP	BC		;restore stack.
    3252/    D380 : AF                  	XOR	A		;and clear error code byte.
    3253/    D381 : C3 01 CB            	JP	SETSTAT
    3254/    D384 :                     ;
    3255/    D384 :                     ;   Error. Set the 's2' byte to indicate this (why?).
    3256/    D384 :                     ;
    3257/    D384 : E5                  POSITN4:PUSH	HL
    3258/    D385 : CD 69 CD            	CALL	GETS2
    3259/    D388 : 36 C0               	LD	(HL),0C0H
    3260/    D38A : E1                  	POP	HL
    3261/    D38B :                     ;
    3262/    D38B :                     ;   Return with error code (presently in L).
    3263/    D38B :                     ;
    3264/    D38B : C1                  POSITN5:POP	BC
    3265/    D38C : 7D                  	LD	A,L		;get error code.
    3266/    D38D : 32 45 CB            	LD	(STATUS),A
    3267/    D390 : C3 78 CD            	JP	SETS2B7
    3268/    D393 :                     ;
    3269/    D393 :                     ;   Read a random record.
    3270/    D393 :                     ;
    3271/    D393 : 0E FF               READRAN:LD	C,0FFH		;set 'read' status.
    3272/    D395 : CD 03 D3            	CALL	POSITION	;position the file to proper record.
    3273/    D398 : CC C1 D1            	CALL	Z,RDSEQ1	;and read it as usual (if no errors).
    3274/    D39B : C9                  	RET	
    3275/    D39C :                     ;
    3276/    D39C :                     ;   Write to a random record.
    3277/    D39C :                     ;
    3278/    D39C : 0E 00               WRITERAN: LD	C,0		;set 'writing' flag.
    3279/    D39E : CD 03 D3            	CALL	POSITION	;position the file to proper record.
    3280/    D3A1 : CC 03 D2            	CALL	Z,WTSEQ1	;and write as usual (if no errors).
    3281/    D3A4 : C9                  	RET	
    3282/    D3A5 :                     ;
    3283/    D3A5 :                     ;   Compute the random record number. Enter with (HL) pointing
    3284/    D3A5 :                     ; to a fcb an (DE) contains a relative location of a record
    3285/    D3A5 :                     ; number. On exit, (C) contains the 'r0' byte, (B) the 'r1'
    3286/    D3A5 :                     ; byte, and (A) the 'r2' byte.
    3287/    D3A5 :                     ;
    3288/    D3A5 :                     ;   On return, the zero flag is set if the record is within
    3289/    D3A5 :                     ; bounds. Otherwise, an overflow occured.
    3290/    D3A5 :                     ;
    3291/    D3A5 : EB                  COMPRAND: EX	DE,HL		;save fcb pointer in (DE).
    3292/    D3A6 : 19                  	ADD	HL,DE		;compute relative position of record #.
    3293/    D3A7 : 4E                  	LD	C,(HL)		;get record number into (BC).
    3294/    D3A8 : 06 00               	LD	B,0
    3295/    D3AA : 21 0C 00            	LD	HL,12		;now get extent.
    3296/    D3AD : 19                  	ADD	HL,DE
    3297/    D3AE : 7E                  	LD	A,(HL)		;compute (BC)=(record #)+(extent)*128.
    3298/    D3AF : 0F                  	RRCA			;move lower bit into bit 7.
    3299/    D3B0 : E6 80               	AND	80H		;and ignore all other bits.
    3300/    D3B2 : 81                  	ADD	A,C		;add to our record number.
    3301/    D3B3 : 4F                  	LD	C,A
    3302/    D3B4 : 3E 00               	LD	A,0		;take care of any carry.
    3303/    D3B6 : 88                  	ADC	A,B
    3304/    D3B7 : 47                  	LD	B,A
    3305/    D3B8 : 7E                  	LD	A,(HL)		;now get the upper bits of extent into
    3306/    D3B9 : 0F                  	RRCA			;bit positions 0-3.
    3307/    D3BA : E6 0F               	AND	0FH		;and ignore all others.
    3308/    D3BC : 80                  	ADD	A,B		;add this in to 'r1' byte.
    3309/    D3BD : 47                  	LD	B,A
    3310/    D3BE : 21 0E 00            	LD	HL,14		;get the 's2' byte (extra extent).
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 57 - 2/13/2018 8:47:39


    3311/    D3C1 : 19                  	ADD	HL,DE
    3312/    D3C2 : 7E                  	LD	A,(HL)
    3313/    D3C3 : 87                  	ADD	A,A		;and shift it left 4 bits (bits 4-7).
    3314/    D3C4 : 87                  	ADD	A,A
    3315/    D3C5 : 87                  	ADD	A,A
    3316/    D3C6 : 87                  	ADD	A,A
    3317/    D3C7 : F5                  	PUSH	AF		;save carry flag (bit 0 of flag byte).
    3318/    D3C8 : 80                  	ADD	A,B		;now add extra extent into 'r1'.
    3319/    D3C9 : 47                  	LD	B,A
    3320/    D3CA : F5                  	PUSH	AF		;and save carry (overflow byte 'r2').
    3321/    D3CB : E1                  	POP	HL		;bit 0 of (L) is the overflow indicator.
    3322/    D3CC : 7D                  	LD	A,L
    3323/    D3CD : E1                  	POP	HL		;and same for first carry flag.
    3324/    D3CE : B5                  	OR	L		;either one of these set?
    3325/    D3CF : E6 01               	AND	01H		;only check the carry flags.
    3326/    D3D1 : C9                  	RET	
    3327/    D3D2 :                     ;
    3328/    D3D2 :                     ;   Routine to setup the fcb (bytes 'r0', 'r1', 'r2') to
    3329/    D3D2 :                     ; reflect the last record used for a random (or other) file.
    3330/    D3D2 :                     ; This reads the directory and looks at all extents computing
    3331/    D3D2 :                     ; the largerst record number for each and keeping the maximum
    3332/    D3D2 :                     ; value only. Then 'r0', 'r1', and 'r2' will reflect this
    3333/    D3D2 :                     ; maximum record number. This is used to compute the space used
    3334/    D3D2 :                     ; by a random file.
    3335/    D3D2 :                     ;
    3336/    D3D2 : 0E 0C               RANSIZE:LD	C,12		;look thru directory for first entry with
    3337/    D3D4 : CD 18 CF            	CALL	FINDFST		;this name.
    3338/    D3D7 : 2A 43 CB            	LD	HL,(PARAMS)	;zero out the 'r0, r1, r2' bytes.
    3339/    D3DA : 11 21 00            	LD	DE,33
    3340/    D3DD : 19                  	ADD	HL,DE
    3341/    D3DE : E5                  	PUSH	HL
    3342/    D3DF : 72                  	LD	(HL),D		;note that (D)=0.
    3343/    D3E0 : 23                  	INC	HL
    3344/    D3E1 : 72                  	LD	(HL),D
    3345/    D3E2 : 23                  	INC	HL
    3346/    D3E3 : 72                  	LD	(HL),D
    3347/    D3E4 : CD F5 CD            RANSIZ1:CALL	CKFILPOS	;is there an extent to process?
    3348/    D3E7 : CA 0C D4            	JP	Z,RANSIZ3	;no, we are done.
    3349/    D3EA : CD 5E CD            	CALL	FCB2HL		;set (HL) pointing to proper fcb in dir.
    3350/    D3ED : 11 0F 00            	LD	DE,15		;point to last record in extent.
    3351/    D3F0 : CD A5 D3            	CALL	COMPRAND	;and compute random parameters.
    3352/    D3F3 : E1                  	POP	HL
    3353/    D3F4 : E5                  	PUSH	HL		;now check these values against those
    3354/    D3F5 : 5F                  	LD	E,A		;already in fcb.
    3355/    D3F6 : 79                  	LD	A,C		;the carry flag will be set if those
    3356/    D3F7 : 96                  	SUB	(HL)		;in the fcb represent a larger size than
    3357/    D3F8 : 23                  	INC	HL		;this extent does.
    3358/    D3F9 : 78                  	LD	A,B
    3359/    D3FA : 9E                  	SBC	A,(HL)
    3360/    D3FB : 23                  	INC	HL
    3361/    D3FC : 7B                  	LD	A,E
    3362/    D3FD : 9E                  	SBC	A,(HL)
    3363/    D3FE : DA 06 D4            	JP	C,RANSIZ2
    3364/    D401 : 73                  	LD	(HL),E		;we found a larger (in size) extent.
    3365/    D402 : 2B                  	DEC	HL		;stuff these values into fcb.
    3366/    D403 : 70                  	LD	(HL),B
    3367/    D404 : 2B                  	DEC	HL
    3368/    D405 : 71                  	LD	(HL),C
    3369/    D406 : CD 2D CF            RANSIZ2:CALL	FINDNXT		;now get the next extent.
    3370/    D409 : C3 E4 D3            	JP	RANSIZ1		;continue til all done.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 58 - 2/13/2018 8:47:39


    3371/    D40C : E1                  RANSIZ3:POP	HL		;we are done, restore the stack and
    3372/    D40D : C9                  	RET			;return.
    3373/    D40E :                     ;
    3374/    D40E :                     ;   Function to return the random record position of a given
    3375/    D40E :                     ; file which has been read in sequential mode up to now.
    3376/    D40E :                     ;
    3377/    D40E : 2A 43 CB            SETRAN:	LD	HL,(PARAMS)	;point to fcb.
    3378/    D411 : 11 20 00            	LD	DE,32		;and to last used record.
    3379/    D414 : CD A5 D3            	CALL	COMPRAND	;compute random position.
    3380/    D417 : 21 21 00            	LD	HL,33		;now stuff these values into fcb.
    3381/    D41A : 19                  	ADD	HL,DE
    3382/    D41B : 71                  	LD	(HL),C		;move 'r0'.
    3383/    D41C : 23                  	INC	HL
    3384/    D41D : 70                  	LD	(HL),B		;and 'r1'.
    3385/    D41E : 23                  	INC	HL
    3386/    D41F : 77                  	LD	(HL),A		;and lastly 'r2'.
    3387/    D420 : C9                  	RET	
    3388/    D421 :                     ;
    3389/    D421 :                     ;   This routine select the drive specified in (ACTIVE) and
    3390/    D421 :                     ; update the login vector and bitmap table if this drive was
    3391/    D421 :                     ; not already active.
    3392/    D421 :                     ;
    3393/    D421 : 2A AF D5            LOGINDRV: LD	HL,(LOGIN)	;get the login vector.
    3394/    D424 : 3A 42 CB            	LD	A,(ACTIVE)	;get the default drive.
    3395/    D427 : 4F                  	LD	C,A
    3396/    D428 : CD EA CC            	CALL	SHIFTR		;position active bit for this drive
    3397/    D42B : E5                  	PUSH	HL		;into bit 0.
    3398/    D42C : EB                  	EX	DE,HL
    3399/    D42D : CD 59 CB            	CALL	SELECT		;select this drive.
    3400/    D430 : E1                  	POP	HL
    3401/    D431 : CC 47 CB            	CALL	Z,SLCTERR	;valid drive?
    3402/    D434 : 7D                  	LD	A,L		;is this a newly activated drive?
    3403/    D435 : 1F                  	RRA	
    3404/    D436 : D8                  	RET	C
    3405/    D437 : 2A AF D5            	LD	HL,(LOGIN)	;yes, update the login vector.
    3406/    D43A : 4D                  	LD	C,L
    3407/    D43B : 44                  	LD	B,H
    3408/    D43C : CD 0B CD            	CALL	SETBIT
    3409/    D43F : 22 AF D5            	LD	(LOGIN),HL	;and save.
    3410/    D442 : C3 A3 CE            	JP	BITMAP		;now update the bitmap.
    3411/    D445 :                     ;
    3412/    D445 :                     ;   Function to set the active disk number.
    3413/    D445 :                     ;
    3414/    D445 : 3A D6 D5            SETDSK:	LD	A,(EPARAM)	;get parameter passed and see if this
    3415/    D448 : 21 42 CB            	LD	HL,ACTIVE	;represents a change in drives.
    3416/    D44B : BE                  	CP	(HL)
    3417/    D44C : C8                  	RET	Z
    3418/    D44D : 77                  	LD	(HL),A		;yes it does, log it in.
    3419/    D44E : C3 21 D4            	JP	LOGINDRV
    3420/    D451 :                     ;
    3421/    D451 :                     ;   This is the 'auto disk select' routine. The firsst byte
    3422/    D451 :                     ; of the fcb is examined for a drive specification. If non
    3423/    D451 :                     ; zero then the drive will be selected and loged in.
    3424/    D451 :                     ;
    3425/    D451 : 3E FF               AUTOSEL:LD	A,0FFH		;say 'auto-select activated'.
    3426/    D453 : 32 DE D5            	LD	(AUTO),A
    3427/    D456 : 2A 43 CB            	LD	HL,(PARAMS)	;get drive specified.
    3428/    D459 : 7E                  	LD	A,(HL)
    3429/    D45A : E6 1F               	AND	1FH		;look at lower 5 bits.
    3430/    D45C : 3D                  	DEC	A		;adjust for (1=A, 2=B) etc.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 59 - 2/13/2018 8:47:39


    3431/    D45D : 32 D6 D5            	LD	(EPARAM),A	;and save for the select routine.
    3432/    D460 : FE 1E               	CP	1EH		;check for 'no change' condition.
    3433/    D462 : D2 75 D4            	JP	NC,AUTOSL1	;yes, don't change.
    3434/    D465 : 3A 42 CB            	LD	A,(ACTIVE)	;we must change, save currently active
    3435/    D468 : 32 DF D5            	LD	(OLDDRV),A	;drive.
    3436/    D46B : 7E                  	LD	A,(HL)		;and save first byte of fcb also.
    3437/    D46C : 32 E0 D5            	LD	(AUTOFLAG),A	;this must be non-zero.
    3438/    D46F : E6 E0               	AND	0E0H		;whats this for (bits 6,7 are used for
    3439/    D471 : 77                  	LD	(HL),A		;something)?
    3440/    D472 : CD 45 D4            	CALL	SETDSK		;select and log in this drive.
    3441/    D475 : 3A 41 CB            AUTOSL1:LD	A,(USERNO)	;move user number into fcb.
    3442/    D478 : 2A 43 CB            	LD	HL,(PARAMS)	;(* upper half of first byte *)
    3443/    D47B : B6                  	OR	(HL)
    3444/    D47C : 77                  	LD	(HL),A
    3445/    D47D : C9                  	RET			;and return (all done).
    3446/    D47E :                     ;
    3447/    D47E :                     ;   Function to return the current cp/m version number.
    3448/    D47E :                     ;
    3449/    D47E : 3E 22               GETVER:	LD	A,022H		;version 2.2
    3450/    D480 : C3 01 CB            	JP	SETSTAT
    3451/    D483 :                     ;
    3452/    D483 :                     ;   Function to reset the disk system.
    3453/    D483 :                     ;
    3454/    D483 : 21 00 00            RSTDSK:	LD	HL,0		;clear write protect status and log
    3455/    D486 : 22 AD D5            	LD	(WRTPRT),HL	;in vector.
    3456/    D489 : 22 AF D5            	LD	(LOGIN),HL
    3457/    D48C : AF                  	XOR	A		;select drive 'A'.
    3458/    D48D : 32 42 CB            	LD	(ACTIVE),A
    3459/    D490 : 21 80 00            	LD	HL,TBUFF	;setup default dma address.
    3460/    D493 : 22 B1 D5            	LD	(USERDMA),HL
    3461/    D496 : CD DA CD            	CALL	DEFDMA
    3462/    D499 : C3 21 D4            	JP	LOGINDRV	;now log in drive 'A'.
    3463/    D49C :                     ;
    3464/    D49C :                     ;   Function to open a specified file.
    3465/    D49C :                     ;
    3466/    D49C : CD 72 CD            OPENFIL:CALL	CLEARS2		;clear 's2' byte.
    3467/    D49F : CD 51 D4            	CALL	AUTOSEL		;select proper disk.
    3468/    D4A2 : C3 51 D0            	JP	OPENIT		;and open the file.
    3469/    D4A5 :                     ;
    3470/    D4A5 :                     ;   Function to close a specified file.
    3471/    D4A5 :                     ;
    3472/    D4A5 : CD 51 D4            CLOSEFIL: CALL	AUTOSEL		;select proper disk.
    3473/    D4A8 : C3 A2 D0            	JP	CLOSEIT		;and close the file.
    3474/    D4AB :                     ;
    3475/    D4AB :                     ;   Function to return the first occurence of a specified file
    3476/    D4AB :                     ; name. If the first byte of the fcb is '?' then the name will
    3477/    D4AB :                     ; not be checked (get the first entry no matter what).
    3478/    D4AB :                     ;
    3479/    D4AB : 0E 00               GETFST:	LD	C,0		;prepare for special search.
    3480/    D4AD : EB                  	EX	DE,HL
    3481/    D4AE : 7E                  	LD	A,(HL)		;is first byte a '?'?
    3482/    D4AF : FE 3F               	CP	'?'
    3483/    D4B1 : CA C2 D4            	JP	Z,GETFST1	;yes, just get very first entry (zero length match).
    3484/    D4B4 : CD A6 CC            	CALL	SETEXT		;get the extension byte from fcb.
    3485/    D4B7 : 7E                  	LD	A,(HL)		;is it '?'? if yes, then we want
    3486/    D4B8 : FE 3F               	CP	'?'		;an entry with a specific 's2' byte.
    3487/    D4BA : C4 72 CD            	CALL	NZ,CLEARS2	;otherwise, look for a zero 's2' byte.
    3488/    D4BD : CD 51 D4            	CALL	AUTOSEL		;select proper drive.
    3489/    D4C0 : 0E 0F               	LD	C,15		;compare bytes 0-14 in fcb (12&13 excluded).
    3490/    D4C2 : CD 18 CF            GETFST1:CALL	FINDFST		;find an entry and then move it into
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 60 - 2/13/2018 8:47:39


    3491/    D4C5 : C3 E9 CD            	JP	MOVEDIR		;the users dma space.
    3492/    D4C8 :                     ;
    3493/    D4C8 :                     ;   Function to return the next occurence of a file name.
    3494/    D4C8 :                     ;
    3495/    D4C8 : 2A D9 D5            GETNXT:	LD	HL,(SAVEFCB)	;restore pointers. note that no
    3496/    D4CB : 22 43 CB            	LD	(PARAMS),HL	;other dbos calls are allowed.
    3497/    D4CE : CD 51 D4            	CALL	AUTOSEL		;no error will be returned, but the
    3498/    D4D1 : CD 2D CF            	CALL	FINDNXT		;results will be wrong.
    3499/    D4D4 : C3 E9 CD            	JP	MOVEDIR
    3500/    D4D7 :                     ;
    3501/    D4D7 :                     ;   Function to delete a file by name.
    3502/    D4D7 :                     ;
    3503/    D4D7 : CD 51 D4            DELFILE:CALL	AUTOSEL		;select proper drive.
    3504/    D4DA : CD 9C CF            	CALL	ERAFILE		;erase the file.
    3505/    D4DD : C3 01 CF            	JP	STSTATUS	;set status and return.
    3506/    D4E0 :                     ;
    3507/    D4E0 :                     ;   Function to execute a sequential read of the specified
    3508/    D4E0 :                     ; record number.
    3509/    D4E0 :                     ;
    3510/    D4E0 : CD 51 D4            READSEQ:CALL	AUTOSEL		;select proper drive then read.
    3511/    D4E3 : C3 BC D1            	JP	RDSEQ
    3512/    D4E6 :                     ;
    3513/    D4E6 :                     ;   Function to write the net sequential record.
    3514/    D4E6 :                     ;
    3515/    D4E6 : CD 51 D4            WRTSEQ:	CALL	AUTOSEL		;select proper drive then write.
    3516/    D4E9 : C3 FE D1            	JP	WTSEQ
    3517/    D4EC :                     ;
    3518/    D4EC :                     ;   Create a file function.
    3519/    D4EC :                     ;
    3520/    D4EC : CD 72 CD            FCREATE:CALL	CLEARS2		;clear the 's2' byte on all creates.
    3521/    D4EF : CD 51 D4            	CALL	AUTOSEL		;select proper drive and get the next
    3522/    D4F2 : C3 24 D1            	JP	GETEMPTY	;empty directory space.
    3523/    D4F5 :                     ;
    3524/    D4F5 :                     ;   Function to rename a file.
    3525/    D4F5 :                     ;
    3526/    D4F5 : CD 51 D4            RENFILE:CALL	AUTOSEL		;select proper drive and then switch
    3527/    D4F8 : CD 16 D0            	CALL	CHGNAMES	;file names.
    3528/    D4FB : C3 01 CF            	JP	STSTATUS
    3529/    D4FE :                     ;
    3530/    D4FE :                     ;   Function to return the login vector.
    3531/    D4FE :                     ;
    3532/    D4FE : 2A AF D5            GETLOG:	LD	HL,(LOGIN)
    3533/    D501 : C3 29 D5            	JP	GETPRM1
    3534/    D504 :                     ;
    3535/    D504 :                     ;   Function to return the current disk assignment.
    3536/    D504 :                     ;
    3537/    D504 : 3A 42 CB            GETCRNT:LD	A,(ACTIVE)
    3538/    D507 : C3 01 CB            	JP	SETSTAT
    3539/    D50A :                     ;
    3540/    D50A :                     ;   Function to set the dma address.
    3541/    D50A :                     ;
    3542/    D50A : EB                  PUTDMA:	EX	DE,HL
    3543/    D50B : 22 B1 D5            	LD	(USERDMA),HL	;save in our space and then get to
    3544/    D50E : C3 DA CD            	JP	DEFDMA		;the bios with this also.
    3545/    D511 :                     ;
    3546/    D511 :                     ;   Function to return the allocation vector.
    3547/    D511 :                     ;
    3548/    D511 : 2A BF D5            GETALOC:LD	HL,(ALOCVECT)
    3549/    D514 : C3 29 D5            	JP	GETPRM1
    3550/    D517 :                     ;
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 61 - 2/13/2018 8:47:39


    3551/    D517 :                     ;   Function to return the read-only status vector.
    3552/    D517 :                     ;
    3553/    D517 : 2A AD D5            GETROV:	LD	HL,(WRTPRT)
    3554/    D51A : C3 29 D5            	JP	GETPRM1
    3555/    D51D :                     ;
    3556/    D51D :                     ;   Function to set the file attributes (read-only, system).
    3557/    D51D :                     ;
    3558/    D51D : CD 51 D4            SETATTR:CALL	AUTOSEL		;select proper drive then save attributes.
    3559/    D520 : CD 3B D0            	CALL	SAVEATTR
    3560/    D523 : C3 01 CF            	JP	STSTATUS
    3561/    D526 :                     ;
    3562/    D526 :                     ;   Function to return the address of the disk parameter block
    3563/    D526 :                     ; for the current drive.
    3564/    D526 :                     ;
    3565/    D526 : 2A BB D5            GETPARM:LD	HL,(DISKPB)
    3566/    D529 : 22 45 CB            GETPRM1:LD	(STATUS),HL
    3567/    D52C : C9                  	RET	
    3568/    D52D :                     ;
    3569/    D52D :                     ;   Function to get or set the user number. If (E) was (FF)
    3570/    D52D :                     ; then this is a request to return the current user number.
    3571/    D52D :                     ; Else set the user number from (E).
    3572/    D52D :                     ;
    3573/    D52D : 3A D6 D5            GETUSER:LD	A,(EPARAM)	;get parameter.
    3574/    D530 : FE FF               	CP	0FFH		;get user number?
    3575/    D532 : C2 3B D5            	JP	NZ,SETUSER
    3576/    D535 : 3A 41 CB            	LD	A,(USERNO)	;yes, just do it.
    3577/    D538 : C3 01 CB            	JP	SETSTAT
    3578/    D53B : E6 1F               SETUSER:AND	1FH		;no, we should set it instead. keep low
    3579/    D53D : 32 41 CB            	LD	(USERNO),A	;bits (0-4) only.
    3580/    D540 : C9                  	RET	
    3581/    D541 :                     ;
    3582/    D541 :                     ;   Function to read a random record from a file.
    3583/    D541 :                     ;
    3584/    D541 : CD 51 D4            RDRANDOM: CALL	AUTOSEL		;select proper drive and read.
    3585/    D544 : C3 93 D3            	JP	READRAN
    3586/    D547 :                     ;
    3587/    D547 :                     ;   Function to compute the file size for random files.
    3588/    D547 :                     ;
    3589/    D547 : CD 51 D4            WTRANDOM: CALL	AUTOSEL		;select proper drive and write.
    3590/    D54A : C3 9C D3            	JP	WRITERAN
    3591/    D54D :                     ;
    3592/    D54D :                     ;   Function to compute the size of a random file.
    3593/    D54D :                     ;
    3594/    D54D : CD 51 D4            FILESIZE: CALL	AUTOSEL		;select proper drive and check file length
    3595/    D550 : C3 D2 D3            	JP	RANSIZE
    3596/    D553 :                     ;
    3597/    D553 :                     ;   Function #37. This allows a program to log off any drives.
    3598/    D553 :                     ; On entry, set (DE) to contain a word with bits set for those
    3599/    D553 :                     ; drives that are to be logged off. The log-in vector and the
    3600/    D553 :                     ; write protect vector will be updated. This must be a M/PM
    3601/    D553 :                     ; special function.
    3602/    D553 :                     ;
    3603/    D553 : 2A 43 CB            LOGOFF:	LD	HL,(PARAMS)	;get drives to log off.
    3604/    D556 : 7D                  	LD	A,L		;for each bit that is set, we want
    3605/    D557 : 2F                  	CPL			;to clear that bit in (LOGIN)
    3606/    D558 : 5F                  	LD	E,A		;and (WRTPRT).
    3607/    D559 : 7C                  	LD	A,H
    3608/    D55A : 2F                  	CPL	
    3609/    D55B : 2A AF D5            	LD	HL,(LOGIN)	;reset the login vector.
    3610/    D55E : A4                  	AND	H
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 62 - 2/13/2018 8:47:39


    3611/    D55F : 57                  	LD	D,A
    3612/    D560 : 7D                  	LD	A,L
    3613/    D561 : A3                  	AND	E
    3614/    D562 : 5F                  	LD	E,A
    3615/    D563 : 2A AD D5            	LD	HL,(WRTPRT)
    3616/    D566 : EB                  	EX	DE,HL
    3617/    D567 : 22 AF D5            	LD	(LOGIN),HL	;and save.
    3618/    D56A : 7D                  	LD	A,L		;now do the write protect vector.
    3619/    D56B : A3                  	AND	E
    3620/    D56C : 6F                  	LD	L,A
    3621/    D56D : 7C                  	LD	A,H
    3622/    D56E : A2                  	AND	D
    3623/    D56F : 67                  	LD	H,A
    3624/    D570 : 22 AD D5            	LD	(WRTPRT),HL	;and save. all done.
    3625/    D573 : C9                  	RET	
    3626/    D574 :                     ;
    3627/    D574 :                     ;   Get here to return to the user.
    3628/    D574 :                     ;
    3629/    D574 : 3A DE D5            GOBACK:	LD	A,(AUTO)	;was auto select activated?
    3630/    D577 : B7                  	OR	A
    3631/    D578 : CA 91 D5            	JP	Z,GOBACK1
    3632/    D57B : 2A 43 CB            	LD	HL,(PARAMS)	;yes, but was a change made?
    3633/    D57E : 36 00               	LD	(HL),0		;(* reset first byte of fcb *)
    3634/    D580 : 3A E0 D5            	LD	A,(AUTOFLAG)
    3635/    D583 : B7                  	OR	A
    3636/    D584 : CA 91 D5            	JP	Z,GOBACK1
    3637/    D587 : 77                  	LD	(HL),A		;yes, reset first byte properly.
    3638/    D588 : 3A DF D5            	LD	A,(OLDDRV)	;and get the old drive and select it.
    3639/    D58B : 32 D6 D5            	LD	(EPARAM),A
    3640/    D58E : CD 45 D4            	CALL	SETDSK
    3641/    D591 : 2A 0F CB            GOBACK1:LD	HL,(USRSTACK)	;reset the users stack pointer.
    3642/    D594 : F9                  	LD	SP,HL
    3643/    D595 : 2A 45 CB            	LD	HL,(STATUS)	;get return status.
    3644/    D598 : 7D                  	LD	A,L		;force version 1.4 compatability.
    3645/    D599 : 44                  	LD	B,H
    3646/    D59A : C9                  	RET			;and go back to user.
    3647/    D59B :                     ;
    3648/    D59B :                     ;   Function #40. This is a special entry to do random i/o.
    3649/    D59B :                     ; For the case where we are writing to unused disk space, this
    3650/    D59B :                     ; space will be zeroed out first. This must be a M/PM special
    3651/    D59B :                     ; purpose function, because why would any normal program even
    3652/    D59B :                     ; care about the previous contents of a sector about to be
    3653/    D59B :                     ; written over.
    3654/    D59B :                     ;
    3655/    D59B : CD 51 D4            WTSPECL:CALL	AUTOSEL		;select proper drive.
    3656/    D59E : 3E 02               	LD	A,2		;use special write mode.
    3657/    D5A0 : 32 D5 D5            	LD	(MODE),A
    3658/    D5A3 : 0E 00               	LD	C,0		;set write indicator.
    3659/    D5A5 : CD 07 D3            	CALL	POSITN1		;position the file.
    3660/    D5A8 : CC 03 D2            	CALL	Z,WTSEQ1	;and write (if no errors).
    3661/    D5AB : C9                  	RET	
    3662/    D5AC :                     ;
    3663/    D5AC :                     ;**************************************************************
    3664/    D5AC :                     ;*
    3665/    D5AC :                     ;*     BDOS data storage pool.
    3666/    D5AC :                     ;*
    3667/    D5AC :                     ;**************************************************************
    3668/    D5AC :                     ;
    3669/    D5AC : E5                  EMPTYFCB: DB	0E5H		;empty directory segment indicator.
    3670/    D5AD : 00 00               WRTPRT:	DW	0		;write protect status for all 16 drives.
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 63 - 2/13/2018 8:47:39


    3671/    D5AF : 00 00               LOGIN:	DW	0		;drive active word (1 bit per drive).
    3672/    D5B1 : 80 00               USERDMA: DW	080H		;user's dma address (defaults to 80h).
    3673/    D5B3 :                     ;
    3674/    D5B3 :                     ;   Scratch areas from parameter block.
    3675/    D5B3 :                     ;
    3676/    D5B3 : 00 00               SCRATCH1: DW	0		;relative position within dir segment for file (0-3).
    3677/    D5B5 : 00 00               SCRATCH2: DW	0		;last selected track number.
    3678/    D5B7 : 00 00               SCRATCH3: DW	0		;last selected sector number.
    3679/    D5B9 :                     ;
    3680/    D5B9 :                     ;   Disk storage areas from parameter block.
    3681/    D5B9 :                     ;
    3682/    D5B9 : 00 00               DIRBUF:	 DW	0		;address of directory buffer to use.
    3683/    D5BB : 00 00               DISKPB:	 DW	0		;contains address of disk parameter block.
    3684/    D5BD : 00 00               CHKVECT: DW	0		;address of check vector.
    3685/    D5BF : 00 00               ALOCVECT:  DW	0		;address of allocation vector (bit map).
    3686/    D5C1 :                     ;
    3687/    D5C1 :                     ;   Parameter block returned from the bios.
    3688/    D5C1 :                     ;
    3689/    D5C1 : 00 00               SECTORS: DW	0		;sectors per track from bios.
    3690/    D5C3 : 00                  BLKSHFT: DB	0		;block shift.
    3691/    D5C4 : 00                  BLKMASK: DB	0		;block mask.
    3692/    D5C5 : 00                  EXTMASK: DB	0		;extent mask.
    3693/    D5C6 : 00 00               DSKSIZE: DW	0		;disk size from bios (number of blocks-1).
    3694/    D5C8 : 00 00               DIRSIZE: DW	0		;directory size.
    3695/    D5CA : 00 00               ALLOC0:	 DW	0		;storage for first bytes of bit map (dir space used).
    3696/    D5CC : 00 00               ALLOC1:	 DW	0
    3697/    D5CE : 00 00               OFFSET:	 DW	0		;first usable track number.
    3698/    D5D0 : 00 00               XLATE:	 DW	0		;sector translation table address.
    3699/    D5D2 :                     ;
    3700/    D5D2 :                     ;
    3701/    D5D2 : 00                  CLOSEFLG:  DB	0		;close flag (=0ffh is extent written ok).
    3702/    D5D3 : 00                  RDWRTFLG:  DB	0		;read/write flag (0ffh=read, 0=write).
    3703/    D5D4 : 00                  FNDSTAT: DB	0		;filename found status (0=found first entry).
    3704/    D5D5 : 00                  MODE:	 DB	0		;I/o mode select (0=random, 1=sequential, 2=special random).
    3705/    D5D6 : 00                  EPARAM:	 DB	0		;storage for register (E) on entry to bdos.
    3706/    D5D7 : 00                  RELBLOCK:  DB	0		;relative position within fcb of block number written.
    3707/    D5D8 : 00                  COUNTER: DB	0		;byte counter for directory name searches.
    3708/    D5D9 : 00 00 00 00         SAVEFCB: DW	0,0		;save space for address of fcb (for directory searches).
    3709/    D5DD : 00                  BIGDISK: dB	0		;if =0 then disk is > 256 blocks long.
    3710/    D5DE : 00                  AUTO:	 DB	0		;if non-zero, then auto select activated.
    3711/    D5DF : 00                  OLDDRV:	 DB	0		;on auto select, storage for previous drive.
    3712/    D5E0 : 00                  AUTOFLAG:  DB	0		;if non-zero, then auto select changed drives.
    3713/    D5E1 : 00                  SAVNXT:	 DB	0		;storage for next record number to access.
    3714/    D5E2 : 00                  SAVEXT:	 DB	0		;storage for extent number of file.
    3715/    D5E3 : 00 00               SAVNREC: DW	0		;storage for number of records in file.
    3716/    D5E5 : 00 00               BLKNMBR: DW	0		;block number (physical sector) used within a file or logical sect
    3717/    D5E7 : 00 00               LOGSECT: DW	0		;starting logical (128 byte) sector of block (physical sector).
    3718/    D5E9 : 00                  FCBPOS:	 DB	0		;relative position within buffer for fcb of file of interest.
    3719/    D5EA : 00 00               FILEPOS: DW	0		;files position within directory (0 to max entries -1).
    3720/    D5EC :                     ;
    3721/    D5EC :                     ;   Disk directory buffer checksum bytes. One for each of the
    3722/    D5EC :                     ; 16 possible drives.
    3723/    D5EC :                     ;
    3724/    D5EC : 00 00 00 00 00 00   CKSUMTBL:  DB	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
                    00 00 00 00 00 00 
                    00 00 00 00 
    3725/    D5FC :                     ;
    3726/    D5FC :                     ;   Extra space ?
    3727/    D5FC :                     ;
    3728/    D5FC : 00 00 00 00         	 DB	0,0,0,0
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 64 - 2/13/2018 8:47:39


    3729/    D600 :                     ;
    3730/    D600 :                     ;**************************************************************
    3731/    D600 :                     ;*
    3732/    D600 :                     ;*        B I O S   J U M P   T A B L E
    3733/    D600 :                     ;*
    3734/    D600 :                     ;**************************************************************
    3735/    D600 :                     ;
    3736/    D600 : C3 00 00            BOOT:	JP	0		;NOTE WE USE FAKE DESTINATIONS
    3737/    D603 : C3 00 00            WBOOT:	JP	0
    3738/    D606 : C3 00 00            CONST:	JP	0
    3739/    D609 : C3 00 00            CONIN:	JP	0
    3740/    D60C : C3 00 00            CONOUT:	JP	0
    3741/    D60F : C3 00 00            LIST:	JP	0
    3742/    D612 : C3 00 00            PUNCH:	JP	0
    3743/    D615 : C3 00 00            READER:	JP	0
    3744/    D618 : C3 00 00            HOME:	JP	0
    3745/    D61B : C3 00 00            SELDSK:	JP	0
    3746/    D61E : C3 00 00            SETTRK:	JP	0
    3747/    D621 : C3 00 00            SETSEC:	JP	0
    3748/    D624 : C3 00 00            SETDMA:	JP	0
    3749/    D627 : C3 00 00            READ:	JP	0
    3750/    D62A : C3 00 00            WRITE:	JP	0
    3751/    D62D : C3 00 00            PRSTAT:	JP	0
    3752/    D630 : C3 00 00            SECTRN:	JP	0
    3753/    D633 :                     ;
    3754/    D633 :                     ;*
    3755/    D633 :                     ;******************   E N D   O F   C P / M   *****************
    3756/    D633 :                     ;*
    3757/    D633 :                     
    3758/    D633 :                     	 END
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 65 - 2/13/2018 8:47:39


  symbol table (* = unused):
  ------------------------

 ACTIVE :                      CB42 C |  ADDA2HL :                     CD64 C |
 ADDHL :                       C259 C |  ALLOC0 :                      D5CA C |
 ALLOC1 :                      D5CC C |  ALOCVECT :                    D5BF C |
*ARCHITECTURE :                                        x86_64-unknown-linux - |
 AUTO :                        D5DE C |  AUTOFLAG :                    D5E0 C |
 AUTOSEL :                     D451 C |  AUTOSL1 :                     D475 C |
 BACKUP :                      C9A4 C |  BACKUP1 :                     C9AC C |
 BADLOAD :                     C77A C |  BADSCTR :                     C809 C |
 BADSEC :                      C8CA C |  BADSEL :                      C8D5 C |
 BADSLCT :                     C80B C |  BATCH :                       C7AB C |
 BATCHFCB :                    C7AC C |  BDOSDRV :                     C8C6 C |
 BDOSERR :                     C8BA C |  BIGDISK :                     D5DD C |
*BIGENDIAN :                      0 - |  BITMAP :                      CEA3 C |
 BITMAP1 :                     CEB1 C |  BITMAP2 :                     CED2 C |
 BITMAP3 :                     CEF6 C |  BLKMASK :                     D5C4 C |
 BLKNMBR :                     D5E5 C |  BLKSHFT :                     D5C3 C |
*BOOT :                        D600 C | *BRANCHEXT :                      0 - |
 BS :                             8 - | *CASESENSITIVE :                  0 - |
 CBASE :                       C000 C |  CCPSTACK :                    C7AB - |
 CDRIVE :                      C7EF C |  CHARBUF :                     CB0E C |
 CHECK :                       C230 C |  CHECKDIR :                    CD9E C |
 CHECKSUM :                    CCF7 C |  CHGDRV :                      C7F0 C |
 CHGNAM1 :                     D027 C |  CHGNAMES :                    D016 C |
 CHKBLK :                      CC84 C |  CHKCHAR :                     C914 C |
 CHKCON :                      C1C2 C |  CHKDIR1 :                     CDC4 C |
 CHKNMBR :                     CD8C C |  CHKROFL :                     CD44 C |
 CHKSUM1 :                     CCFD C |  CHKVECT :                     D5BD C |
 CHKWPRT :                     CD54 C |  CKBITMAP :                    CE35 C |
 CKBMAP1 :                     CE56 C |  CKCON1 :                      C942 C |
 CKCON2 :                      C945 C |  CKCONSOL :                    C923 C |
 CKFILPOS :                    CDF5 C |  CKROF1 :                      CD47 C |
 CKSUMTBL :                    D5EC C |  CLEARBUF :                    C358 C |
 CLEARS2 :                     CD72 C |  CLOSE :                       C0DA C |
 CLOSEFIL :                    D4A5 C |  CLOSEFLG :                    D5D2 C |
 CLOSEIT :                     D0A2 C |  CLOSEIT1 :                    D0CD C |
 CLOSEIT2 :                    D0DB C |  CLOSEIT3 :                    D0E1 C |
 CLOSEIT4 :                    D0E8 C |  CLOSEIT5 :                    D0FD C |
 CLOSEIT6 :                    D117 C |  CLOSEIT7 :                    D11F C |
 CMDADR :                      C3C1 C |  CMDTBL :                      C310 C |
 CMMND1 :                      C382 C |  CMMND2 :                      C398 C |
 CNTRLC :                         3 - |  CNTRLE :                         5 - |
 CNTRLP :                        10 - |  CNTRLR :                        12 - |
 CNTRLS :                        13 - |  CNTRLU :                        15 - |
 CNTRLX :                        18 - |  CNTRLZ :                        1A - |
 COMBLK :                      CC77 C |  COMFILE :                     C783 C |
 COMMAND :                     C35C C |  COMPRAND :                    D3A5 C |
 CONIN :                       D609 C |  CONOUT :                      D60C C |
 CONST :                       D606 C | *CONSTPI :        3.141592653589793 - |
 CONVERT :                     C260 C |  CONVFST :                     C25E C |
 CONVRT1 :                     C289 C |  CONVRT2 :                     C290 C |
 CONVRT3 :                     C296 C |  CONVRT4 :                     C298 C |
 CONVRT5 :                     C2A9 C |  CONVRT6 :                     C2AB C |
 CONVRT7 :                     C2AF C |  CONVRT8 :                     C2B9 C |
 COUNTER :                     D5D8 C |  CR :                             D - |
 CREATE :                      C109 C |  CRLF :                        C098 C |
 CURPOS :                      CB0C C | *DATE :                   2/13/2018 - |
 DE2HL :                       CB4F C |  DE2HL1 :                      CB50 C |
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 66 - 2/13/2018 8:47:39


 DECODE :                      C3F8 C |  DECODE1 :                     C408 C |
*DECODE2 :                     C42A C |  DECODE3 :                     C433 C |
*DECODE4 :                     C43A C |  DEFDMA :                      CDDA C |
 DEL :                           7F - |  DELBATCH :                    C1DD C |
 DELETE :                      C0EF C |  DELFILE :                     D4D7 C |
 DIRBUF :                      D5B9 C |  DIRC1 :                       CAE0 C |
 DIRCIO :                      CAD4 C |  DIRDMA :                      CDE0 C |
 DIRDMA1 :                     CDE3 C |  DIRECT :                      C477 C |
 DIRECT1 :                     C488 C |  DIRECT2 :                     C48F C |
 DIRECT3 :                     C498 C |  DIRECT4 :                     C4CC C |
 DIRECT5 :                     C4D4 C |  DIRECT6 :                     C4D9 C |
 DIRECT7 :                     C50E C |  DIRECT8 :                     C50F C |
 DIRECT9 :                     C51B C |  DIRREAD :                     CDD4 C |
 DIRSIZE :                     D5C8 C |  DIRWRITE :                    CDC6 C |
 DISKPB :                      D5BB C |  DISKRO :                      C8E1 C |
 DMASET :                      C1D8 C |  DOREAD :                      CBB2 C |
 DOWRITE :                     CBB8 C |  DRECT63 :                     C4F7 C |
 DRECT65 :                     C4F9 C |  DSELECT :                     C454 C |
 DSKSEL :                      C0BD C |  DSKSIZE :                     D5C6 C |
 EMPTYFCB :                    D5AC C |  ENTRY :                          5 - |
 ENTRY1 :                      C0C3 C |  ENTRY2 :                      C0F4 C |
 EPARAM :                      D5D6 C |  ERAFIL1 :                     CFA4 C |
 ERAFILE :                     CF9C C |  ERASE :                       C51F C |
 ERASE1 :                      C542 C |  ERROR1 :                      C899 C |
 ERROR2 :                      C8A5 C |  ERROR3 :                      C8AB C |
 ERROR4 :                      C8B1 C |  ERROR5 :                      C8B4 C |
 EXISTS :                      C682 C |  EXTBLK :                      CC5E C |
 EXTBLK1 :                     CC71 C |  EXTMASK :                     D5C5 C |
 EXTRACT :                     C44B C | *FALSE :                          0 - |
*FBASE :                       C806 C |  FBASE1 :                      C811 C |
 FCB :                         C7CD C |  FCB2HL :                      CD5E C |
 FCBPOS :                      D5E9 C |  FCBSET :                      CFFD C |
 FCREATE :                     D4EC C | *FF :                             C - |
 FILEPOS :                     D5EA C |  FILERO :                      C8DC C |
 FILESIZE :                    D54D C |  FINDFST :                     CF18 C |
 FINDNXT :                     CF2D C |  FNDNXT1 :                     CF4A C |
 FNDNXT2 :                     CF53 C |  FNDNXT3 :                     CF73 C |
 FNDNXT4 :                     CF7C C |  FNDNXT5 :                     CF83 C |
 FNDNXT6 :                     CF94 C |  FNDSPA1 :                     CFC0 C |
 FNDSPA2 :                     CFD1 C |  FNDSPA3 :                     CFEC C |
 FNDSPA4 :                     CFF4 C |  FNDSPACE :                    CFBE C |
 FNDSTAT :                     D5D4 C | *FULLPMMU :                       1 - |
 FUNCTNS :                     C847 C |  GETALOC :                     D511 C |
 GETBACK :                     C786 C |  GETBACK1 :                    C789 C |
 GETBLK1 :                     CC45 C |  GETBLK2 :                     CC53 C |
 GETBLK3 :                     CC5C C |  GETBLOCK :                    CC3E C |
 GETCHAR :                     C8FB C |  GETCON :                      CAC8 C |
 GETCRNT :                     D504 C |  GETCSTS :                     CAFE C |
 GETDSK :                      C1D0 C |  GETECHO :                     C906 C |
 GETEMPTY :                    D124 C |  GETEXT :                      C2C0 C |
 GETEXT1 :                     C2C8 C |  GETEXT2 :                     C2D9 C |
 GETEXT3 :                     C2DB C |  GETEXT4 :                     C2DF C |
 GETEXT5 :                     C2E9 C |  GETEXT6 :                     C2F0 C |
 GETEXT7 :                     C2F2 C |  GETEXT8 :                     C301 C |
 GETEXT9 :                     C309 C |  GETFST :                      D4AB C |
 GETFST1 :                     D4C2 C |  GETINP :                      C139 C |
 GETINP1 :                     C196 C |  GETINP2 :                     C1A7 C |
 GETINP3 :                     C1AB C |  GETINP4 :                     C1BA C |
 GETIOB :                      CAED C |  GETLOG :                      D4FE C |
 GETMT1 :                      D146 C |  GETNEXT :                     D15A C |
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 67 - 2/13/2018 8:47:39


 GETNXT :                      D4C8 C |  GETPARM :                     D526 C |
 GETPRM1 :                     D529 C |  GETRDR :                      CACE C |
 GETROV :                      D517 C |  GETS2 :                       CD69 C |
 GETSETUC :                    C115 C |  GETUSER :                     D52D C |
 GETUSR :                      C113 C |  GETVER :                      D47E C |
 GETWPRT :                     CD1E C |  GOBACK :                      D574 C |
 GOBACK1 :                     D591 C |  GTNEXT1 :                     D183 C |
 GTNEXT2 :                     D18E C |  GTNEXT3 :                     D1AC C |
 GTNEXT4 :                     D1AF C |  GTNEXT5 :                     D1B6 C |
 HALT :                        C3CF C | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - |  HL2DE :                       C442 C |
 HOME :                        D618 C |  HOMEDRV :                     CBA1 C |
 INBUFF :                      C006 C | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
 INPOINT :                     C088 C | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - |  IOBYTE :                         3 - |
 IOERR1 :                      CB05 C |  IORET :                       CBBB C |
 JUMPHL :                      CB4A C |  LF :                             A - |
 LIST :                        D60F C | *LISTON :                         1 - |
 LOGICAL :                     CC8A C |  LOGICL1 :                     CC90 C |
 LOGIN :                       D5AF C |  LOGINDRV :                    D421 C |
 LOGOFF :                      D553 C |  LOGSECT :                     D5E7 C |
*MACEXP :                         1 - |  MODE :                        D5D5 C |
*MOMCPU :                        80 - | *MOMCPUNAME :                   Z80 - |
 MOREFLS :                     CD7F C |  MOVE3 :                       C440 C |
 MOVECD :                      C129 C |  MOVEDIR :                     CDE9 C |
 MOVEWORD :                    D094 C |  NAMEPNT :                     C08A C |
 NBYTES :                      C7F1 C | *NESTMAX :                      100 - |
 NEWLINE :                     C9B1 C |  NEWLN1 :                      C9B9 C |
 NFUNCTS :                       29 - |  NOFILE :                      C3F0 C |
 NONBLANK :                    C24F C |  NONE :                        C3EA C |
 NOSPACE :                     C607 C |  NUMCMDS :                        6 - |
 NXENT1 :                      CE19 C |  NXENT2 :                      CE20 C |
 NXENTRY :                     CE05 C |  OFFSET :                      D5CE C |
 OLDDRV :                      D5DF C |  OPEN :                        C0CB C |
 OPENFCB :                     C0D0 C |  OPENFIL :                     D49C C |
 OPENIT :                      D051 C |  OPENIT1 :                     D05A C |
 OPENIT2 :                     D08B C |  OUTCHAR :                     C948 C |
 OUTCHR1 :                     C962 C |  OUTCHR2 :                     C979 C |
 OUTCON :                      C990 C |  OUTCON1 :                     C996 C |
 OUTCRLF :                     C9C9 C |  OUTFLAG :                     CB0A C |
*PACKING :                        0 - | *PADDING :                        1 - |
 PARAMS :                      CB43 C |  PATTRN1 :                     C328 C |
 PATTRN2 :                     C800 C |  PLINE :                       C0A7 C |
 PLINE2 :                      C0AC C |  POSITION :                    D303 C |
 POSITN1 :                     D307 C |  POSITN2 :                     D347 C |
 POSITN3 :                     D37F C |  POSITN4 :                     D384 C |
 POSITN5 :                     D38B C |  PRINT :                       C08C C |
 PRINTB :                      C092 C | *PRSTAT :                      D62D C |
 PRTERR :                      C8E5 C |  PRTFLAG :                     CB0D C |
 PRTMESG :                     C9D3 C |  PRTSTR :                      CAF8 C |
 PUNCH :                       D612 C |  PUTDMA :                      D50A C |
 RANSIZ1 :                     D3E4 C |  RANSIZ2 :                     D406 C |
 RANSIZ3 :                     D40C C |  RANSIZE :                     D3D2 C |
 RDBUF1 :                      C9EF C |  RDBUF10 :                     CA70 C |
 RDBUF11 :                     CA78 C |  RDBUF12 :                     CA8A C |
 RDBUF13 :                     CA99 C |  RDBUF14 :                     CAA6 C |
 RDBUF15 :                     CAA9 C |  RDBUF16 :                     CABD C |
 RDBUF17 :                     CAC1 C |  RDBUF2 :                      C9F1 C |
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 68 - 2/13/2018 8:47:39


 RDBUF3 :                      CA16 C |  RDBUF4 :                      CA26 C |
 RDBUF5 :                      CA37 C |  RDBUF6 :                      CA48 C |
 RDBUF7 :                      CA4E C |  RDBUF8 :                      CA5F C |
 RDBUF9 :                      CA6B C |  RDBUFF :                      C9E1 C |
 RDERR :                       C3DF C |  RDERROR :                     C3D9 C |
 RDRANDOM :                    D541 C |  RDREC :                       C0F9 C |
 RDSEQ :                       D1BC C |  RDSEQ1 :                      D1C1 C |
 RDSEQ2 :                      D1E6 C |  RDSEQ3 :                      D1FB C |
 RDWRTFLG :                    D5D3 C |  READ :                        D627 C |
 READER :                      D615 C |  READFCB :                     C0FE C |
 READRAN :                     D393 C |  READSEQ :                     D4E0 C |
*RELAXED :                        0 - |  RELBLOCK :                    D5D7 C |
 RENAM :                       C10E C |  RENAME :                      C610 C |
 RENAME1 :                     C63F C |  RENAME2 :                     C659 C |
*RENAME3 :                     C65E C |  RENAME4 :                     C66D C |
 RENAME5 :                     C673 C |  RENAME6 :                     C679 C |
 RENFILE :                     D4F5 C |  RESDSK :                      C0B8 C |
 RESETDR :                     C466 C |  RODISK :                      C80D C |
 ROFILE :                      C80F C |  RSTDSK :                      D483 C |
 RTN :                         CB04 C |  RTNCODE :                     C7EE C |
 SAMEXT :                      CF07 C |  SAVATR1 :                     D040 C |
 SAVE :                        C5AD C |  SAVE1 :                       C5D4 C |
 SAVE2 :                       C5F1 C |  SAVE3 :                       C5FB C |
 SAVE4 :                       C601 C |  SAVEATTR :                    D03B C |
 SAVEFCB :                     D5D9 C |  SAVEXT :                      D5E2 C |
 SAVNREC :                     D5E3 C |  SAVNXT :                      D5E1 C |
 SCRATCH1 :                    D5B3 C |  SCRATCH2 :                    D5B5 C |
 SCRATCH3 :                    D5B7 C |  SEARCH :                      C32E C |
 SEARCH1 :                     C333 C |  SEARCH2 :                     C33C C |
 SEARCH3 :                     C34F C |  SEARCH4 :                     C354 C |
 SECTORS :                     D5C1 C |  SECTRN :                      D630 C |
 SELDSK :                      D61B C |  SELECT :                      CB59 C |
 SELECT1 :                     CB9D C |  SETATTR :                     D51D C |
 SETBIT :                      CD0B C |  SETCDRV :                     C11A C |
 SETDIR :                      CD9C C |  SETDMA :                      D624 C |
 SETDSK :                      D445 C |  SETEXT :                      CCA6 C |
 SETFILE :                     CE6B C |  SETFL1 :                      CE75 C |
 SETFL2 :                      CE88 C |  SETFL3 :                      CE8E C |
 SETFL4 :                      CE9D C |  SETHLDE :                     CCAE C |
 SETIOB :                      CAF3 C |  SETNREC :                     CCD2 C |
 SETRAN :                      D40E C |  SETS2B7 :                     CD78 C |
 SETSEC :                      D621 C |  SETSTAT :                     CB01 C |
 SETTRK :                      D61E C |  SETUSER :                     D53B C |
 SHIFTL :                      CD04 C |  SHIFTL1 :                     CD05 C |
 SHIFTR :                      CCEA C |  SHIFTR1 :                     CCEB C |
 SHOWIT :                      C97F C |  SLCTERR :                     CB47 C |
 SPACE :                       C0A2 C |  SRCHFCB :                     C0E9 C |
 SRCHFST :                     C0DF C |  SRCHNXT :                     C0E4 C |
 STARTING :                    CB0B C |  STATUS :                      CB45 C |
 STBITMAP :                    CE5C C |  STBMAP1 :                     CE64 C |
 STDDMA :                      C1D5 C |  STFILPOS :                    CDFE C |
 STKAREA :                     CB41 - |  STNREC1 :                     CCDE C |
 STRDATA :                     CCBB C |  STSTATUS :                    CF01 C |
 SUBHL :                       CD95 C |  SYNERR :                      C209 C |
 SYNERR1 :                     C20F C |  SYNERR2 :                     C222 C |
 TAB :                            9 - |  TBASE :                        100 - |
 TBUFF :                         80 - |  TDRIVE :                         4 - |
 TFCB :                          5C - | *TIME :                     8:47:39 - |
 TRKSEC :                      CBC3 C |  TRKSEC1 :                     CBD1 C |
 TRKSEC2 :                     CBE4 C |  TRKSEC3 :                     CBFA C |
 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 69 - 2/13/2018 8:47:39


 TRKSEC4 :                     CC0F C | *TRUE :                           1 - |
 TYPE :                        C55D C |  TYPE1 :                       C574 C |
*TYPE2 :                       C577 C |  TYPE3 :                       C587 C |
 TYPE4 :                       C5A0 C |  TYPE5 :                       C5A7 C |
 UNKNOWN :                     C6A5 C |  UNKWN0 :                      C771 C |
 UNKWN1 :                      C6C4 C | *UNKWN2 :                      C6CD C |
 UNKWN3 :                      C6E1 C |  UNKWN4 :                      C701 C |
 UNKWN5 :                      C730 C |  UNKWN6 :                      C73E C |
 UNKWN7 :                      C743 C |  UNKWN8 :                      C74F C |
 UNKWN9 :                      C76B C |  UPDATE :                      D001 C |
 UPDATE1 :                     D010 C |  UPPER :                       C130 C |
 USER :                        C68E C |  USERDMA :                     D5B1 C |
 USERNO :                      CB41 C |  USRSTACK :                    CB0F C |
 VERIFY :                      C1F5 C |  VERIFY1 :                     C1FD C |
*VERSION :                     142F - |  WBOOT :                       D603 C |
 WRITE :                       D62A C |  WRITERAN :                    D39C C |
 WRTPRT :                      D5AD C |  WRTPRTD :                     CD2C C |
 WRTREC :                      C104 C |  WRTSEQ :                      D4E6 C |
 WTRANDOM :                    D547 C |  WTSEQ :                       D1FE C |
 WTSEQ1 :                      D203 C |  WTSEQ10 :                     D2D2 C |
 WTSEQ11 :                     D2FE C |  WTSEQ12 :                     D300 C |
 WTSEQ2 :                      D23B C |  WTSEQ3 :                      D248 C |
 WTSEQ4 :                      D264 C |  WTSEQ5 :                      D26C C |
 WTSEQ6 :                      D26E C |  WTSEQ7 :                      D28C C |
 WTSEQ8 :                      D29A C |  WTSEQ9 :                      D2BB C |
*WTSEQ99 :                     D2DF C |  WTSPECL :                     D59B C |
 XLATE :                       D5D0 C |  YESNO :                       C552 C |

    527 symbols
     38 unused symbols

 AS V1.42 Beta [Bld 115] - source file cpm22.asm - page 70 - 2/13/2018 8:47:39


  codepages:
  ----------

STANDARD (0 changed characters)


0.09 seconds assembly time

   3759 lines source file
      2 passes
      0 errors
      0 warnings
